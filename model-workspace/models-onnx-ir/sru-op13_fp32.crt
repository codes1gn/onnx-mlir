module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: tensor<1x28x28xf32>) -> tensor<1x10xf32> attributes {input_names = ["Placeholder:0"], output_names = ["Softmax:0"]} {
    %0 = crt.constant : () -> tensor<1xi64>
    %1 = crt.constant : () -> tensor<f32>
    %2 = crt.constant : () -> tensor<128xf32>
    %3 = crt.constant : () -> tensor<128xf32>
    %4 = crt.constant : () -> tensor<128x384xf32>
    %5 = crt.constant : () -> tensor<128xf32>
    %6 = crt.constant : () -> tensor<128xf32>
    %7 = crt.constant : () -> tensor<28x384xf32>
    %8 = crt.constant : () -> tensor<2xi64>
    %9 = crt.constant : () -> tensor<2xi64>
    %10 = crt.constant : () -> tensor<2xi64>
    %11 = crt.constant : () -> tensor<2xi64>
    %12 = crt.constant : () -> tensor<1xi64>
    %13 = crt.constant : () -> tensor<10xf32>
    %14 = crt.constant : () -> tensor<128x10xf32>
    %15:28 = crt.split %arg0, %0 : (tensor<1x28x28xf32>, tensor<1xi64>) -> (tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>, tensor<1x1x28xf32>)
    %16 = crt.squeeze %15#1, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %17 = crt.matmul %16, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %18:3 = crt.split %17, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %19 = crt.add %18#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %20 = "onnx.Sigmoid"(%19) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_1/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %21 = crt.add %18#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %22 = "onnx.Sigmoid"(%21) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_1/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %23 = crt.sub %1, %22 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %24 = crt.mul %23, %18#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %25 = crt.squeeze %15#0, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %26 = crt.matmul %25, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %27:3 = crt.split %26, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %28 = crt.add %27#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %29 = "onnx.Sigmoid"(%28) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %30 = crt.add %27#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %31 = "onnx.Sigmoid"(%30) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %32 = crt.sub %1, %31 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %33 = crt.mul %32, %27#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %34 = crt.constant : () -> tensor<1x128xf32>
    %35 = crt.constant : () -> tensor<1x128xf32>
    %36 = crt.mul %31, %35 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %37 = crt.add %36, %33 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %38 = crt.tanh %37 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %39 = crt.mul %29, %38 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %40 = crt.matmul %39, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %41:3 = crt.split %40, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %42 = crt.add %41#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %43 = "onnx.Sigmoid"(%42) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %44 = crt.sub %1, %43 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %45 = crt.mul %44, %41#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %46 = crt.mul %43, %34 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %47 = crt.add %46, %45 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %48 = crt.concat %37, %47 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %49 = crt.constant : () -> tensor<2xi64>
    %50 = crt.constant : () -> tensor<2xi64>
    %51 = "onnx.Slice"(%48, %8, %11, %49, %50) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_1/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %52 = crt.constant : () -> tensor<2xi64>
    %53 = crt.constant : () -> tensor<2xi64>
    %54 = "onnx.Slice"(%48, %9, %10, %52, %53) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_1/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %55 = crt.mul %22, %54 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %56 = crt.add %55, %24 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %57 = crt.tanh %56 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %58 = crt.mul %20, %57 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %59 = crt.matmul %58, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %60:3 = crt.split %59, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %61 = crt.add %60#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %62 = "onnx.Sigmoid"(%61) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_1/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %63 = crt.sub %1, %62 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %64 = crt.mul %63, %60#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %65 = crt.mul %62, %51 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %66 = crt.add %65, %64 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %67 = crt.concat %56, %66 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %68 = crt.constant : () -> tensor<2xi64>
    %69 = crt.constant : () -> tensor<2xi64>
    %70 = "onnx.Slice"(%67, %8, %11, %68, %69) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_2/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %71 = crt.constant : () -> tensor<2xi64>
    %72 = crt.constant : () -> tensor<2xi64>
    %73 = "onnx.Slice"(%67, %9, %10, %71, %72) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_2/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %74 = crt.squeeze %15#27, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %75 = crt.matmul %74, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %76:3 = crt.split %75, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %77 = crt.add %76#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %78 = "onnx.Sigmoid"(%77) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_27/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %79 = crt.add %76#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %80 = "onnx.Sigmoid"(%79) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_27/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %81 = crt.sub %1, %80 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %82 = crt.mul %81, %76#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %83 = crt.squeeze %15#26, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %84 = crt.matmul %83, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %85:3 = crt.split %84, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %86 = crt.add %85#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %87 = "onnx.Sigmoid"(%86) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_26/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %88 = crt.add %85#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %89 = "onnx.Sigmoid"(%88) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_26/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %90 = crt.sub %1, %89 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %91 = crt.mul %90, %85#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %92 = crt.squeeze %15#25, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %93 = crt.matmul %92, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %94:3 = crt.split %93, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %95 = crt.add %94#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %96 = "onnx.Sigmoid"(%95) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_25/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %97 = crt.add %94#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %98 = "onnx.Sigmoid"(%97) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_25/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %99 = crt.sub %1, %98 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %100 = crt.mul %99, %94#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %101 = crt.squeeze %15#24, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %102 = crt.matmul %101, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %103:3 = crt.split %102, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %104 = crt.add %103#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %105 = "onnx.Sigmoid"(%104) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_24/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %106 = crt.add %103#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %107 = "onnx.Sigmoid"(%106) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_24/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %108 = crt.sub %1, %107 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %109 = crt.mul %108, %103#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %110 = crt.squeeze %15#23, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %111 = crt.matmul %110, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %112:3 = crt.split %111, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %113 = crt.add %112#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %114 = "onnx.Sigmoid"(%113) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_23/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %115 = crt.add %112#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %116 = "onnx.Sigmoid"(%115) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_23/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %117 = crt.sub %1, %116 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %118 = crt.mul %117, %112#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %119 = crt.squeeze %15#22, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %120 = crt.matmul %119, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %121:3 = crt.split %120, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %122 = crt.add %121#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %123 = "onnx.Sigmoid"(%122) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_22/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %124 = crt.add %121#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %125 = "onnx.Sigmoid"(%124) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_22/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %126 = crt.sub %1, %125 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %127 = crt.mul %126, %121#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %128 = crt.squeeze %15#21, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %129 = crt.matmul %128, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %130:3 = crt.split %129, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %131 = crt.add %130#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %132 = "onnx.Sigmoid"(%131) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_21/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %133 = crt.add %130#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %134 = "onnx.Sigmoid"(%133) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_21/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %135 = crt.sub %1, %134 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %136 = crt.mul %135, %130#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %137 = crt.squeeze %15#20, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %138 = crt.matmul %137, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %139:3 = crt.split %138, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %140 = crt.add %139#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %141 = "onnx.Sigmoid"(%140) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_20/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %142 = crt.add %139#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %143 = "onnx.Sigmoid"(%142) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_20/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %144 = crt.sub %1, %143 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %145 = crt.mul %144, %139#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %146 = crt.squeeze %15#19, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %147 = crt.matmul %146, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %148:3 = crt.split %147, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %149 = crt.add %148#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %150 = "onnx.Sigmoid"(%149) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_19/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %151 = crt.add %148#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %152 = "onnx.Sigmoid"(%151) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_19/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %153 = crt.sub %1, %152 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %154 = crt.mul %153, %148#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %155 = crt.squeeze %15#18, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %156 = crt.matmul %155, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %157:3 = crt.split %156, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %158 = crt.add %157#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %159 = "onnx.Sigmoid"(%158) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_18/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %160 = crt.add %157#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %161 = "onnx.Sigmoid"(%160) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_18/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %162 = crt.sub %1, %161 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %163 = crt.mul %162, %157#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %164 = crt.squeeze %15#17, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %165 = crt.matmul %164, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %166:3 = crt.split %165, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %167 = crt.add %166#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %168 = "onnx.Sigmoid"(%167) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_17/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %169 = crt.add %166#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %170 = "onnx.Sigmoid"(%169) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_17/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %171 = crt.sub %1, %170 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %172 = crt.mul %171, %166#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %173 = crt.squeeze %15#16, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %174 = crt.matmul %173, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %175:3 = crt.split %174, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %176 = crt.add %175#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %177 = "onnx.Sigmoid"(%176) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_16/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %178 = crt.add %175#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %179 = "onnx.Sigmoid"(%178) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_16/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %180 = crt.sub %1, %179 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %181 = crt.mul %180, %175#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %182 = crt.squeeze %15#15, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %183 = crt.matmul %182, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %184:3 = crt.split %183, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %185 = crt.add %184#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %186 = "onnx.Sigmoid"(%185) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_15/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %187 = crt.add %184#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %188 = "onnx.Sigmoid"(%187) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_15/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %189 = crt.sub %1, %188 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %190 = crt.mul %189, %184#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %191 = crt.squeeze %15#14, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %192 = crt.matmul %191, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %193:3 = crt.split %192, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %194 = crt.add %193#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %195 = "onnx.Sigmoid"(%194) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_14/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %196 = crt.add %193#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %197 = "onnx.Sigmoid"(%196) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_14/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %198 = crt.sub %1, %197 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %199 = crt.mul %198, %193#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %200 = crt.squeeze %15#13, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %201 = crt.matmul %200, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %202:3 = crt.split %201, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %203 = crt.add %202#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %204 = "onnx.Sigmoid"(%203) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_13/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %205 = crt.add %202#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %206 = "onnx.Sigmoid"(%205) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_13/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %207 = crt.sub %1, %206 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %208 = crt.mul %207, %202#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %209 = crt.squeeze %15#12, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %210 = crt.matmul %209, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %211:3 = crt.split %210, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %212 = crt.add %211#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %213 = "onnx.Sigmoid"(%212) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_12/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %214 = crt.add %211#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %215 = "onnx.Sigmoid"(%214) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_12/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %216 = crt.sub %1, %215 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %217 = crt.mul %216, %211#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %218 = crt.squeeze %15#11, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %219 = crt.matmul %218, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %220:3 = crt.split %219, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %221 = crt.add %220#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %222 = "onnx.Sigmoid"(%221) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_11/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %223 = crt.add %220#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %224 = "onnx.Sigmoid"(%223) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_11/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %225 = crt.sub %1, %224 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %226 = crt.mul %225, %220#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %227 = crt.squeeze %15#10, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %228 = crt.matmul %227, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %229:3 = crt.split %228, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %230 = crt.add %229#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %231 = "onnx.Sigmoid"(%230) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_10/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %232 = crt.add %229#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %233 = "onnx.Sigmoid"(%232) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_10/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %234 = crt.sub %1, %233 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %235 = crt.mul %234, %229#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %236 = crt.squeeze %15#9, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %237 = crt.matmul %236, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %238:3 = crt.split %237, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %239 = crt.add %238#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %240 = "onnx.Sigmoid"(%239) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_9/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %241 = crt.add %238#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %242 = "onnx.Sigmoid"(%241) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_9/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %243 = crt.sub %1, %242 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %244 = crt.mul %243, %238#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %245 = crt.squeeze %15#8, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %246 = crt.matmul %245, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %247:3 = crt.split %246, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %248 = crt.add %247#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %249 = "onnx.Sigmoid"(%248) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_8/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %250 = crt.add %247#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %251 = "onnx.Sigmoid"(%250) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_8/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %252 = crt.sub %1, %251 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %253 = crt.mul %252, %247#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %254 = crt.squeeze %15#7, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %255 = crt.matmul %254, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %256:3 = crt.split %255, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %257 = crt.add %256#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %258 = "onnx.Sigmoid"(%257) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_7/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %259 = crt.add %256#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %260 = "onnx.Sigmoid"(%259) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_7/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %261 = crt.sub %1, %260 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %262 = crt.mul %261, %256#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %263 = crt.squeeze %15#6, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %264 = crt.matmul %263, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %265:3 = crt.split %264, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %266 = crt.add %265#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %267 = "onnx.Sigmoid"(%266) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_6/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %268 = crt.add %265#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %269 = "onnx.Sigmoid"(%268) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_6/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %270 = crt.sub %1, %269 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %271 = crt.mul %270, %265#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %272 = crt.squeeze %15#5, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %273 = crt.matmul %272, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %274:3 = crt.split %273, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %275 = crt.add %274#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %276 = "onnx.Sigmoid"(%275) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_5/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %277 = crt.add %274#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %278 = "onnx.Sigmoid"(%277) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_5/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %279 = crt.sub %1, %278 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %280 = crt.mul %279, %274#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %281 = crt.squeeze %15#4, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %282 = crt.matmul %281, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %283:3 = crt.split %282, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %284 = crt.add %283#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %285 = "onnx.Sigmoid"(%284) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_4/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %286 = crt.add %283#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %287 = "onnx.Sigmoid"(%286) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_4/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %288 = crt.sub %1, %287 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %289 = crt.mul %288, %283#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %290 = crt.squeeze %15#3, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %291 = crt.matmul %290, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %292:3 = crt.split %291, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %293 = crt.add %292#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %294 = "onnx.Sigmoid"(%293) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_3/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %295 = crt.add %292#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %296 = "onnx.Sigmoid"(%295) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_3/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %297 = crt.sub %1, %296 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %298 = crt.mul %297, %292#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %299 = crt.squeeze %15#2, %12 : (tensor<1x1x28xf32>, tensor<1xi64>) -> tensor<1x28xf32>
    %300 = crt.matmul %299, %7 : (tensor<1x28xf32>, tensor<28x384xf32>) -> tensor<1x384xf32>
    %301:3 = crt.split %300, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %302 = crt.add %301#2, %5 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %303 = "onnx.Sigmoid"(%302) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_2/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %304 = crt.add %301#1, %6 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %305 = "onnx.Sigmoid"(%304) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_2/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %306 = crt.sub %1, %305 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %307 = crt.mul %306, %301#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %308 = crt.mul %305, %73 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %309 = crt.add %308, %307 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %310 = crt.tanh %309 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %311 = crt.mul %303, %310 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %312 = crt.matmul %311, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %313:3 = crt.split %312, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %314 = crt.add %313#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %315 = "onnx.Sigmoid"(%314) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_2/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %316 = crt.sub %1, %315 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %317 = crt.mul %316, %313#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %318 = crt.mul %315, %70 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %319 = crt.add %318, %317 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %320 = crt.concat %309, %319 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %321 = crt.constant : () -> tensor<2xi64>
    %322 = crt.constant : () -> tensor<2xi64>
    %323 = "onnx.Slice"(%320, %8, %11, %321, %322) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_3/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %324 = crt.constant : () -> tensor<2xi64>
    %325 = crt.constant : () -> tensor<2xi64>
    %326 = "onnx.Slice"(%320, %9, %10, %324, %325) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_3/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %327 = crt.mul %296, %326 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %328 = crt.add %327, %298 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %329 = crt.tanh %328 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %330 = crt.mul %294, %329 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %331 = crt.matmul %330, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %332:3 = crt.split %331, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %333 = crt.add %332#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %334 = "onnx.Sigmoid"(%333) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_3/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %335 = crt.sub %1, %334 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %336 = crt.mul %335, %332#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %337 = crt.mul %334, %323 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %338 = crt.add %337, %336 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %339 = crt.concat %328, %338 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %340 = crt.constant : () -> tensor<2xi64>
    %341 = crt.constant : () -> tensor<2xi64>
    %342 = "onnx.Slice"(%339, %8, %11, %340, %341) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_4/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %343 = crt.constant : () -> tensor<2xi64>
    %344 = crt.constant : () -> tensor<2xi64>
    %345 = "onnx.Slice"(%339, %9, %10, %343, %344) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_4/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %346 = crt.mul %287, %345 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %347 = crt.add %346, %289 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %348 = crt.tanh %347 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %349 = crt.mul %285, %348 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %350 = crt.matmul %349, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %351:3 = crt.split %350, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %352 = crt.add %351#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %353 = "onnx.Sigmoid"(%352) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_4/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %354 = crt.sub %1, %353 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %355 = crt.mul %354, %351#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %356 = crt.mul %353, %342 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %357 = crt.add %356, %355 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %358 = crt.concat %347, %357 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %359 = crt.constant : () -> tensor<2xi64>
    %360 = crt.constant : () -> tensor<2xi64>
    %361 = "onnx.Slice"(%358, %8, %11, %359, %360) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_5/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %362 = crt.constant : () -> tensor<2xi64>
    %363 = crt.constant : () -> tensor<2xi64>
    %364 = "onnx.Slice"(%358, %9, %10, %362, %363) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_5/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %365 = crt.mul %278, %364 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %366 = crt.add %365, %280 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %367 = crt.tanh %366 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %368 = crt.mul %276, %367 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %369 = crt.matmul %368, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %370:3 = crt.split %369, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %371 = crt.add %370#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %372 = "onnx.Sigmoid"(%371) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_5/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %373 = crt.sub %1, %372 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %374 = crt.mul %373, %370#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %375 = crt.mul %372, %361 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %376 = crt.add %375, %374 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %377 = crt.concat %366, %376 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %378 = crt.constant : () -> tensor<2xi64>
    %379 = crt.constant : () -> tensor<2xi64>
    %380 = "onnx.Slice"(%377, %8, %11, %378, %379) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_6/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %381 = crt.constant : () -> tensor<2xi64>
    %382 = crt.constant : () -> tensor<2xi64>
    %383 = "onnx.Slice"(%377, %9, %10, %381, %382) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_6/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %384 = crt.mul %269, %383 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %385 = crt.add %384, %271 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %386 = crt.tanh %385 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %387 = crt.mul %267, %386 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %388 = crt.matmul %387, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %389:3 = crt.split %388, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %390 = crt.add %389#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %391 = "onnx.Sigmoid"(%390) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_6/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %392 = crt.sub %1, %391 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %393 = crt.mul %392, %389#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %394 = crt.mul %391, %380 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %395 = crt.add %394, %393 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %396 = crt.concat %385, %395 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %397 = crt.constant : () -> tensor<2xi64>
    %398 = crt.constant : () -> tensor<2xi64>
    %399 = "onnx.Slice"(%396, %8, %11, %397, %398) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_7/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %400 = crt.constant : () -> tensor<2xi64>
    %401 = crt.constant : () -> tensor<2xi64>
    %402 = "onnx.Slice"(%396, %9, %10, %400, %401) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_7/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %403 = crt.mul %260, %402 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %404 = crt.add %403, %262 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %405 = crt.tanh %404 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %406 = crt.mul %258, %405 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %407 = crt.matmul %406, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %408:3 = crt.split %407, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %409 = crt.add %408#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %410 = "onnx.Sigmoid"(%409) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_7/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %411 = crt.sub %1, %410 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %412 = crt.mul %411, %408#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %413 = crt.mul %410, %399 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %414 = crt.add %413, %412 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %415 = crt.concat %404, %414 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %416 = crt.constant : () -> tensor<2xi64>
    %417 = crt.constant : () -> tensor<2xi64>
    %418 = "onnx.Slice"(%415, %8, %11, %416, %417) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_8/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %419 = crt.constant : () -> tensor<2xi64>
    %420 = crt.constant : () -> tensor<2xi64>
    %421 = "onnx.Slice"(%415, %9, %10, %419, %420) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_8/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %422 = crt.mul %251, %421 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %423 = crt.add %422, %253 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %424 = crt.tanh %423 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %425 = crt.mul %249, %424 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %426 = crt.matmul %425, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %427:3 = crt.split %426, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %428 = crt.add %427#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %429 = "onnx.Sigmoid"(%428) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_8/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %430 = crt.sub %1, %429 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %431 = crt.mul %430, %427#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %432 = crt.mul %429, %418 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %433 = crt.add %432, %431 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %434 = crt.concat %423, %433 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %435 = crt.constant : () -> tensor<2xi64>
    %436 = crt.constant : () -> tensor<2xi64>
    %437 = "onnx.Slice"(%434, %8, %11, %435, %436) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_9/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %438 = crt.constant : () -> tensor<2xi64>
    %439 = crt.constant : () -> tensor<2xi64>
    %440 = "onnx.Slice"(%434, %9, %10, %438, %439) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_9/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %441 = crt.mul %242, %440 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %442 = crt.add %441, %244 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %443 = crt.tanh %442 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %444 = crt.mul %240, %443 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %445 = crt.matmul %444, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %446:3 = crt.split %445, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %447 = crt.add %446#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %448 = "onnx.Sigmoid"(%447) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_9/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %449 = crt.sub %1, %448 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %450 = crt.mul %449, %446#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %451 = crt.mul %448, %437 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %452 = crt.add %451, %450 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %453 = crt.concat %442, %452 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %454 = crt.constant : () -> tensor<2xi64>
    %455 = crt.constant : () -> tensor<2xi64>
    %456 = "onnx.Slice"(%453, %8, %11, %454, %455) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_10/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %457 = crt.constant : () -> tensor<2xi64>
    %458 = crt.constant : () -> tensor<2xi64>
    %459 = "onnx.Slice"(%453, %9, %10, %457, %458) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_10/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %460 = crt.mul %233, %459 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %461 = crt.add %460, %235 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %462 = crt.tanh %461 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %463 = crt.mul %231, %462 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %464 = crt.matmul %463, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %465:3 = crt.split %464, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %466 = crt.add %465#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %467 = "onnx.Sigmoid"(%466) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_10/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %468 = crt.sub %1, %467 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %469 = crt.mul %468, %465#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %470 = crt.mul %467, %456 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %471 = crt.add %470, %469 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %472 = crt.concat %461, %471 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %473 = crt.constant : () -> tensor<2xi64>
    %474 = crt.constant : () -> tensor<2xi64>
    %475 = "onnx.Slice"(%472, %8, %11, %473, %474) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_11/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %476 = crt.constant : () -> tensor<2xi64>
    %477 = crt.constant : () -> tensor<2xi64>
    %478 = "onnx.Slice"(%472, %9, %10, %476, %477) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_11/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %479 = crt.mul %224, %478 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %480 = crt.add %479, %226 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %481 = crt.tanh %480 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %482 = crt.mul %222, %481 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %483 = crt.matmul %482, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %484:3 = crt.split %483, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %485 = crt.add %484#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %486 = "onnx.Sigmoid"(%485) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_11/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %487 = crt.sub %1, %486 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %488 = crt.mul %487, %484#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %489 = crt.mul %486, %475 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %490 = crt.add %489, %488 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %491 = crt.concat %480, %490 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %492 = crt.constant : () -> tensor<2xi64>
    %493 = crt.constant : () -> tensor<2xi64>
    %494 = "onnx.Slice"(%491, %8, %11, %492, %493) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_12/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %495 = crt.constant : () -> tensor<2xi64>
    %496 = crt.constant : () -> tensor<2xi64>
    %497 = "onnx.Slice"(%491, %9, %10, %495, %496) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_12/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %498 = crt.mul %215, %497 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %499 = crt.add %498, %217 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %500 = crt.tanh %499 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %501 = crt.mul %213, %500 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %502 = crt.matmul %501, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %503:3 = crt.split %502, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %504 = crt.add %503#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %505 = "onnx.Sigmoid"(%504) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_12/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %506 = crt.sub %1, %505 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %507 = crt.mul %506, %503#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %508 = crt.mul %505, %494 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %509 = crt.add %508, %507 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %510 = crt.concat %499, %509 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %511 = crt.constant : () -> tensor<2xi64>
    %512 = crt.constant : () -> tensor<2xi64>
    %513 = "onnx.Slice"(%510, %8, %11, %511, %512) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_13/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %514 = crt.constant : () -> tensor<2xi64>
    %515 = crt.constant : () -> tensor<2xi64>
    %516 = "onnx.Slice"(%510, %9, %10, %514, %515) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_13/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %517 = crt.mul %206, %516 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %518 = crt.add %517, %208 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %519 = crt.tanh %518 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %520 = crt.mul %204, %519 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %521 = crt.matmul %520, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %522:3 = crt.split %521, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %523 = crt.add %522#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %524 = "onnx.Sigmoid"(%523) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_13/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %525 = crt.sub %1, %524 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %526 = crt.mul %525, %522#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %527 = crt.mul %524, %513 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %528 = crt.add %527, %526 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %529 = crt.concat %518, %528 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %530 = crt.constant : () -> tensor<2xi64>
    %531 = crt.constant : () -> tensor<2xi64>
    %532 = "onnx.Slice"(%529, %8, %11, %530, %531) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_14/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %533 = crt.constant : () -> tensor<2xi64>
    %534 = crt.constant : () -> tensor<2xi64>
    %535 = "onnx.Slice"(%529, %9, %10, %533, %534) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_14/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %536 = crt.mul %197, %535 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %537 = crt.add %536, %199 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %538 = crt.tanh %537 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %539 = crt.mul %195, %538 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %540 = crt.matmul %539, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %541:3 = crt.split %540, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %542 = crt.add %541#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %543 = "onnx.Sigmoid"(%542) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_14/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %544 = crt.sub %1, %543 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %545 = crt.mul %544, %541#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %546 = crt.mul %543, %532 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %547 = crt.add %546, %545 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %548 = crt.concat %537, %547 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %549 = crt.constant : () -> tensor<2xi64>
    %550 = crt.constant : () -> tensor<2xi64>
    %551 = "onnx.Slice"(%548, %8, %11, %549, %550) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_15/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %552 = crt.constant : () -> tensor<2xi64>
    %553 = crt.constant : () -> tensor<2xi64>
    %554 = "onnx.Slice"(%548, %9, %10, %552, %553) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_15/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %555 = crt.mul %188, %554 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %556 = crt.add %555, %190 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %557 = crt.tanh %556 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %558 = crt.mul %186, %557 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %559 = crt.matmul %558, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %560:3 = crt.split %559, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %561 = crt.add %560#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %562 = "onnx.Sigmoid"(%561) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_15/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %563 = crt.sub %1, %562 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %564 = crt.mul %563, %560#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %565 = crt.mul %562, %551 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %566 = crt.add %565, %564 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %567 = crt.concat %556, %566 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %568 = crt.constant : () -> tensor<2xi64>
    %569 = crt.constant : () -> tensor<2xi64>
    %570 = "onnx.Slice"(%567, %8, %11, %568, %569) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_16/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %571 = crt.constant : () -> tensor<2xi64>
    %572 = crt.constant : () -> tensor<2xi64>
    %573 = "onnx.Slice"(%567, %9, %10, %571, %572) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_16/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %574 = crt.mul %179, %573 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %575 = crt.add %574, %181 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %576 = crt.tanh %575 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %577 = crt.mul %177, %576 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %578 = crt.matmul %577, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %579:3 = crt.split %578, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %580 = crt.add %579#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %581 = "onnx.Sigmoid"(%580) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_16/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %582 = crt.sub %1, %581 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %583 = crt.mul %582, %579#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %584 = crt.mul %581, %570 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %585 = crt.add %584, %583 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %586 = crt.concat %575, %585 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %587 = crt.constant : () -> tensor<2xi64>
    %588 = crt.constant : () -> tensor<2xi64>
    %589 = "onnx.Slice"(%586, %8, %11, %587, %588) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_17/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %590 = crt.constant : () -> tensor<2xi64>
    %591 = crt.constant : () -> tensor<2xi64>
    %592 = "onnx.Slice"(%586, %9, %10, %590, %591) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_17/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %593 = crt.mul %170, %592 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %594 = crt.add %593, %172 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %595 = crt.tanh %594 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %596 = crt.mul %168, %595 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %597 = crt.matmul %596, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %598:3 = crt.split %597, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %599 = crt.add %598#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %600 = "onnx.Sigmoid"(%599) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_17/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %601 = crt.sub %1, %600 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %602 = crt.mul %601, %598#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %603 = crt.mul %600, %589 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %604 = crt.add %603, %602 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %605 = crt.concat %594, %604 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %606 = crt.constant : () -> tensor<2xi64>
    %607 = crt.constant : () -> tensor<2xi64>
    %608 = "onnx.Slice"(%605, %8, %11, %606, %607) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_18/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %609 = crt.constant : () -> tensor<2xi64>
    %610 = crt.constant : () -> tensor<2xi64>
    %611 = "onnx.Slice"(%605, %9, %10, %609, %610) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_18/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %612 = crt.mul %161, %611 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %613 = crt.add %612, %163 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %614 = crt.tanh %613 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %615 = crt.mul %159, %614 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %616 = crt.matmul %615, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %617:3 = crt.split %616, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %618 = crt.add %617#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %619 = "onnx.Sigmoid"(%618) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_18/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %620 = crt.sub %1, %619 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %621 = crt.mul %620, %617#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %622 = crt.mul %619, %608 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %623 = crt.add %622, %621 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %624 = crt.concat %613, %623 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %625 = crt.constant : () -> tensor<2xi64>
    %626 = crt.constant : () -> tensor<2xi64>
    %627 = "onnx.Slice"(%624, %8, %11, %625, %626) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_19/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %628 = crt.constant : () -> tensor<2xi64>
    %629 = crt.constant : () -> tensor<2xi64>
    %630 = "onnx.Slice"(%624, %9, %10, %628, %629) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_19/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %631 = crt.mul %152, %630 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %632 = crt.add %631, %154 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %633 = crt.tanh %632 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %634 = crt.mul %150, %633 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %635 = crt.matmul %634, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %636:3 = crt.split %635, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %637 = crt.add %636#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %638 = "onnx.Sigmoid"(%637) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_19/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %639 = crt.sub %1, %638 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %640 = crt.mul %639, %636#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %641 = crt.mul %638, %627 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %642 = crt.add %641, %640 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %643 = crt.concat %632, %642 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %644 = crt.constant : () -> tensor<2xi64>
    %645 = crt.constant : () -> tensor<2xi64>
    %646 = "onnx.Slice"(%643, %8, %11, %644, %645) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_20/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %647 = crt.constant : () -> tensor<2xi64>
    %648 = crt.constant : () -> tensor<2xi64>
    %649 = "onnx.Slice"(%643, %9, %10, %647, %648) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_20/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %650 = crt.mul %143, %649 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %651 = crt.add %650, %145 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %652 = crt.tanh %651 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %653 = crt.mul %141, %652 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %654 = crt.matmul %653, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %655:3 = crt.split %654, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %656 = crt.add %655#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %657 = "onnx.Sigmoid"(%656) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_20/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %658 = crt.sub %1, %657 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %659 = crt.mul %658, %655#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %660 = crt.mul %657, %646 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %661 = crt.add %660, %659 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %662 = crt.concat %651, %661 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %663 = crt.constant : () -> tensor<2xi64>
    %664 = crt.constant : () -> tensor<2xi64>
    %665 = "onnx.Slice"(%662, %8, %11, %663, %664) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_21/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %666 = crt.constant : () -> tensor<2xi64>
    %667 = crt.constant : () -> tensor<2xi64>
    %668 = "onnx.Slice"(%662, %9, %10, %666, %667) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_21/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %669 = crt.mul %134, %668 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %670 = crt.add %669, %136 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %671 = crt.tanh %670 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %672 = crt.mul %132, %671 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %673 = crt.matmul %672, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %674:3 = crt.split %673, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %675 = crt.add %674#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %676 = "onnx.Sigmoid"(%675) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_21/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %677 = crt.sub %1, %676 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %678 = crt.mul %677, %674#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %679 = crt.mul %676, %665 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %680 = crt.add %679, %678 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %681 = crt.concat %670, %680 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %682 = crt.constant : () -> tensor<2xi64>
    %683 = crt.constant : () -> tensor<2xi64>
    %684 = "onnx.Slice"(%681, %8, %11, %682, %683) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_22/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %685 = crt.constant : () -> tensor<2xi64>
    %686 = crt.constant : () -> tensor<2xi64>
    %687 = "onnx.Slice"(%681, %9, %10, %685, %686) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_22/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %688 = crt.mul %125, %687 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %689 = crt.add %688, %127 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %690 = crt.tanh %689 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %691 = crt.mul %123, %690 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %692 = crt.matmul %691, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %693:3 = crt.split %692, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %694 = crt.add %693#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %695 = "onnx.Sigmoid"(%694) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_22/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %696 = crt.sub %1, %695 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %697 = crt.mul %696, %693#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %698 = crt.mul %695, %684 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %699 = crt.add %698, %697 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %700 = crt.concat %689, %699 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %701 = crt.constant : () -> tensor<2xi64>
    %702 = crt.constant : () -> tensor<2xi64>
    %703 = "onnx.Slice"(%700, %8, %11, %701, %702) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_23/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %704 = crt.constant : () -> tensor<2xi64>
    %705 = crt.constant : () -> tensor<2xi64>
    %706 = "onnx.Slice"(%700, %9, %10, %704, %705) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_23/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %707 = crt.mul %116, %706 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %708 = crt.add %707, %118 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %709 = crt.tanh %708 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %710 = crt.mul %114, %709 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %711 = crt.matmul %710, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %712:3 = crt.split %711, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %713 = crt.add %712#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %714 = "onnx.Sigmoid"(%713) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_23/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %715 = crt.sub %1, %714 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %716 = crt.mul %715, %712#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %717 = crt.mul %714, %703 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %718 = crt.add %717, %716 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %719 = crt.concat %708, %718 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %720 = crt.constant : () -> tensor<2xi64>
    %721 = crt.constant : () -> tensor<2xi64>
    %722 = "onnx.Slice"(%719, %8, %11, %720, %721) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_24/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %723 = crt.constant : () -> tensor<2xi64>
    %724 = crt.constant : () -> tensor<2xi64>
    %725 = "onnx.Slice"(%719, %9, %10, %723, %724) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_24/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %726 = crt.mul %107, %725 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %727 = crt.add %726, %109 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %728 = crt.tanh %727 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %729 = crt.mul %105, %728 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %730 = crt.matmul %729, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %731:3 = crt.split %730, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %732 = crt.add %731#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %733 = "onnx.Sigmoid"(%732) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_24/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %734 = crt.sub %1, %733 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %735 = crt.mul %734, %731#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %736 = crt.mul %733, %722 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %737 = crt.add %736, %735 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %738 = crt.concat %727, %737 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %739 = crt.constant : () -> tensor<2xi64>
    %740 = crt.constant : () -> tensor<2xi64>
    %741 = "onnx.Slice"(%738, %8, %11, %739, %740) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_25/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %742 = crt.constant : () -> tensor<2xi64>
    %743 = crt.constant : () -> tensor<2xi64>
    %744 = "onnx.Slice"(%738, %9, %10, %742, %743) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_25/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %745 = crt.mul %98, %744 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %746 = crt.add %745, %100 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %747 = crt.tanh %746 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %748 = crt.mul %96, %747 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %749 = crt.matmul %748, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %750:3 = crt.split %749, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %751 = crt.add %750#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %752 = "onnx.Sigmoid"(%751) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_25/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %753 = crt.sub %1, %752 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %754 = crt.mul %753, %750#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %755 = crt.mul %752, %741 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %756 = crt.add %755, %754 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %757 = crt.concat %746, %756 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %758 = crt.constant : () -> tensor<2xi64>
    %759 = crt.constant : () -> tensor<2xi64>
    %760 = "onnx.Slice"(%757, %8, %11, %758, %759) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_26/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %761 = crt.constant : () -> tensor<2xi64>
    %762 = crt.constant : () -> tensor<2xi64>
    %763 = "onnx.Slice"(%757, %9, %10, %761, %762) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_26/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %764 = crt.mul %89, %763 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %765 = crt.add %764, %91 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %766 = crt.tanh %765 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %767 = crt.mul %87, %766 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %768 = crt.matmul %767, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %769:3 = crt.split %768, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %770 = crt.add %769#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %771 = "onnx.Sigmoid"(%770) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_26/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %772 = crt.sub %1, %771 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %773 = crt.mul %772, %769#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %774 = crt.mul %771, %760 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %775 = crt.add %774, %773 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %776 = crt.concat %765, %775 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x256xf32>
    %777 = crt.constant : () -> tensor<2xi64>
    %778 = crt.constant : () -> tensor<2xi64>
    %779 = "onnx.Slice"(%776, %8, %11, %777, %778) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_27/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %780 = crt.constant : () -> tensor<2xi64>
    %781 = crt.constant : () -> tensor<2xi64>
    %782 = "onnx.Slice"(%776, %9, %10, %780, %781) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_0_27/Slice"} : (tensor<1x256xf32>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>, tensor<2xi64>) -> tensor<1x128xf32>
    %783 = crt.mul %80, %782 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %784 = crt.add %783, %82 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %785 = crt.tanh %784 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %786 = crt.mul %78, %785 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %787 = crt.matmul %786, %4 : (tensor<1x128xf32>, tensor<128x384xf32>) -> tensor<1x384xf32>
    %788:3 = crt.split %787, %0 : (tensor<1x384xf32>, tensor<1xi64>) -> (tensor<1x128xf32>, tensor<1x128xf32>, tensor<1x128xf32>)
    %789 = crt.add %788#2, %2 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %790 = "onnx.Sigmoid"(%789) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_27/SRUCell/Sigmoid_1"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %791 = crt.sub %1, %790 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %792 = crt.mul %791, %786 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %793 = crt.add %788#1, %3 : (tensor<1x128xf32>, tensor<128xf32>) -> tensor<1x128xf32>
    %794 = "onnx.Sigmoid"(%793) {onnx_node_name = "rnn/rnn/multi_rnn_cell/cell_1_27/SRUCell/Sigmoid"} : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %795 = crt.sub %1, %794 : (tensor<f32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %796 = crt.mul %795, %788#0 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %797 = crt.mul %794, %779 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %798 = crt.add %797, %796 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %799 = crt.tanh %798 : (tensor<1x128xf32>) -> tensor<1x128xf32>
    %800 = crt.mul %790, %799 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %801 = crt.add %800, %792 : (tensor<1x128xf32>, tensor<1x128xf32>) -> tensor<1x128xf32>
    %802 = crt.gemm %801, %14, %13 : (tensor<1x128xf32>, tensor<128x10xf32>, tensor<10xf32>) -> tensor<1x10xf32>
    %803 = crt.softmax %802 : (tensor<1x10xf32>) -> tensor<1x10xf32>
    return %803 : tensor<1x10xf32>
  }
  "onnx.EntryPoint"() {func = @main_graph} : () -> ()
}

module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: tensor<?x?xi64>, %arg1: tensor<?x?xi64>) -> tensor<?x?x512xf32> attributes {input_names = ["input_ids", "attention_mask"], output_names = ["encoder_output"]} {
    %0 = crt.constant : () -> tensor<65001x512xf32>
    %1 = crt.constant : () -> tensor<512x512xf32>
    %2 = crt.constant : () -> tensor<512xf32>
    %3 = crt.constant : () -> tensor<512xf32>
    %4 = crt.constant : () -> tensor<512xf32>
    %5 = crt.constant : () -> tensor<512xf32>
    %6 = crt.constant : () -> tensor<512xf32>
    %7 = crt.constant : () -> tensor<512xf32>
    %8 = crt.constant : () -> tensor<2048xf32>
    %9 = crt.constant : () -> tensor<512xf32>
    %10 = crt.constant : () -> tensor<512xf32>
    %11 = crt.constant : () -> tensor<512xf32>
    %12 = crt.constant : () -> tensor<512xf32>
    %13 = crt.constant : () -> tensor<512xf32>
    %14 = crt.constant : () -> tensor<512xf32>
    %15 = crt.constant : () -> tensor<512xf32>
    %16 = crt.constant : () -> tensor<2048xf32>
    %17 = crt.constant : () -> tensor<512xf32>
    %18 = crt.constant : () -> tensor<512xf32>
    %19 = crt.constant : () -> tensor<512xf32>
    %20 = crt.constant : () -> tensor<512xf32>
    %21 = crt.constant : () -> tensor<512xf32>
    %22 = crt.constant : () -> tensor<512xf32>
    %23 = crt.constant : () -> tensor<512xf32>
    %24 = crt.constant : () -> tensor<2048xf32>
    %25 = crt.constant : () -> tensor<512xf32>
    %26 = crt.constant : () -> tensor<512xf32>
    %27 = crt.constant : () -> tensor<512xf32>
    %28 = crt.constant : () -> tensor<512xf32>
    %29 = crt.constant : () -> tensor<512xf32>
    %30 = crt.constant : () -> tensor<512xf32>
    %31 = crt.constant : () -> tensor<512xf32>
    %32 = crt.constant : () -> tensor<2048xf32>
    %33 = crt.constant : () -> tensor<512xf32>
    %34 = crt.constant : () -> tensor<512xf32>
    %35 = crt.constant : () -> tensor<512xf32>
    %36 = crt.constant : () -> tensor<512xf32>
    %37 = crt.constant : () -> tensor<512xf32>
    %38 = crt.constant : () -> tensor<512xf32>
    %39 = crt.constant : () -> tensor<512xf32>
    %40 = crt.constant : () -> tensor<2048xf32>
    %41 = crt.constant : () -> tensor<512xf32>
    %42 = crt.constant : () -> tensor<512xf32>
    %43 = crt.constant : () -> tensor<512xf32>
    %44 = crt.constant : () -> tensor<512xf32>
    %45 = crt.constant : () -> tensor<512xf32>
    %46 = crt.constant : () -> tensor<512xf32>
    %47 = crt.constant : () -> tensor<512xf32>
    %48 = crt.constant : () -> tensor<2048xf32>
    %49 = crt.constant : () -> tensor<512xf32>
    %50 = crt.constant : () -> tensor<512xf32>
    %51 = crt.constant : () -> tensor<1xi64>
    %52 = crt.constant : () -> tensor<i64>
    %53 = crt.constant : () -> tensor<i64>
    %54 = crt.constant : () -> tensor<1xi64>
    %55 = crt.constant : () -> tensor<512x512xf32>
    %56 = crt.constant : () -> tensor<512x512xf32>
    %57 = crt.constant : () -> tensor<1xi64>
    %58 = crt.constant : () -> tensor<1xi64>
    %59 = crt.constant : () -> tensor<512x512xf32>
    %60 = crt.constant : () -> tensor<1xi64>
    %61 = crt.constant : () -> tensor<512x512xf32>
    %62 = crt.constant : () -> tensor<512x2048xf32>
    %63 = crt.constant : () -> tensor<2048x512xf32>
    %64 = crt.constant : () -> tensor<512x512xf32>
    %65 = crt.constant : () -> tensor<512x512xf32>
    %66 = crt.constant : () -> tensor<512x512xf32>
    %67 = crt.constant : () -> tensor<512x512xf32>
    %68 = crt.constant : () -> tensor<512x2048xf32>
    %69 = crt.constant : () -> tensor<2048x512xf32>
    %70 = crt.constant : () -> tensor<512x512xf32>
    %71 = crt.constant : () -> tensor<512x512xf32>
    %72 = crt.constant : () -> tensor<512x512xf32>
    %73 = crt.constant : () -> tensor<512x512xf32>
    %74 = crt.constant : () -> tensor<512x2048xf32>
    %75 = crt.constant : () -> tensor<2048x512xf32>
    %76 = crt.constant : () -> tensor<512x512xf32>
    %77 = crt.constant : () -> tensor<512x512xf32>
    %78 = crt.constant : () -> tensor<512x512xf32>
    %79 = crt.constant : () -> tensor<512x512xf32>
    %80 = crt.constant : () -> tensor<512x2048xf32>
    %81 = crt.constant : () -> tensor<2048x512xf32>
    %82 = crt.constant : () -> tensor<512x512xf32>
    %83 = crt.constant : () -> tensor<512x512xf32>
    %84 = crt.constant : () -> tensor<512x512xf32>
    %85 = crt.constant : () -> tensor<512x512xf32>
    %86 = crt.constant : () -> tensor<512x2048xf32>
    %87 = crt.constant : () -> tensor<2048x512xf32>
    %88 = crt.constant : () -> tensor<512x512xf32>
    %89 = crt.constant : () -> tensor<512x512xf32>
    %90 = crt.constant : () -> tensor<512x512xf32>
    %91 = crt.constant : () -> tensor<512x512xf32>
    %92 = crt.constant : () -> tensor<512x2048xf32>
    %93 = crt.constant : () -> tensor<2048x512xf32>
    %94 = crt.constant : () -> tensor<1xi64>
    %95 = crt.constant : () -> tensor<f32>
    %96 = crt.constant : () -> tensor<1xi64>
    %97 = crt.constant : () -> tensor<f32>
    %98 = crt.constant : () -> tensor<f32>
    %99 = crt.constant : () -> tensor<f32>
    %100 = crt.constant : () -> tensor<i64>
    %101 = crt.constant : () -> tensor<f32>
    %102 = crt.constant : () -> tensor<f32>
    %103 = crt.constant : () -> tensor<4xi64>
    %104 = crt.constant : () -> tensor<4xi64>
    %105 = "onnx.Dim"(%arg0) {axis = 1 : si64} : (tensor<?x?xi64>) -> tensor<1xi64>
    %106 = crt.constant : () -> tensor<1xi64>
    %107 = "onnx.Squeeze"(%105, %106) : (tensor<1xi64>, tensor<1xi64>) -> tensor<i64>
    %108 = "onnx.Concat"(%51, %105) {axis = 0 : si64, onnx_node_name = "Concat_5"} : (tensor<1xi64>, tensor<1xi64>) -> tensor<2xi64>
    %109 = crt.reshape %arg0, %108 : (tensor<?x?xi64>, tensor<2xi64>) -> tensor<?x?xi64>
    %110 = "onnx.Gather"(%0, %109) {axis = 0 : si64, onnx_node_name = "Gather_7"} : (tensor<65001x512xf32>, tensor<?x?xi64>) -> tensor<?x?x512xf32>
    %111 = crt.mul %110, %95 : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %112 = "onnx.Add"(%107, %52) {onnx_node_name = "Add_11"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %113 = "onnx.Range"(%52, %112, %53) {onnx_node_name = "Range_13"} : (tensor<i64>, tensor<i64>, tensor<i64>) -> tensor<?xi64>
    %114 = "onnx.Gather"(%1, %113) {axis = 0 : si64, onnx_node_name = "Gather_14"} : (tensor<512x512xf32>, tensor<?xi64>) -> tensor<?x512xf32>
    %115 = crt.add %111, %114 : (tensor<?x?x512xf32>, tensor<?x512xf32>) -> tensor<?x?x512xf32>
    %116 = "onnx.Dim"(%arg1) {axis = 0 : si64} : (tensor<?x?xi64>) -> tensor<1xi64>
    %117 = "onnx.Dim"(%arg1) {axis = 1 : si64} : (tensor<?x?xi64>) -> tensor<1xi64>
    %118 = "onnx.Unsqueeze"(%arg1, %54) {onnx_node_name = "Unsqueeze_23"} : (tensor<?x?xi64>, tensor<1xi64>) -> tensor<?x1x?xi64>
    %119 = "onnx.Unsqueeze"(%118, %96) {onnx_node_name = "Unsqueeze_25"} : (tensor<?x1x?xi64>, tensor<1xi64>) -> tensor<?x1x1x?xi64>
    %120 = "onnx.Concat"(%116, %54, %117, %117) {axis = 0 : si64, onnx_node_name = "Concat_32"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %121 = crt.reshape %120, %51 : (tensor<4xi64>, tensor<1xi64>) -> tensor<4xi64>
    %122 = "onnx.Equal"(%121, %104) {onnx_node_name = "Equal_39"} : (tensor<4xi64>, tensor<4xi64>) -> tensor<4xi1>
    %123 = "onnx.Where"(%122, %103, %121) {onnx_node_name = "Where_40"} : (tensor<4xi1>, tensor<4xi64>, tensor<4xi64>) -> tensor<4xi64>
    %124 = "onnx.Expand"(%119, %123) {onnx_node_name = "Expand_41"} : (tensor<?x1x1x?xi64>, tensor<4xi64>) -> tensor<?x?x?x?xi64>
    %125 = "onnx.Cast"(%124) {onnx_node_name = "Cast_42", to = f32} : (tensor<?x?x?x?xi64>) -> tensor<?x?x?x?xf32>
    %126 = crt.sub %97, %125 : (tensor<f32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32>
    %127 = "onnx.Cast"(%126) {onnx_node_name = "Cast_45", to = i1} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xi1>
    %128 = "onnx.Where"(%127, %98, %126) {onnx_node_name = "Where_48"} : (tensor<?x?x?x?xi1>, tensor<f32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32>
    %129 = "onnx.Dim"(%115) {axis = 0 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %130 = crt.constant : () -> tensor<1xi64>
    %131 = "onnx.Squeeze"(%129, %130) : (tensor<1xi64>, tensor<1xi64>) -> tensor<i64>
    %132 = "onnx.Dim"(%115) {axis = 1 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %133 = "onnx.MatMul"(%115, %55) {onnx_node_name = "MatMul_55"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %134 = crt.add %133, %4 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %135 = crt.mul %134, %99 : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %136 = "onnx.MatMul"(%115, %56) {onnx_node_name = "MatMul_59"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %137 = crt.add %136, %2 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %138 = "onnx.Concat"(%129, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_63"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %139 = crt.reshape %137, %138 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %140 = "onnx.Transpose"(%139) {onnx_node_name = "Transpose_65", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %141 = "onnx.MatMul"(%115, %59) {onnx_node_name = "MatMul_66"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %142 = crt.add %141, %3 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %143 = "onnx.Concat"(%129, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_70"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %144 = crt.reshape %142, %143 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %145 = "onnx.Transpose"(%144) {onnx_node_name = "Transpose_72", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %146 = "onnx.Mul"(%131, %100) {onnx_node_name = "Mul_74"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %147 = "onnx.Concat"(%129, %132, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_79"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %148 = crt.reshape %135, %147 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %149 = "onnx.Transpose"(%148) {onnx_node_name = "Transpose_81", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %150 = "onnx.Unsqueeze"(%146, %94) {onnx_node_name = "Unsqueeze_83"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %151 = "onnx.Concat"(%150, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_84"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %152 = crt.reshape %149, %151 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %153 = "onnx.Unsqueeze"(%146, %94) {onnx_node_name = "Unsqueeze_87"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %154 = "onnx.Concat"(%153, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_88"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %155 = crt.reshape %140, %154 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %156 = "onnx.Unsqueeze"(%146, %94) {onnx_node_name = "Unsqueeze_91"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %157 = "onnx.Concat"(%156, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_92"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %158 = crt.reshape %145, %157 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %159 = "onnx.Dim"(%155) {axis = 1 : si64} : (tensor<?x?x?xf32>) -> tensor<1xi64>
    %160 = "onnx.Transpose"(%155) {onnx_node_name = "Transpose_97", perm = [0, 2, 1]} : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %161 = "onnx.MatMul"(%152, %160) {onnx_node_name = "MatMul_98"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %162 = "onnx.Concat"(%129, %57, %132, %159) {axis = 0 : si64, onnx_node_name = "Concat_105"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %163 = crt.reshape %161, %162 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x?xf32>
    %164 = crt.add %163, %128 : (tensor<?x8x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x8x?x?xf32>
    %165 = "onnx.Mul"(%131, %100) {onnx_node_name = "Mul_109"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %166 = "onnx.Unsqueeze"(%165, %94) {onnx_node_name = "Unsqueeze_111"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %167 = "onnx.Concat"(%166, %132, %159) {axis = 0 : si64, onnx_node_name = "Concat_116"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %168 = crt.reshape %164, %167 : (tensor<?x8x?x?xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %169 = crt.softmax %168 : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %170 = "onnx.MatMul"(%169, %158) {onnx_node_name = "MatMul_119"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %171 = "onnx.Concat"(%129, %57, %132, %58) {axis = 0 : si64, onnx_node_name = "Concat_124"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %172 = crt.reshape %170, %171 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x64xf32>
    %173 = "onnx.Transpose"(%172) {onnx_node_name = "Transpose_126", perm = [0, 2, 1, 3]} : (tensor<?x8x?x64xf32>) -> tensor<?x?x8x64xf32>
    %174 = "onnx.Concat"(%129, %132, %60) {axis = 0 : si64, onnx_node_name = "Concat_131"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %175 = crt.reshape %173, %174 : (tensor<?x?x8x64xf32>, tensor<3xi64>) -> tensor<?x?x512xf32>
    %176 = "onnx.MatMul"(%175, %61) {onnx_node_name = "MatMul_133"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %177 = crt.add %115, %176 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %178 = crt.add %177, %5 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %179 = crt.reducemean %178 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %180 = crt.sub %178, %179 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %181 = "onnx.Pow"(%180, %101) {onnx_node_name = "Pow_139"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %182 = crt.reducemean %181 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %183 = crt.add %182, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %184 = "onnx.Sqrt"(%183) {onnx_node_name = "Sqrt_143"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %185 = crt.div %180, %184 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %186 = crt.mul %185, %6 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %187 = crt.add %186, %7 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %188 = "onnx.MatMul"(%187, %62) {onnx_node_name = "MatMul_147"} : (tensor<?x?x512xf32>, tensor<512x2048xf32>) -> tensor<?x?x2048xf32>
    %189 = crt.add %188, %8 : (tensor<?x?x2048xf32>, tensor<2048xf32>) -> tensor<?x?x2048xf32>
    %190 = "onnx.Sigmoid"(%189) {onnx_node_name = "Sigmoid_149"} : (tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %191 = crt.mul %189, %190 : (tensor<?x?x2048xf32>, tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %192 = "onnx.MatMul"(%191, %63) {onnx_node_name = "MatMul_151"} : (tensor<?x?x2048xf32>, tensor<2048x512xf32>) -> tensor<?x?x512xf32>
    %193 = crt.add %186, %192 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %194 = crt.constant : () -> tensor<512xf32>
    %195 = crt.add %193, %194 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %196 = crt.reducemean %195 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %197 = crt.sub %195, %196 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %198 = "onnx.Pow"(%197, %101) {onnx_node_name = "Pow_157"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %199 = crt.reducemean %198 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %200 = crt.add %199, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %201 = "onnx.Sqrt"(%200) {onnx_node_name = "Sqrt_161"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %202 = crt.div %197, %201 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %203 = crt.mul %202, %9 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %204 = crt.add %203, %10 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %205 = "onnx.Dim"(%204) {axis = 0 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %206 = crt.constant : () -> tensor<1xi64>
    %207 = "onnx.Squeeze"(%205, %206) : (tensor<1xi64>, tensor<1xi64>) -> tensor<i64>
    %208 = "onnx.Dim"(%204) {axis = 1 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %209 = "onnx.MatMul"(%204, %64) {onnx_node_name = "MatMul_171"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %210 = crt.add %209, %13 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %211 = crt.mul %210, %99 : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %212 = "onnx.MatMul"(%204, %65) {onnx_node_name = "MatMul_175"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %213 = crt.add %212, %11 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %214 = "onnx.Concat"(%205, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_179"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %215 = crt.reshape %213, %214 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %216 = "onnx.Transpose"(%215) {onnx_node_name = "Transpose_181", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %217 = "onnx.MatMul"(%204, %66) {onnx_node_name = "MatMul_182"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %218 = crt.add %217, %12 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %219 = "onnx.Concat"(%205, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_186"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %220 = crt.reshape %218, %219 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %221 = "onnx.Transpose"(%220) {onnx_node_name = "Transpose_188", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %222 = "onnx.Mul"(%207, %100) {onnx_node_name = "Mul_190"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %223 = "onnx.Concat"(%205, %208, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_195"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %224 = crt.reshape %211, %223 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %225 = "onnx.Transpose"(%224) {onnx_node_name = "Transpose_197", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %226 = "onnx.Unsqueeze"(%222, %94) {onnx_node_name = "Unsqueeze_199"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %227 = "onnx.Concat"(%226, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_200"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %228 = crt.reshape %225, %227 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %229 = "onnx.Unsqueeze"(%222, %94) {onnx_node_name = "Unsqueeze_203"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %230 = "onnx.Concat"(%229, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_204"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %231 = crt.reshape %216, %230 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %232 = "onnx.Unsqueeze"(%222, %94) {onnx_node_name = "Unsqueeze_207"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %233 = "onnx.Concat"(%232, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_208"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %234 = crt.reshape %221, %233 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %235 = "onnx.Dim"(%231) {axis = 1 : si64} : (tensor<?x?x?xf32>) -> tensor<1xi64>
    %236 = "onnx.Transpose"(%231) {onnx_node_name = "Transpose_213", perm = [0, 2, 1]} : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %237 = "onnx.MatMul"(%228, %236) {onnx_node_name = "MatMul_214"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %238 = "onnx.Concat"(%205, %57, %208, %235) {axis = 0 : si64, onnx_node_name = "Concat_221"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %239 = crt.reshape %237, %238 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x?xf32>
    %240 = crt.add %239, %128 : (tensor<?x8x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x8x?x?xf32>
    %241 = "onnx.Mul"(%207, %100) {onnx_node_name = "Mul_225"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %242 = "onnx.Unsqueeze"(%241, %94) {onnx_node_name = "Unsqueeze_227"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %243 = "onnx.Concat"(%242, %208, %235) {axis = 0 : si64, onnx_node_name = "Concat_232"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %244 = crt.reshape %240, %243 : (tensor<?x8x?x?xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %245 = crt.softmax %244 : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %246 = "onnx.MatMul"(%245, %234) {onnx_node_name = "MatMul_235"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %247 = "onnx.Concat"(%205, %57, %208, %58) {axis = 0 : si64, onnx_node_name = "Concat_240"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %248 = crt.reshape %246, %247 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x64xf32>
    %249 = "onnx.Transpose"(%248) {onnx_node_name = "Transpose_242", perm = [0, 2, 1, 3]} : (tensor<?x8x?x64xf32>) -> tensor<?x?x8x64xf32>
    %250 = "onnx.Concat"(%205, %208, %60) {axis = 0 : si64, onnx_node_name = "Concat_247"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %251 = crt.reshape %249, %250 : (tensor<?x?x8x64xf32>, tensor<3xi64>) -> tensor<?x?x512xf32>
    %252 = "onnx.MatMul"(%251, %67) {onnx_node_name = "MatMul_249"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %253 = crt.add %203, %252 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %254 = crt.constant : () -> tensor<512xf32>
    %255 = crt.add %253, %254 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %256 = crt.reducemean %255 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %257 = crt.sub %255, %256 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %258 = "onnx.Pow"(%257, %101) {onnx_node_name = "Pow_255"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %259 = crt.reducemean %258 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %260 = crt.add %259, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %261 = "onnx.Sqrt"(%260) {onnx_node_name = "Sqrt_259"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %262 = crt.div %257, %261 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %263 = crt.mul %262, %14 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %264 = crt.add %263, %15 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %265 = "onnx.MatMul"(%264, %68) {onnx_node_name = "MatMul_263"} : (tensor<?x?x512xf32>, tensor<512x2048xf32>) -> tensor<?x?x2048xf32>
    %266 = crt.add %265, %16 : (tensor<?x?x2048xf32>, tensor<2048xf32>) -> tensor<?x?x2048xf32>
    %267 = "onnx.Sigmoid"(%266) {onnx_node_name = "Sigmoid_265"} : (tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %268 = crt.mul %266, %267 : (tensor<?x?x2048xf32>, tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %269 = "onnx.MatMul"(%268, %69) {onnx_node_name = "MatMul_267"} : (tensor<?x?x2048xf32>, tensor<2048x512xf32>) -> tensor<?x?x512xf32>
    %270 = crt.add %263, %269 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %271 = crt.constant : () -> tensor<512xf32>
    %272 = crt.add %270, %271 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %273 = crt.reducemean %272 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %274 = crt.sub %272, %273 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %275 = "onnx.Pow"(%274, %101) {onnx_node_name = "Pow_273"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %276 = crt.reducemean %275 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %277 = crt.add %276, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %278 = "onnx.Sqrt"(%277) {onnx_node_name = "Sqrt_277"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %279 = crt.div %274, %278 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %280 = crt.mul %279, %17 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %281 = crt.add %280, %18 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %282 = "onnx.Dim"(%281) {axis = 0 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %283 = crt.constant : () -> tensor<1xi64>
    %284 = "onnx.Squeeze"(%282, %283) : (tensor<1xi64>, tensor<1xi64>) -> tensor<i64>
    %285 = "onnx.Dim"(%281) {axis = 1 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %286 = "onnx.MatMul"(%281, %70) {onnx_node_name = "MatMul_287"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %287 = crt.add %286, %21 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %288 = crt.mul %287, %99 : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %289 = "onnx.MatMul"(%281, %71) {onnx_node_name = "MatMul_291"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %290 = crt.add %289, %19 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %291 = "onnx.Concat"(%282, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_295"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %292 = crt.reshape %290, %291 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %293 = "onnx.Transpose"(%292) {onnx_node_name = "Transpose_297", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %294 = "onnx.MatMul"(%281, %72) {onnx_node_name = "MatMul_298"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %295 = crt.add %294, %20 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %296 = "onnx.Concat"(%282, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_302"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %297 = crt.reshape %295, %296 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %298 = "onnx.Transpose"(%297) {onnx_node_name = "Transpose_304", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %299 = "onnx.Mul"(%284, %100) {onnx_node_name = "Mul_306"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %300 = "onnx.Concat"(%282, %285, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_311"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %301 = crt.reshape %288, %300 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %302 = "onnx.Transpose"(%301) {onnx_node_name = "Transpose_313", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %303 = "onnx.Unsqueeze"(%299, %94) {onnx_node_name = "Unsqueeze_315"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %304 = "onnx.Concat"(%303, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_316"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %305 = crt.reshape %302, %304 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %306 = "onnx.Unsqueeze"(%299, %94) {onnx_node_name = "Unsqueeze_319"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %307 = "onnx.Concat"(%306, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_320"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %308 = crt.reshape %293, %307 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %309 = "onnx.Unsqueeze"(%299, %94) {onnx_node_name = "Unsqueeze_323"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %310 = "onnx.Concat"(%309, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_324"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %311 = crt.reshape %298, %310 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %312 = "onnx.Dim"(%308) {axis = 1 : si64} : (tensor<?x?x?xf32>) -> tensor<1xi64>
    %313 = "onnx.Transpose"(%308) {onnx_node_name = "Transpose_329", perm = [0, 2, 1]} : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %314 = "onnx.MatMul"(%305, %313) {onnx_node_name = "MatMul_330"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %315 = "onnx.Concat"(%282, %57, %285, %312) {axis = 0 : si64, onnx_node_name = "Concat_337"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %316 = crt.reshape %314, %315 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x?xf32>
    %317 = crt.add %316, %128 : (tensor<?x8x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x8x?x?xf32>
    %318 = "onnx.Mul"(%284, %100) {onnx_node_name = "Mul_341"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %319 = "onnx.Unsqueeze"(%318, %94) {onnx_node_name = "Unsqueeze_343"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %320 = "onnx.Concat"(%319, %285, %312) {axis = 0 : si64, onnx_node_name = "Concat_348"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %321 = crt.reshape %317, %320 : (tensor<?x8x?x?xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %322 = crt.softmax %321 : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %323 = "onnx.MatMul"(%322, %311) {onnx_node_name = "MatMul_351"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %324 = "onnx.Concat"(%282, %57, %285, %58) {axis = 0 : si64, onnx_node_name = "Concat_356"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %325 = crt.reshape %323, %324 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x64xf32>
    %326 = "onnx.Transpose"(%325) {onnx_node_name = "Transpose_358", perm = [0, 2, 1, 3]} : (tensor<?x8x?x64xf32>) -> tensor<?x?x8x64xf32>
    %327 = "onnx.Concat"(%282, %285, %60) {axis = 0 : si64, onnx_node_name = "Concat_363"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %328 = crt.reshape %326, %327 : (tensor<?x?x8x64xf32>, tensor<3xi64>) -> tensor<?x?x512xf32>
    %329 = "onnx.MatMul"(%328, %73) {onnx_node_name = "MatMul_365"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %330 = crt.add %280, %329 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %331 = crt.constant : () -> tensor<512xf32>
    %332 = crt.add %330, %331 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %333 = crt.reducemean %332 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %334 = crt.sub %332, %333 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %335 = "onnx.Pow"(%334, %101) {onnx_node_name = "Pow_371"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %336 = crt.reducemean %335 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %337 = crt.add %336, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %338 = "onnx.Sqrt"(%337) {onnx_node_name = "Sqrt_375"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %339 = crt.div %334, %338 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %340 = crt.mul %339, %22 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %341 = crt.add %340, %23 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %342 = "onnx.MatMul"(%341, %74) {onnx_node_name = "MatMul_379"} : (tensor<?x?x512xf32>, tensor<512x2048xf32>) -> tensor<?x?x2048xf32>
    %343 = crt.add %342, %24 : (tensor<?x?x2048xf32>, tensor<2048xf32>) -> tensor<?x?x2048xf32>
    %344 = "onnx.Sigmoid"(%343) {onnx_node_name = "Sigmoid_381"} : (tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %345 = crt.mul %343, %344 : (tensor<?x?x2048xf32>, tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %346 = "onnx.MatMul"(%345, %75) {onnx_node_name = "MatMul_383"} : (tensor<?x?x2048xf32>, tensor<2048x512xf32>) -> tensor<?x?x512xf32>
    %347 = crt.add %340, %346 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %348 = crt.constant : () -> tensor<512xf32>
    %349 = crt.add %347, %348 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %350 = crt.reducemean %349 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %351 = crt.sub %349, %350 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %352 = "onnx.Pow"(%351, %101) {onnx_node_name = "Pow_389"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %353 = crt.reducemean %352 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %354 = crt.add %353, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %355 = "onnx.Sqrt"(%354) {onnx_node_name = "Sqrt_393"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %356 = crt.div %351, %355 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %357 = crt.mul %356, %25 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %358 = crt.add %357, %26 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %359 = "onnx.Dim"(%358) {axis = 0 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %360 = crt.constant : () -> tensor<1xi64>
    %361 = "onnx.Squeeze"(%359, %360) : (tensor<1xi64>, tensor<1xi64>) -> tensor<i64>
    %362 = "onnx.Dim"(%358) {axis = 1 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %363 = "onnx.MatMul"(%358, %76) {onnx_node_name = "MatMul_403"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %364 = crt.add %363, %29 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %365 = crt.mul %364, %99 : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %366 = "onnx.MatMul"(%358, %77) {onnx_node_name = "MatMul_407"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %367 = crt.add %366, %27 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %368 = "onnx.Concat"(%359, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_411"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %369 = crt.reshape %367, %368 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %370 = "onnx.Transpose"(%369) {onnx_node_name = "Transpose_413", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %371 = "onnx.MatMul"(%358, %78) {onnx_node_name = "MatMul_414"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %372 = crt.add %371, %28 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %373 = "onnx.Concat"(%359, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_418"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %374 = crt.reshape %372, %373 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %375 = "onnx.Transpose"(%374) {onnx_node_name = "Transpose_420", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %376 = "onnx.Mul"(%361, %100) {onnx_node_name = "Mul_422"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %377 = "onnx.Concat"(%359, %362, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_427"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %378 = crt.reshape %365, %377 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %379 = "onnx.Transpose"(%378) {onnx_node_name = "Transpose_429", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %380 = "onnx.Unsqueeze"(%376, %94) {onnx_node_name = "Unsqueeze_431"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %381 = "onnx.Concat"(%380, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_432"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %382 = crt.reshape %379, %381 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %383 = "onnx.Unsqueeze"(%376, %94) {onnx_node_name = "Unsqueeze_435"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %384 = "onnx.Concat"(%383, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_436"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %385 = crt.reshape %370, %384 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %386 = "onnx.Unsqueeze"(%376, %94) {onnx_node_name = "Unsqueeze_439"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %387 = "onnx.Concat"(%386, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_440"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %388 = crt.reshape %375, %387 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %389 = "onnx.Dim"(%385) {axis = 1 : si64} : (tensor<?x?x?xf32>) -> tensor<1xi64>
    %390 = "onnx.Transpose"(%385) {onnx_node_name = "Transpose_445", perm = [0, 2, 1]} : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %391 = "onnx.MatMul"(%382, %390) {onnx_node_name = "MatMul_446"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %392 = "onnx.Concat"(%359, %57, %362, %389) {axis = 0 : si64, onnx_node_name = "Concat_453"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %393 = crt.reshape %391, %392 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x?xf32>
    %394 = crt.add %393, %128 : (tensor<?x8x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x8x?x?xf32>
    %395 = "onnx.Mul"(%361, %100) {onnx_node_name = "Mul_457"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %396 = "onnx.Unsqueeze"(%395, %94) {onnx_node_name = "Unsqueeze_459"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %397 = "onnx.Concat"(%396, %362, %389) {axis = 0 : si64, onnx_node_name = "Concat_464"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %398 = crt.reshape %394, %397 : (tensor<?x8x?x?xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %399 = crt.softmax %398 : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %400 = "onnx.MatMul"(%399, %388) {onnx_node_name = "MatMul_467"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %401 = "onnx.Concat"(%359, %57, %362, %58) {axis = 0 : si64, onnx_node_name = "Concat_472"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %402 = crt.reshape %400, %401 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x64xf32>
    %403 = "onnx.Transpose"(%402) {onnx_node_name = "Transpose_474", perm = [0, 2, 1, 3]} : (tensor<?x8x?x64xf32>) -> tensor<?x?x8x64xf32>
    %404 = "onnx.Concat"(%359, %362, %60) {axis = 0 : si64, onnx_node_name = "Concat_479"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %405 = crt.reshape %403, %404 : (tensor<?x?x8x64xf32>, tensor<3xi64>) -> tensor<?x?x512xf32>
    %406 = "onnx.MatMul"(%405, %79) {onnx_node_name = "MatMul_481"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %407 = crt.add %357, %406 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %408 = crt.constant : () -> tensor<512xf32>
    %409 = crt.add %407, %408 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %410 = crt.reducemean %409 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %411 = crt.sub %409, %410 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %412 = "onnx.Pow"(%411, %101) {onnx_node_name = "Pow_487"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %413 = crt.reducemean %412 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %414 = crt.add %413, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %415 = "onnx.Sqrt"(%414) {onnx_node_name = "Sqrt_491"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %416 = crt.div %411, %415 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %417 = crt.mul %416, %30 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %418 = crt.add %417, %31 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %419 = "onnx.MatMul"(%418, %80) {onnx_node_name = "MatMul_495"} : (tensor<?x?x512xf32>, tensor<512x2048xf32>) -> tensor<?x?x2048xf32>
    %420 = crt.add %419, %32 : (tensor<?x?x2048xf32>, tensor<2048xf32>) -> tensor<?x?x2048xf32>
    %421 = "onnx.Sigmoid"(%420) {onnx_node_name = "Sigmoid_497"} : (tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %422 = crt.mul %420, %421 : (tensor<?x?x2048xf32>, tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %423 = "onnx.MatMul"(%422, %81) {onnx_node_name = "MatMul_499"} : (tensor<?x?x2048xf32>, tensor<2048x512xf32>) -> tensor<?x?x512xf32>
    %424 = crt.add %417, %423 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %425 = crt.constant : () -> tensor<512xf32>
    %426 = crt.add %424, %425 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %427 = crt.reducemean %426 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %428 = crt.sub %426, %427 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %429 = "onnx.Pow"(%428, %101) {onnx_node_name = "Pow_505"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %430 = crt.reducemean %429 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %431 = crt.add %430, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %432 = "onnx.Sqrt"(%431) {onnx_node_name = "Sqrt_509"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %433 = crt.div %428, %432 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %434 = crt.mul %433, %33 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %435 = crt.add %434, %34 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %436 = "onnx.Dim"(%435) {axis = 0 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %437 = crt.constant : () -> tensor<1xi64>
    %438 = "onnx.Squeeze"(%436, %437) : (tensor<1xi64>, tensor<1xi64>) -> tensor<i64>
    %439 = "onnx.Dim"(%435) {axis = 1 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %440 = "onnx.MatMul"(%435, %82) {onnx_node_name = "MatMul_519"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %441 = crt.add %440, %37 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %442 = crt.mul %441, %99 : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %443 = "onnx.MatMul"(%435, %83) {onnx_node_name = "MatMul_523"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %444 = crt.add %443, %35 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %445 = "onnx.Concat"(%436, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_527"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %446 = crt.reshape %444, %445 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %447 = "onnx.Transpose"(%446) {onnx_node_name = "Transpose_529", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %448 = "onnx.MatMul"(%435, %84) {onnx_node_name = "MatMul_530"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %449 = crt.add %448, %36 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %450 = "onnx.Concat"(%436, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_534"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %451 = crt.reshape %449, %450 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %452 = "onnx.Transpose"(%451) {onnx_node_name = "Transpose_536", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %453 = "onnx.Mul"(%438, %100) {onnx_node_name = "Mul_538"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %454 = "onnx.Concat"(%436, %439, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_543"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %455 = crt.reshape %442, %454 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %456 = "onnx.Transpose"(%455) {onnx_node_name = "Transpose_545", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %457 = "onnx.Unsqueeze"(%453, %94) {onnx_node_name = "Unsqueeze_547"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %458 = "onnx.Concat"(%457, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_548"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %459 = crt.reshape %456, %458 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %460 = "onnx.Unsqueeze"(%453, %94) {onnx_node_name = "Unsqueeze_551"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %461 = "onnx.Concat"(%460, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_552"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %462 = crt.reshape %447, %461 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %463 = "onnx.Unsqueeze"(%453, %94) {onnx_node_name = "Unsqueeze_555"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %464 = "onnx.Concat"(%463, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_556"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %465 = crt.reshape %452, %464 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %466 = "onnx.Dim"(%462) {axis = 1 : si64} : (tensor<?x?x?xf32>) -> tensor<1xi64>
    %467 = "onnx.Transpose"(%462) {onnx_node_name = "Transpose_561", perm = [0, 2, 1]} : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %468 = "onnx.MatMul"(%459, %467) {onnx_node_name = "MatMul_562"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %469 = "onnx.Concat"(%436, %57, %439, %466) {axis = 0 : si64, onnx_node_name = "Concat_569"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %470 = crt.reshape %468, %469 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x?xf32>
    %471 = crt.add %470, %128 : (tensor<?x8x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x8x?x?xf32>
    %472 = "onnx.Mul"(%438, %100) {onnx_node_name = "Mul_573"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %473 = "onnx.Unsqueeze"(%472, %94) {onnx_node_name = "Unsqueeze_575"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %474 = "onnx.Concat"(%473, %439, %466) {axis = 0 : si64, onnx_node_name = "Concat_580"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %475 = crt.reshape %471, %474 : (tensor<?x8x?x?xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %476 = crt.softmax %475 : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %477 = "onnx.MatMul"(%476, %465) {onnx_node_name = "MatMul_583"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %478 = "onnx.Concat"(%436, %57, %439, %58) {axis = 0 : si64, onnx_node_name = "Concat_588"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %479 = crt.reshape %477, %478 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x64xf32>
    %480 = "onnx.Transpose"(%479) {onnx_node_name = "Transpose_590", perm = [0, 2, 1, 3]} : (tensor<?x8x?x64xf32>) -> tensor<?x?x8x64xf32>
    %481 = "onnx.Concat"(%436, %439, %60) {axis = 0 : si64, onnx_node_name = "Concat_595"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %482 = crt.reshape %480, %481 : (tensor<?x?x8x64xf32>, tensor<3xi64>) -> tensor<?x?x512xf32>
    %483 = "onnx.MatMul"(%482, %85) {onnx_node_name = "MatMul_597"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %484 = crt.add %434, %483 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %485 = crt.constant : () -> tensor<512xf32>
    %486 = crt.add %484, %485 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %487 = crt.reducemean %486 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %488 = crt.sub %486, %487 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %489 = "onnx.Pow"(%488, %101) {onnx_node_name = "Pow_603"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %490 = crt.reducemean %489 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %491 = crt.add %490, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %492 = "onnx.Sqrt"(%491) {onnx_node_name = "Sqrt_607"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %493 = crt.div %488, %492 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %494 = crt.mul %493, %38 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %495 = crt.add %494, %39 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %496 = "onnx.MatMul"(%495, %86) {onnx_node_name = "MatMul_611"} : (tensor<?x?x512xf32>, tensor<512x2048xf32>) -> tensor<?x?x2048xf32>
    %497 = crt.add %496, %40 : (tensor<?x?x2048xf32>, tensor<2048xf32>) -> tensor<?x?x2048xf32>
    %498 = "onnx.Sigmoid"(%497) {onnx_node_name = "Sigmoid_613"} : (tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %499 = crt.mul %497, %498 : (tensor<?x?x2048xf32>, tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %500 = "onnx.MatMul"(%499, %87) {onnx_node_name = "MatMul_615"} : (tensor<?x?x2048xf32>, tensor<2048x512xf32>) -> tensor<?x?x512xf32>
    %501 = crt.add %494, %500 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %502 = crt.constant : () -> tensor<512xf32>
    %503 = crt.add %501, %502 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %504 = crt.reducemean %503 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %505 = crt.sub %503, %504 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %506 = "onnx.Pow"(%505, %101) {onnx_node_name = "Pow_621"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %507 = crt.reducemean %506 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %508 = crt.add %507, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %509 = "onnx.Sqrt"(%508) {onnx_node_name = "Sqrt_625"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %510 = crt.div %505, %509 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %511 = crt.mul %510, %41 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %512 = crt.add %511, %42 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %513 = "onnx.Dim"(%512) {axis = 0 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %514 = crt.constant : () -> tensor<1xi64>
    %515 = "onnx.Squeeze"(%513, %514) : (tensor<1xi64>, tensor<1xi64>) -> tensor<i64>
    %516 = "onnx.Dim"(%512) {axis = 1 : si64} : (tensor<?x?x512xf32>) -> tensor<1xi64>
    %517 = "onnx.MatMul"(%512, %88) {onnx_node_name = "MatMul_635"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %518 = crt.add %517, %45 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %519 = crt.mul %518, %99 : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %520 = "onnx.MatMul"(%512, %89) {onnx_node_name = "MatMul_639"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %521 = crt.add %520, %43 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %522 = "onnx.Concat"(%513, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_643"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %523 = crt.reshape %521, %522 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %524 = "onnx.Transpose"(%523) {onnx_node_name = "Transpose_645", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %525 = "onnx.MatMul"(%512, %90) {onnx_node_name = "MatMul_646"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %526 = crt.add %525, %44 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %527 = "onnx.Concat"(%513, %51, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_650"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %528 = crt.reshape %526, %527 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %529 = "onnx.Transpose"(%528) {onnx_node_name = "Transpose_652", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %530 = "onnx.Mul"(%515, %100) {onnx_node_name = "Mul_654"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %531 = "onnx.Concat"(%513, %516, %57, %58) {axis = 0 : si64, onnx_node_name = "Concat_659"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %532 = crt.reshape %519, %531 : (tensor<?x?x512xf32>, tensor<4xi64>) -> tensor<?x?x8x64xf32>
    %533 = "onnx.Transpose"(%532) {onnx_node_name = "Transpose_661", perm = [0, 2, 1, 3]} : (tensor<?x?x8x64xf32>) -> tensor<?x8x?x64xf32>
    %534 = "onnx.Unsqueeze"(%530, %94) {onnx_node_name = "Unsqueeze_663"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %535 = "onnx.Concat"(%534, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_664"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %536 = crt.reshape %533, %535 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %537 = "onnx.Unsqueeze"(%530, %94) {onnx_node_name = "Unsqueeze_667"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %538 = "onnx.Concat"(%537, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_668"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %539 = crt.reshape %524, %538 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %540 = "onnx.Unsqueeze"(%530, %94) {onnx_node_name = "Unsqueeze_671"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %541 = "onnx.Concat"(%540, %51, %58) {axis = 0 : si64, onnx_node_name = "Concat_672"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %542 = crt.reshape %529, %541 : (tensor<?x8x?x64xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %543 = "onnx.Dim"(%539) {axis = 1 : si64} : (tensor<?x?x?xf32>) -> tensor<1xi64>
    %544 = "onnx.Transpose"(%539) {onnx_node_name = "Transpose_677", perm = [0, 2, 1]} : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %545 = "onnx.MatMul"(%536, %544) {onnx_node_name = "MatMul_678"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %546 = "onnx.Concat"(%513, %57, %516, %543) {axis = 0 : si64, onnx_node_name = "Concat_685"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %547 = crt.reshape %545, %546 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x?xf32>
    %548 = crt.add %547, %128 : (tensor<?x8x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x8x?x?xf32>
    %549 = "onnx.Mul"(%515, %100) {onnx_node_name = "Mul_689"} : (tensor<i64>, tensor<i64>) -> tensor<i64>
    %550 = "onnx.Unsqueeze"(%549, %94) {onnx_node_name = "Unsqueeze_691"} : (tensor<i64>, tensor<1xi64>) -> tensor<1xi64>
    %551 = "onnx.Concat"(%550, %516, %543) {axis = 0 : si64, onnx_node_name = "Concat_696"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %552 = crt.reshape %548, %551 : (tensor<?x8x?x?xf32>, tensor<3xi64>) -> tensor<?x?x?xf32>
    %553 = crt.softmax %552 : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %554 = "onnx.MatMul"(%553, %542) {onnx_node_name = "MatMul_699"} : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %555 = "onnx.Concat"(%513, %57, %516, %58) {axis = 0 : si64, onnx_node_name = "Concat_704"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<4xi64>
    %556 = crt.reshape %554, %555 : (tensor<?x?x?xf32>, tensor<4xi64>) -> tensor<?x8x?x64xf32>
    %557 = "onnx.Transpose"(%556) {onnx_node_name = "Transpose_706", perm = [0, 2, 1, 3]} : (tensor<?x8x?x64xf32>) -> tensor<?x?x8x64xf32>
    %558 = "onnx.Concat"(%513, %516, %60) {axis = 0 : si64, onnx_node_name = "Concat_711"} : (tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<3xi64>
    %559 = crt.reshape %557, %558 : (tensor<?x?x8x64xf32>, tensor<3xi64>) -> tensor<?x?x512xf32>
    %560 = "onnx.MatMul"(%559, %91) {onnx_node_name = "MatMul_713"} : (tensor<?x?x512xf32>, tensor<512x512xf32>) -> tensor<?x?x512xf32>
    %561 = crt.add %511, %560 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %562 = crt.constant : () -> tensor<512xf32>
    %563 = crt.add %561, %562 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %564 = crt.reducemean %563 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %565 = crt.sub %563, %564 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %566 = "onnx.Pow"(%565, %101) {onnx_node_name = "Pow_719"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %567 = crt.reducemean %566 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %568 = crt.add %567, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %569 = "onnx.Sqrt"(%568) {onnx_node_name = "Sqrt_723"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %570 = crt.div %565, %569 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %571 = crt.mul %570, %46 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %572 = crt.add %571, %47 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %573 = "onnx.MatMul"(%572, %92) {onnx_node_name = "MatMul_727"} : (tensor<?x?x512xf32>, tensor<512x2048xf32>) -> tensor<?x?x2048xf32>
    %574 = crt.add %573, %48 : (tensor<?x?x2048xf32>, tensor<2048xf32>) -> tensor<?x?x2048xf32>
    %575 = "onnx.Sigmoid"(%574) {onnx_node_name = "Sigmoid_729"} : (tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %576 = crt.mul %574, %575 : (tensor<?x?x2048xf32>, tensor<?x?x2048xf32>) -> tensor<?x?x2048xf32>
    %577 = "onnx.MatMul"(%576, %93) {onnx_node_name = "MatMul_731"} : (tensor<?x?x2048xf32>, tensor<2048x512xf32>) -> tensor<?x?x512xf32>
    %578 = crt.add %571, %577 : (tensor<?x?x512xf32>, tensor<?x?x512xf32>) -> tensor<?x?x512xf32>
    %579 = crt.constant : () -> tensor<512xf32>
    %580 = crt.add %578, %579 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %581 = crt.reducemean %580 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %582 = crt.sub %580, %581 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %583 = "onnx.Pow"(%582, %101) {onnx_node_name = "Pow_737"} : (tensor<?x?x512xf32>, tensor<f32>) -> tensor<?x?x512xf32>
    %584 = crt.reducemean %583 : (tensor<?x?x512xf32>) -> tensor<?x?x1xf32>
    %585 = crt.add %584, %102 : (tensor<?x?x1xf32>, tensor<f32>) -> tensor<?x?x1xf32>
    %586 = "onnx.Sqrt"(%585) {onnx_node_name = "Sqrt_741"} : (tensor<?x?x1xf32>) -> tensor<?x?x1xf32>
    %587 = crt.div %582, %586 : (tensor<?x?x512xf32>, tensor<?x?x1xf32>) -> tensor<?x?x512xf32>
    %588 = crt.mul %587, %49 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    %589 = crt.add %588, %50 : (tensor<?x?x512xf32>, tensor<512xf32>) -> tensor<?x?x512xf32>
    return %589 : tensor<?x?x512xf32>
  }
  "onnx.EntryPoint"() {func = @main_graph} : () -> ()
}

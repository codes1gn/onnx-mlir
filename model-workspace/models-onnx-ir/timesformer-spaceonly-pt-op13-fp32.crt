module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: tensor<1x1x3x8x224x224xf32>) -> tensor<1x400xf32> attributes {input_names = ["0"], output_names = ["1528"]} {
    %0 = crt.constant : () -> tensor<f32>
    %1 = crt.constant : () -> tensor<768x2304xf32>
    %2 = crt.constant : () -> tensor<768x768xf32>
    %3 = crt.constant : () -> tensor<f32>
    %4 = crt.constant : () -> tensor<768x3072xf32>
    %5 = crt.constant : () -> tensor<3072x768xf32>
    %6 = crt.constant : () -> tensor<f32>
    %7 = crt.constant : () -> tensor<768x2304xf32>
    %8 = crt.constant : () -> tensor<768x768xf32>
    %9 = crt.constant : () -> tensor<f32>
    %10 = crt.constant : () -> tensor<768x3072xf32>
    %11 = crt.constant : () -> tensor<3072x768xf32>
    %12 = crt.constant : () -> tensor<f32>
    %13 = crt.constant : () -> tensor<768x2304xf32>
    %14 = crt.constant : () -> tensor<768x768xf32>
    %15 = crt.constant : () -> tensor<f32>
    %16 = crt.constant : () -> tensor<768x3072xf32>
    %17 = crt.constant : () -> tensor<3072x768xf32>
    %18 = crt.constant : () -> tensor<f32>
    %19 = crt.constant : () -> tensor<768x2304xf32>
    %20 = crt.constant : () -> tensor<768x768xf32>
    %21 = crt.constant : () -> tensor<f32>
    %22 = crt.constant : () -> tensor<768x3072xf32>
    %23 = crt.constant : () -> tensor<3072x768xf32>
    %24 = crt.constant : () -> tensor<f32>
    %25 = crt.constant : () -> tensor<768x2304xf32>
    %26 = crt.constant : () -> tensor<768x768xf32>
    %27 = crt.constant : () -> tensor<f32>
    %28 = crt.constant : () -> tensor<768x3072xf32>
    %29 = crt.constant : () -> tensor<3072x768xf32>
    %30 = crt.constant : () -> tensor<f32>
    %31 = crt.constant : () -> tensor<768x2304xf32>
    %32 = crt.constant : () -> tensor<768x768xf32>
    %33 = crt.constant : () -> tensor<f32>
    %34 = crt.constant : () -> tensor<768x3072xf32>
    %35 = crt.constant : () -> tensor<3072x768xf32>
    %36 = crt.constant : () -> tensor<f32>
    %37 = crt.constant : () -> tensor<768x2304xf32>
    %38 = crt.constant : () -> tensor<768x768xf32>
    %39 = crt.constant : () -> tensor<f32>
    %40 = crt.constant : () -> tensor<768x3072xf32>
    %41 = crt.constant : () -> tensor<3072x768xf32>
    %42 = crt.constant : () -> tensor<f32>
    %43 = crt.constant : () -> tensor<768x2304xf32>
    %44 = crt.constant : () -> tensor<768x768xf32>
    %45 = crt.constant : () -> tensor<f32>
    %46 = crt.constant : () -> tensor<768x3072xf32>
    %47 = crt.constant : () -> tensor<3072x768xf32>
    %48 = crt.constant : () -> tensor<f32>
    %49 = crt.constant : () -> tensor<768x2304xf32>
    %50 = crt.constant : () -> tensor<768x768xf32>
    %51 = crt.constant : () -> tensor<f32>
    %52 = crt.constant : () -> tensor<768x3072xf32>
    %53 = crt.constant : () -> tensor<3072x768xf32>
    %54 = crt.constant : () -> tensor<f32>
    %55 = crt.constant : () -> tensor<768x2304xf32>
    %56 = crt.constant : () -> tensor<768x768xf32>
    %57 = crt.constant : () -> tensor<f32>
    %58 = crt.constant : () -> tensor<768x3072xf32>
    %59 = crt.constant : () -> tensor<3072x768xf32>
    %60 = crt.constant : () -> tensor<f32>
    %61 = crt.constant : () -> tensor<768x2304xf32>
    %62 = crt.constant : () -> tensor<768x768xf32>
    %63 = crt.constant : () -> tensor<f32>
    %64 = crt.constant : () -> tensor<768x3072xf32>
    %65 = crt.constant : () -> tensor<3072x768xf32>
    %66 = crt.constant : () -> tensor<f32>
    %67 = crt.constant : () -> tensor<768x2304xf32>
    %68 = crt.constant : () -> tensor<768x768xf32>
    %69 = crt.constant : () -> tensor<f32>
    %70 = crt.constant : () -> tensor<768x3072xf32>
    %71 = crt.constant : () -> tensor<3072x768xf32>
    %72 = crt.constant : () -> tensor<f32>
    %73 = crt.constant : () -> tensor<768xf32>
    %74 = crt.constant : () -> tensor<768xf32>
    %75 = crt.constant : () -> tensor<768xf32>
    %76 = crt.constant : () -> tensor<768x3x16x16xf32>
    %77 = crt.constant : () -> tensor<1x197x768xf32>
    %78 = crt.constant : () -> tensor<2304xf32>
    %79 = crt.constant : () -> tensor<768xf32>
    %80 = crt.constant : () -> tensor<3072xf32>
    %81 = crt.constant : () -> tensor<768xf32>
    %82 = crt.constant : () -> tensor<768xf32>
    %83 = crt.constant : () -> tensor<768xf32>
    %84 = crt.constant : () -> tensor<768xf32>
    %85 = crt.constant : () -> tensor<2304xf32>
    %86 = crt.constant : () -> tensor<768xf32>
    %87 = crt.constant : () -> tensor<3072xf32>
    %88 = crt.constant : () -> tensor<768xf32>
    %89 = crt.constant : () -> tensor<768xf32>
    %90 = crt.constant : () -> tensor<768xf32>
    %91 = crt.constant : () -> tensor<768xf32>
    %92 = crt.constant : () -> tensor<2304xf32>
    %93 = crt.constant : () -> tensor<768xf32>
    %94 = crt.constant : () -> tensor<3072xf32>
    %95 = crt.constant : () -> tensor<768xf32>
    %96 = crt.constant : () -> tensor<768xf32>
    %97 = crt.constant : () -> tensor<768xf32>
    %98 = crt.constant : () -> tensor<768xf32>
    %99 = crt.constant : () -> tensor<2304xf32>
    %100 = crt.constant : () -> tensor<768xf32>
    %101 = crt.constant : () -> tensor<3072xf32>
    %102 = crt.constant : () -> tensor<768xf32>
    %103 = crt.constant : () -> tensor<768xf32>
    %104 = crt.constant : () -> tensor<768xf32>
    %105 = crt.constant : () -> tensor<768xf32>
    %106 = crt.constant : () -> tensor<2304xf32>
    %107 = crt.constant : () -> tensor<768xf32>
    %108 = crt.constant : () -> tensor<3072xf32>
    %109 = crt.constant : () -> tensor<768xf32>
    %110 = crt.constant : () -> tensor<768xf32>
    %111 = crt.constant : () -> tensor<768xf32>
    %112 = crt.constant : () -> tensor<768xf32>
    %113 = crt.constant : () -> tensor<2304xf32>
    %114 = crt.constant : () -> tensor<768xf32>
    %115 = crt.constant : () -> tensor<3072xf32>
    %116 = crt.constant : () -> tensor<768xf32>
    %117 = crt.constant : () -> tensor<768xf32>
    %118 = crt.constant : () -> tensor<768xf32>
    %119 = crt.constant : () -> tensor<768xf32>
    %120 = crt.constant : () -> tensor<2304xf32>
    %121 = crt.constant : () -> tensor<768xf32>
    %122 = crt.constant : () -> tensor<3072xf32>
    %123 = crt.constant : () -> tensor<768xf32>
    %124 = crt.constant : () -> tensor<768xf32>
    %125 = crt.constant : () -> tensor<768xf32>
    %126 = crt.constant : () -> tensor<768xf32>
    %127 = crt.constant : () -> tensor<2304xf32>
    %128 = crt.constant : () -> tensor<768xf32>
    %129 = crt.constant : () -> tensor<3072xf32>
    %130 = crt.constant : () -> tensor<768xf32>
    %131 = crt.constant : () -> tensor<768xf32>
    %132 = crt.constant : () -> tensor<768xf32>
    %133 = crt.constant : () -> tensor<768xf32>
    %134 = crt.constant : () -> tensor<2304xf32>
    %135 = crt.constant : () -> tensor<768xf32>
    %136 = crt.constant : () -> tensor<3072xf32>
    %137 = crt.constant : () -> tensor<768xf32>
    %138 = crt.constant : () -> tensor<768xf32>
    %139 = crt.constant : () -> tensor<768xf32>
    %140 = crt.constant : () -> tensor<768xf32>
    %141 = crt.constant : () -> tensor<2304xf32>
    %142 = crt.constant : () -> tensor<768xf32>
    %143 = crt.constant : () -> tensor<3072xf32>
    %144 = crt.constant : () -> tensor<768xf32>
    %145 = crt.constant : () -> tensor<768xf32>
    %146 = crt.constant : () -> tensor<768xf32>
    %147 = crt.constant : () -> tensor<768xf32>
    %148 = crt.constant : () -> tensor<2304xf32>
    %149 = crt.constant : () -> tensor<768xf32>
    %150 = crt.constant : () -> tensor<3072xf32>
    %151 = crt.constant : () -> tensor<768xf32>
    %152 = crt.constant : () -> tensor<768xf32>
    %153 = crt.constant : () -> tensor<768xf32>
    %154 = crt.constant : () -> tensor<768xf32>
    %155 = crt.constant : () -> tensor<2304xf32>
    %156 = crt.constant : () -> tensor<768xf32>
    %157 = crt.constant : () -> tensor<3072xf32>
    %158 = crt.constant : () -> tensor<768xf32>
    %159 = crt.constant : () -> tensor<768xf32>
    %160 = crt.constant : () -> tensor<768xf32>
    %161 = crt.constant : () -> tensor<768xf32>
    %162 = crt.constant : () -> tensor<400xf32>
    %163 = crt.constant : () -> tensor<400x768xf32>
    %164 = crt.constant : () -> tensor<i64>
    %165 = crt.constant : () -> tensor<f32>
    %166 = crt.constant : () -> tensor<f32>
    %167 = crt.constant : () -> tensor<f32>
    %168 = crt.constant : () -> tensor<f32>
    %169 = crt.constant : () -> tensor<f32>
    %170 = crt.constant : () -> tensor<5xi64>
    %171 = crt.constant : () -> tensor<4xi64>
    %172 = crt.constant : () -> tensor<3xi64>
    %173 = crt.constant : () -> tensor<8x1x768xf32>
    %174 = crt.constant : () -> tensor<3xi64>
    %175 = crt.constant : () -> tensor<3xi64>
    %176 = crt.constant : () -> tensor<3xi64>
    %177 = crt.constant : () -> tensor<4xi64>
    %178 = crt.reshape %arg0, %170 : (tensor<1x1x3x8x224x224xf32>, tensor<5xi64>) -> tensor<1x3x8x224x224xf32>
    %179 = "onnx.Transpose"(%178) {onnx_node_name = "Transpose_69", perm = [0, 2, 1, 3, 4]} : (tensor<1x3x8x224x224xf32>) -> tensor<1x8x3x224x224xf32>
    %180 = crt.reshape %179, %171 : (tensor<1x8x3x224x224xf32>, tensor<4xi64>) -> tensor<8x3x224x224xf32>
    %181 = crt.convadd %180, %76, %75 : (tensor<8x3x224x224xf32>, tensor<768x3x16x16xf32>, tensor<768xf32>) -> tensor<8x768x14x14xf32>
    %182 = crt.reshape %181, %172 : (tensor<8x768x14x14xf32>, tensor<3xi64>) -> tensor<8x768x196xf32>
    %183 = "onnx.Transpose"(%182) {onnx_node_name = "Transpose_85", perm = [0, 2, 1]} : (tensor<8x768x196xf32>) -> tensor<8x196x768xf32>
    %184 = "onnx.Concat"(%173, %183) {axis = 1 : si64, onnx_node_name = "Concat_101"} : (tensor<8x1x768xf32>, tensor<8x196x768xf32>) -> tensor<8x197x768xf32>
    %185 = crt.add %184, %77 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %186 = crt.reducemean %185 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %187 = crt.sub %185, %186 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %188 = "onnx.Pow"(%187, %0) {onnx_node_name = "Pow_106"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %189 = crt.reducemean %188 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %190 = crt.add %189, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %191 = "onnx.Sqrt"(%190) {onnx_node_name = "Sqrt_110"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %192 = crt.div %187, %191 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %193 = crt.mul %192, %82 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %194 = crt.add %193, %81 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %195 = "onnx.Transpose"(%194) {onnx_node_name = "Transpose_114", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %196 = "onnx.MatMul"(%195, %1) {onnx_node_name = "MatMul_128"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %197 = crt.add %196, %78 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %198 = crt.constant : () -> tensor<3xi64>
    %199:3 = "onnx.Split"(%197, %198) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %200 = crt.mul %199#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %201 = crt.reshape %200, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %202 = "onnx.Transpose"(%201) {onnx_node_name = "Transpose_140", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %203 = crt.reshape %199#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %204 = crt.reshape %199#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %205 = "onnx.Transpose"(%204) {onnx_node_name = "Transpose_153", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %206 = "onnx.Transpose"(%203) {onnx_node_name = "Transpose_154", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %207 = "onnx.MatMul"(%202, %206) {onnx_node_name = "MatMul_155"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %208 = crt.softmax %207 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %209 = "onnx.MatMul"(%208, %205) {onnx_node_name = "MatMul_157"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %210 = "onnx.Transpose"(%209) {onnx_node_name = "Transpose_158", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %211 = crt.reshape %210, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %212 = "onnx.MatMul"(%211, %2) {onnx_node_name = "MatMul_164"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %213 = crt.add %212, %79 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %214 = "onnx.Transpose"(%213) {onnx_node_name = "Transpose_166", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %215 = crt.add %184, %214 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %216 = crt.add %215, %77 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %217 = crt.reducemean %216 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %218 = crt.sub %216, %217 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %219 = "onnx.Pow"(%218, %3) {onnx_node_name = "Pow_171"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %220 = crt.reducemean %219 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %221 = crt.add %220, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %222 = "onnx.Sqrt"(%221) {onnx_node_name = "Sqrt_175"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %223 = crt.div %218, %222 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %224 = crt.mul %223, %84 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %225 = crt.add %224, %83 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %226 = "onnx.MatMul"(%225, %4) {onnx_node_name = "MatMul_179"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %227 = crt.add %226, %80 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %228 = crt.div %227, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %229 = "onnx.Erf"(%228) {onnx_node_name = "Erf_183"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %230 = crt.add %229, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %231 = crt.mul %227, %230 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %232 = crt.mul %231, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %233 = "onnx.MatMul"(%232, %5) {onnx_node_name = "MatMul_189"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %234 = crt.add %215, %233 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %235 = crt.constant : () -> tensor<1x197x768xf32>
    %236 = crt.add %234, %235 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %237 = crt.reducemean %236 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %238 = crt.sub %236, %237 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %239 = "onnx.Pow"(%238, %6) {onnx_node_name = "Pow_195"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %240 = crt.reducemean %239 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %241 = crt.add %240, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %242 = "onnx.Sqrt"(%241) {onnx_node_name = "Sqrt_199"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %243 = crt.div %238, %242 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %244 = crt.mul %243, %89 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %245 = crt.add %244, %88 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %246 = "onnx.Transpose"(%245) {onnx_node_name = "Transpose_203", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %247 = "onnx.MatMul"(%246, %7) {onnx_node_name = "MatMul_217"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %248 = crt.add %247, %85 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %249 = crt.constant : () -> tensor<3xi64>
    %250:3 = "onnx.Split"(%248, %249) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %251 = crt.mul %250#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %252 = crt.reshape %251, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %253 = "onnx.Transpose"(%252) {onnx_node_name = "Transpose_229", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %254 = crt.reshape %250#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %255 = crt.reshape %250#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %256 = "onnx.Transpose"(%255) {onnx_node_name = "Transpose_242", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %257 = "onnx.Transpose"(%254) {onnx_node_name = "Transpose_243", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %258 = "onnx.MatMul"(%253, %257) {onnx_node_name = "MatMul_244"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %259 = crt.softmax %258 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %260 = "onnx.MatMul"(%259, %256) {onnx_node_name = "MatMul_246"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %261 = "onnx.Transpose"(%260) {onnx_node_name = "Transpose_247", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %262 = crt.reshape %261, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %263 = "onnx.MatMul"(%262, %8) {onnx_node_name = "MatMul_253"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %264 = crt.add %263, %86 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %265 = "onnx.Transpose"(%264) {onnx_node_name = "Transpose_255", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %266 = crt.add %234, %265 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %267 = crt.constant : () -> tensor<1x197x768xf32>
    %268 = crt.add %266, %267 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %269 = crt.reducemean %268 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %270 = crt.sub %268, %269 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %271 = "onnx.Pow"(%270, %9) {onnx_node_name = "Pow_260"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %272 = crt.reducemean %271 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %273 = crt.add %272, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %274 = "onnx.Sqrt"(%273) {onnx_node_name = "Sqrt_264"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %275 = crt.div %270, %274 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %276 = crt.mul %275, %91 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %277 = crt.add %276, %90 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %278 = "onnx.MatMul"(%277, %10) {onnx_node_name = "MatMul_268"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %279 = crt.add %278, %87 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %280 = crt.div %279, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %281 = "onnx.Erf"(%280) {onnx_node_name = "Erf_272"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %282 = crt.add %281, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %283 = crt.mul %279, %282 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %284 = crt.mul %283, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %285 = "onnx.MatMul"(%284, %11) {onnx_node_name = "MatMul_278"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %286 = crt.add %266, %285 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %287 = crt.constant : () -> tensor<1x197x768xf32>
    %288 = crt.add %286, %287 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %289 = crt.reducemean %288 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %290 = crt.sub %288, %289 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %291 = "onnx.Pow"(%290, %12) {onnx_node_name = "Pow_284"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %292 = crt.reducemean %291 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %293 = crt.add %292, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %294 = "onnx.Sqrt"(%293) {onnx_node_name = "Sqrt_288"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %295 = crt.div %290, %294 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %296 = crt.mul %295, %110 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %297 = crt.add %296, %109 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %298 = "onnx.Transpose"(%297) {onnx_node_name = "Transpose_292", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %299 = "onnx.MatMul"(%298, %13) {onnx_node_name = "MatMul_306"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %300 = crt.add %299, %106 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %301 = crt.constant : () -> tensor<3xi64>
    %302:3 = "onnx.Split"(%300, %301) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %303 = crt.mul %302#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %304 = crt.reshape %303, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %305 = "onnx.Transpose"(%304) {onnx_node_name = "Transpose_318", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %306 = crt.reshape %302#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %307 = crt.reshape %302#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %308 = "onnx.Transpose"(%307) {onnx_node_name = "Transpose_331", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %309 = "onnx.Transpose"(%306) {onnx_node_name = "Transpose_332", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %310 = "onnx.MatMul"(%305, %309) {onnx_node_name = "MatMul_333"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %311 = crt.softmax %310 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %312 = "onnx.MatMul"(%311, %308) {onnx_node_name = "MatMul_335"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %313 = "onnx.Transpose"(%312) {onnx_node_name = "Transpose_336", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %314 = crt.reshape %313, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %315 = "onnx.MatMul"(%314, %14) {onnx_node_name = "MatMul_342"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %316 = crt.add %315, %107 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %317 = "onnx.Transpose"(%316) {onnx_node_name = "Transpose_344", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %318 = crt.add %286, %317 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %319 = crt.constant : () -> tensor<1x197x768xf32>
    %320 = crt.add %318, %319 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %321 = crt.reducemean %320 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %322 = crt.sub %320, %321 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %323 = "onnx.Pow"(%322, %15) {onnx_node_name = "Pow_349"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %324 = crt.reducemean %323 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %325 = crt.add %324, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %326 = "onnx.Sqrt"(%325) {onnx_node_name = "Sqrt_353"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %327 = crt.div %322, %326 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %328 = crt.mul %327, %112 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %329 = crt.add %328, %111 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %330 = "onnx.MatMul"(%329, %16) {onnx_node_name = "MatMul_357"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %331 = crt.add %330, %108 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %332 = crt.div %331, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %333 = "onnx.Erf"(%332) {onnx_node_name = "Erf_361"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %334 = crt.add %333, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %335 = crt.mul %331, %334 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %336 = crt.mul %335, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %337 = "onnx.MatMul"(%336, %17) {onnx_node_name = "MatMul_367"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %338 = crt.add %318, %337 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %339 = crt.constant : () -> tensor<1x197x768xf32>
    %340 = crt.add %338, %339 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %341 = crt.reducemean %340 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %342 = crt.sub %340, %341 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %343 = "onnx.Pow"(%342, %18) {onnx_node_name = "Pow_373"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %344 = crt.reducemean %343 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %345 = crt.add %344, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %346 = "onnx.Sqrt"(%345) {onnx_node_name = "Sqrt_377"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %347 = crt.div %342, %346 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %348 = crt.mul %347, %117 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %349 = crt.add %348, %116 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %350 = "onnx.Transpose"(%349) {onnx_node_name = "Transpose_381", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %351 = "onnx.MatMul"(%350, %19) {onnx_node_name = "MatMul_395"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %352 = crt.add %351, %113 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %353 = crt.constant : () -> tensor<3xi64>
    %354:3 = "onnx.Split"(%352, %353) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %355 = crt.mul %354#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %356 = crt.reshape %355, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %357 = "onnx.Transpose"(%356) {onnx_node_name = "Transpose_407", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %358 = crt.reshape %354#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %359 = crt.reshape %354#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %360 = "onnx.Transpose"(%359) {onnx_node_name = "Transpose_420", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %361 = "onnx.Transpose"(%358) {onnx_node_name = "Transpose_421", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %362 = "onnx.MatMul"(%357, %361) {onnx_node_name = "MatMul_422"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %363 = crt.softmax %362 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %364 = "onnx.MatMul"(%363, %360) {onnx_node_name = "MatMul_424"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %365 = "onnx.Transpose"(%364) {onnx_node_name = "Transpose_425", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %366 = crt.reshape %365, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %367 = "onnx.MatMul"(%366, %20) {onnx_node_name = "MatMul_431"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %368 = crt.add %367, %114 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %369 = "onnx.Transpose"(%368) {onnx_node_name = "Transpose_433", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %370 = crt.add %338, %369 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %371 = crt.constant : () -> tensor<1x197x768xf32>
    %372 = crt.add %370, %371 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %373 = crt.reducemean %372 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %374 = crt.sub %372, %373 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %375 = "onnx.Pow"(%374, %21) {onnx_node_name = "Pow_438"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %376 = crt.reducemean %375 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %377 = crt.add %376, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %378 = "onnx.Sqrt"(%377) {onnx_node_name = "Sqrt_442"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %379 = crt.div %374, %378 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %380 = crt.mul %379, %119 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %381 = crt.add %380, %118 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %382 = "onnx.MatMul"(%381, %22) {onnx_node_name = "MatMul_446"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %383 = crt.add %382, %115 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %384 = crt.div %383, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %385 = "onnx.Erf"(%384) {onnx_node_name = "Erf_450"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %386 = crt.add %385, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %387 = crt.mul %383, %386 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %388 = crt.mul %387, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %389 = "onnx.MatMul"(%388, %23) {onnx_node_name = "MatMul_456"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %390 = crt.add %370, %389 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %391 = crt.constant : () -> tensor<1x197x768xf32>
    %392 = crt.add %390, %391 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %393 = crt.reducemean %392 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %394 = crt.sub %392, %393 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %395 = "onnx.Pow"(%394, %24) {onnx_node_name = "Pow_462"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %396 = crt.reducemean %395 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %397 = crt.add %396, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %398 = "onnx.Sqrt"(%397) {onnx_node_name = "Sqrt_466"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %399 = crt.div %394, %398 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %400 = crt.mul %399, %124 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %401 = crt.add %400, %123 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %402 = "onnx.Transpose"(%401) {onnx_node_name = "Transpose_470", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %403 = "onnx.MatMul"(%402, %25) {onnx_node_name = "MatMul_484"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %404 = crt.add %403, %120 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %405 = crt.constant : () -> tensor<3xi64>
    %406:3 = "onnx.Split"(%404, %405) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %407 = crt.mul %406#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %408 = crt.reshape %407, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %409 = "onnx.Transpose"(%408) {onnx_node_name = "Transpose_496", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %410 = crt.reshape %406#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %411 = crt.reshape %406#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %412 = "onnx.Transpose"(%411) {onnx_node_name = "Transpose_509", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %413 = "onnx.Transpose"(%410) {onnx_node_name = "Transpose_510", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %414 = "onnx.MatMul"(%409, %413) {onnx_node_name = "MatMul_511"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %415 = crt.softmax %414 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %416 = "onnx.MatMul"(%415, %412) {onnx_node_name = "MatMul_513"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %417 = "onnx.Transpose"(%416) {onnx_node_name = "Transpose_514", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %418 = crt.reshape %417, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %419 = "onnx.MatMul"(%418, %26) {onnx_node_name = "MatMul_520"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %420 = crt.add %419, %121 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %421 = "onnx.Transpose"(%420) {onnx_node_name = "Transpose_522", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %422 = crt.add %390, %421 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %423 = crt.constant : () -> tensor<1x197x768xf32>
    %424 = crt.add %422, %423 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %425 = crt.reducemean %424 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %426 = crt.sub %424, %425 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %427 = "onnx.Pow"(%426, %27) {onnx_node_name = "Pow_527"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %428 = crt.reducemean %427 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %429 = crt.add %428, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %430 = "onnx.Sqrt"(%429) {onnx_node_name = "Sqrt_531"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %431 = crt.div %426, %430 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %432 = crt.mul %431, %126 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %433 = crt.add %432, %125 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %434 = "onnx.MatMul"(%433, %28) {onnx_node_name = "MatMul_535"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %435 = crt.add %434, %122 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %436 = crt.div %435, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %437 = "onnx.Erf"(%436) {onnx_node_name = "Erf_539"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %438 = crt.add %437, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %439 = crt.mul %435, %438 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %440 = crt.mul %439, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %441 = "onnx.MatMul"(%440, %29) {onnx_node_name = "MatMul_545"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %442 = crt.add %422, %441 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %443 = crt.constant : () -> tensor<1x197x768xf32>
    %444 = crt.add %442, %443 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %445 = crt.reducemean %444 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %446 = crt.sub %444, %445 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %447 = "onnx.Pow"(%446, %30) {onnx_node_name = "Pow_551"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %448 = crt.reducemean %447 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %449 = crt.add %448, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %450 = "onnx.Sqrt"(%449) {onnx_node_name = "Sqrt_555"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %451 = crt.div %446, %450 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %452 = crt.mul %451, %131 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %453 = crt.add %452, %130 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %454 = "onnx.Transpose"(%453) {onnx_node_name = "Transpose_559", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %455 = "onnx.MatMul"(%454, %31) {onnx_node_name = "MatMul_573"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %456 = crt.add %455, %127 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %457 = crt.constant : () -> tensor<3xi64>
    %458:3 = "onnx.Split"(%456, %457) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %459 = crt.mul %458#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %460 = crt.reshape %459, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %461 = "onnx.Transpose"(%460) {onnx_node_name = "Transpose_585", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %462 = crt.reshape %458#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %463 = crt.reshape %458#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %464 = "onnx.Transpose"(%463) {onnx_node_name = "Transpose_598", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %465 = "onnx.Transpose"(%462) {onnx_node_name = "Transpose_599", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %466 = "onnx.MatMul"(%461, %465) {onnx_node_name = "MatMul_600"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %467 = crt.softmax %466 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %468 = "onnx.MatMul"(%467, %464) {onnx_node_name = "MatMul_602"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %469 = "onnx.Transpose"(%468) {onnx_node_name = "Transpose_603", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %470 = crt.reshape %469, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %471 = "onnx.MatMul"(%470, %32) {onnx_node_name = "MatMul_609"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %472 = crt.add %471, %128 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %473 = "onnx.Transpose"(%472) {onnx_node_name = "Transpose_611", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %474 = crt.add %442, %473 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %475 = crt.constant : () -> tensor<1x197x768xf32>
    %476 = crt.add %474, %475 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %477 = crt.reducemean %476 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %478 = crt.sub %476, %477 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %479 = "onnx.Pow"(%478, %33) {onnx_node_name = "Pow_616"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %480 = crt.reducemean %479 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %481 = crt.add %480, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %482 = "onnx.Sqrt"(%481) {onnx_node_name = "Sqrt_620"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %483 = crt.div %478, %482 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %484 = crt.mul %483, %133 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %485 = crt.add %484, %132 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %486 = "onnx.MatMul"(%485, %34) {onnx_node_name = "MatMul_624"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %487 = crt.add %486, %129 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %488 = crt.div %487, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %489 = "onnx.Erf"(%488) {onnx_node_name = "Erf_628"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %490 = crt.add %489, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %491 = crt.mul %487, %490 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %492 = crt.mul %491, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %493 = "onnx.MatMul"(%492, %35) {onnx_node_name = "MatMul_634"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %494 = crt.add %474, %493 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %495 = crt.constant : () -> tensor<1x197x768xf32>
    %496 = crt.add %494, %495 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %497 = crt.reducemean %496 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %498 = crt.sub %496, %497 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %499 = "onnx.Pow"(%498, %36) {onnx_node_name = "Pow_640"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %500 = crt.reducemean %499 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %501 = crt.add %500, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %502 = "onnx.Sqrt"(%501) {onnx_node_name = "Sqrt_644"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %503 = crt.div %498, %502 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %504 = crt.mul %503, %138 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %505 = crt.add %504, %137 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %506 = "onnx.Transpose"(%505) {onnx_node_name = "Transpose_648", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %507 = "onnx.MatMul"(%506, %37) {onnx_node_name = "MatMul_662"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %508 = crt.add %507, %134 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %509 = crt.constant : () -> tensor<3xi64>
    %510:3 = "onnx.Split"(%508, %509) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %511 = crt.mul %510#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %512 = crt.reshape %511, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %513 = "onnx.Transpose"(%512) {onnx_node_name = "Transpose_674", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %514 = crt.reshape %510#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %515 = crt.reshape %510#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %516 = "onnx.Transpose"(%515) {onnx_node_name = "Transpose_687", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %517 = "onnx.Transpose"(%514) {onnx_node_name = "Transpose_688", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %518 = "onnx.MatMul"(%513, %517) {onnx_node_name = "MatMul_689"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %519 = crt.softmax %518 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %520 = "onnx.MatMul"(%519, %516) {onnx_node_name = "MatMul_691"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %521 = "onnx.Transpose"(%520) {onnx_node_name = "Transpose_692", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %522 = crt.reshape %521, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %523 = "onnx.MatMul"(%522, %38) {onnx_node_name = "MatMul_698"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %524 = crt.add %523, %135 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %525 = "onnx.Transpose"(%524) {onnx_node_name = "Transpose_700", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %526 = crt.add %494, %525 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %527 = crt.constant : () -> tensor<1x197x768xf32>
    %528 = crt.add %526, %527 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %529 = crt.reducemean %528 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %530 = crt.sub %528, %529 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %531 = "onnx.Pow"(%530, %39) {onnx_node_name = "Pow_705"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %532 = crt.reducemean %531 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %533 = crt.add %532, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %534 = "onnx.Sqrt"(%533) {onnx_node_name = "Sqrt_709"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %535 = crt.div %530, %534 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %536 = crt.mul %535, %140 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %537 = crt.add %536, %139 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %538 = "onnx.MatMul"(%537, %40) {onnx_node_name = "MatMul_713"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %539 = crt.add %538, %136 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %540 = crt.div %539, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %541 = "onnx.Erf"(%540) {onnx_node_name = "Erf_717"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %542 = crt.add %541, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %543 = crt.mul %539, %542 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %544 = crt.mul %543, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %545 = "onnx.MatMul"(%544, %41) {onnx_node_name = "MatMul_723"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %546 = crt.add %526, %545 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %547 = crt.constant : () -> tensor<1x197x768xf32>
    %548 = crt.add %546, %547 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %549 = crt.reducemean %548 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %550 = crt.sub %548, %549 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %551 = "onnx.Pow"(%550, %42) {onnx_node_name = "Pow_729"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %552 = crt.reducemean %551 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %553 = crt.add %552, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %554 = "onnx.Sqrt"(%553) {onnx_node_name = "Sqrt_733"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %555 = crt.div %550, %554 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %556 = crt.mul %555, %145 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %557 = crt.add %556, %144 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %558 = "onnx.Transpose"(%557) {onnx_node_name = "Transpose_737", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %559 = "onnx.MatMul"(%558, %43) {onnx_node_name = "MatMul_751"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %560 = crt.add %559, %141 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %561 = crt.constant : () -> tensor<3xi64>
    %562:3 = "onnx.Split"(%560, %561) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %563 = crt.mul %562#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %564 = crt.reshape %563, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %565 = "onnx.Transpose"(%564) {onnx_node_name = "Transpose_763", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %566 = crt.reshape %562#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %567 = crt.reshape %562#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %568 = "onnx.Transpose"(%567) {onnx_node_name = "Transpose_776", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %569 = "onnx.Transpose"(%566) {onnx_node_name = "Transpose_777", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %570 = "onnx.MatMul"(%565, %569) {onnx_node_name = "MatMul_778"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %571 = crt.softmax %570 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %572 = "onnx.MatMul"(%571, %568) {onnx_node_name = "MatMul_780"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %573 = "onnx.Transpose"(%572) {onnx_node_name = "Transpose_781", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %574 = crt.reshape %573, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %575 = "onnx.MatMul"(%574, %44) {onnx_node_name = "MatMul_787"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %576 = crt.add %575, %142 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %577 = "onnx.Transpose"(%576) {onnx_node_name = "Transpose_789", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %578 = crt.add %546, %577 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %579 = crt.constant : () -> tensor<1x197x768xf32>
    %580 = crt.add %578, %579 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %581 = crt.reducemean %580 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %582 = crt.sub %580, %581 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %583 = "onnx.Pow"(%582, %45) {onnx_node_name = "Pow_794"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %584 = crt.reducemean %583 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %585 = crt.add %584, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %586 = "onnx.Sqrt"(%585) {onnx_node_name = "Sqrt_798"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %587 = crt.div %582, %586 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %588 = crt.mul %587, %147 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %589 = crt.add %588, %146 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %590 = "onnx.MatMul"(%589, %46) {onnx_node_name = "MatMul_802"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %591 = crt.add %590, %143 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %592 = crt.div %591, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %593 = "onnx.Erf"(%592) {onnx_node_name = "Erf_806"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %594 = crt.add %593, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %595 = crt.mul %591, %594 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %596 = crt.mul %595, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %597 = "onnx.MatMul"(%596, %47) {onnx_node_name = "MatMul_812"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %598 = crt.add %578, %597 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %599 = crt.constant : () -> tensor<1x197x768xf32>
    %600 = crt.add %598, %599 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %601 = crt.reducemean %600 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %602 = crt.sub %600, %601 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %603 = "onnx.Pow"(%602, %48) {onnx_node_name = "Pow_818"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %604 = crt.reducemean %603 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %605 = crt.add %604, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %606 = "onnx.Sqrt"(%605) {onnx_node_name = "Sqrt_822"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %607 = crt.div %602, %606 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %608 = crt.mul %607, %152 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %609 = crt.add %608, %151 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %610 = "onnx.Transpose"(%609) {onnx_node_name = "Transpose_826", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %611 = "onnx.MatMul"(%610, %49) {onnx_node_name = "MatMul_840"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %612 = crt.add %611, %148 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %613 = crt.constant : () -> tensor<3xi64>
    %614:3 = "onnx.Split"(%612, %613) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %615 = crt.mul %614#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %616 = crt.reshape %615, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %617 = "onnx.Transpose"(%616) {onnx_node_name = "Transpose_852", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %618 = crt.reshape %614#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %619 = crt.reshape %614#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %620 = "onnx.Transpose"(%619) {onnx_node_name = "Transpose_865", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %621 = "onnx.Transpose"(%618) {onnx_node_name = "Transpose_866", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %622 = "onnx.MatMul"(%617, %621) {onnx_node_name = "MatMul_867"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %623 = crt.softmax %622 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %624 = "onnx.MatMul"(%623, %620) {onnx_node_name = "MatMul_869"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %625 = "onnx.Transpose"(%624) {onnx_node_name = "Transpose_870", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %626 = crt.reshape %625, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %627 = "onnx.MatMul"(%626, %50) {onnx_node_name = "MatMul_876"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %628 = crt.add %627, %149 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %629 = "onnx.Transpose"(%628) {onnx_node_name = "Transpose_878", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %630 = crt.add %598, %629 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %631 = crt.constant : () -> tensor<1x197x768xf32>
    %632 = crt.add %630, %631 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %633 = crt.reducemean %632 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %634 = crt.sub %632, %633 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %635 = "onnx.Pow"(%634, %51) {onnx_node_name = "Pow_883"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %636 = crt.reducemean %635 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %637 = crt.add %636, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %638 = "onnx.Sqrt"(%637) {onnx_node_name = "Sqrt_887"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %639 = crt.div %634, %638 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %640 = crt.mul %639, %154 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %641 = crt.add %640, %153 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %642 = "onnx.MatMul"(%641, %52) {onnx_node_name = "MatMul_891"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %643 = crt.add %642, %150 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %644 = crt.div %643, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %645 = "onnx.Erf"(%644) {onnx_node_name = "Erf_895"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %646 = crt.add %645, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %647 = crt.mul %643, %646 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %648 = crt.mul %647, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %649 = "onnx.MatMul"(%648, %53) {onnx_node_name = "MatMul_901"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %650 = crt.add %630, %649 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %651 = crt.constant : () -> tensor<1x197x768xf32>
    %652 = crt.add %650, %651 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %653 = crt.reducemean %652 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %654 = crt.sub %652, %653 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %655 = "onnx.Pow"(%654, %54) {onnx_node_name = "Pow_907"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %656 = crt.reducemean %655 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %657 = crt.add %656, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %658 = "onnx.Sqrt"(%657) {onnx_node_name = "Sqrt_911"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %659 = crt.div %654, %658 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %660 = crt.mul %659, %159 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %661 = crt.add %660, %158 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %662 = "onnx.Transpose"(%661) {onnx_node_name = "Transpose_915", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %663 = "onnx.MatMul"(%662, %55) {onnx_node_name = "MatMul_929"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %664 = crt.add %663, %155 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %665 = crt.constant : () -> tensor<3xi64>
    %666:3 = "onnx.Split"(%664, %665) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %667 = crt.mul %666#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %668 = crt.reshape %667, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %669 = "onnx.Transpose"(%668) {onnx_node_name = "Transpose_941", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %670 = crt.reshape %666#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %671 = crt.reshape %666#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %672 = "onnx.Transpose"(%671) {onnx_node_name = "Transpose_954", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %673 = "onnx.Transpose"(%670) {onnx_node_name = "Transpose_955", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %674 = "onnx.MatMul"(%669, %673) {onnx_node_name = "MatMul_956"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %675 = crt.softmax %674 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %676 = "onnx.MatMul"(%675, %672) {onnx_node_name = "MatMul_958"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %677 = "onnx.Transpose"(%676) {onnx_node_name = "Transpose_959", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %678 = crt.reshape %677, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %679 = "onnx.MatMul"(%678, %56) {onnx_node_name = "MatMul_965"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %680 = crt.add %679, %156 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %681 = "onnx.Transpose"(%680) {onnx_node_name = "Transpose_967", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %682 = crt.add %650, %681 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %683 = crt.constant : () -> tensor<1x197x768xf32>
    %684 = crt.add %682, %683 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %685 = crt.reducemean %684 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %686 = crt.sub %684, %685 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %687 = "onnx.Pow"(%686, %57) {onnx_node_name = "Pow_972"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %688 = crt.reducemean %687 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %689 = crt.add %688, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %690 = "onnx.Sqrt"(%689) {onnx_node_name = "Sqrt_976"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %691 = crt.div %686, %690 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %692 = crt.mul %691, %161 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %693 = crt.add %692, %160 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %694 = "onnx.MatMul"(%693, %58) {onnx_node_name = "MatMul_980"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %695 = crt.add %694, %157 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %696 = crt.div %695, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %697 = "onnx.Erf"(%696) {onnx_node_name = "Erf_984"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %698 = crt.add %697, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %699 = crt.mul %695, %698 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %700 = crt.mul %699, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %701 = "onnx.MatMul"(%700, %59) {onnx_node_name = "MatMul_990"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %702 = crt.add %682, %701 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %703 = crt.constant : () -> tensor<1x197x768xf32>
    %704 = crt.add %702, %703 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %705 = crt.reducemean %704 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %706 = crt.sub %704, %705 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %707 = "onnx.Pow"(%706, %60) {onnx_node_name = "Pow_996"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %708 = crt.reducemean %707 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %709 = crt.add %708, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %710 = "onnx.Sqrt"(%709) {onnx_node_name = "Sqrt_1000"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %711 = crt.div %706, %710 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %712 = crt.mul %711, %96 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %713 = crt.add %712, %95 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %714 = "onnx.Transpose"(%713) {onnx_node_name = "Transpose_1004", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %715 = "onnx.MatMul"(%714, %61) {onnx_node_name = "MatMul_1018"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %716 = crt.add %715, %92 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %717 = crt.constant : () -> tensor<3xi64>
    %718:3 = "onnx.Split"(%716, %717) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %719 = crt.mul %718#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %720 = crt.reshape %719, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %721 = "onnx.Transpose"(%720) {onnx_node_name = "Transpose_1030", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %722 = crt.reshape %718#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %723 = crt.reshape %718#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %724 = "onnx.Transpose"(%723) {onnx_node_name = "Transpose_1043", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %725 = "onnx.Transpose"(%722) {onnx_node_name = "Transpose_1044", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %726 = "onnx.MatMul"(%721, %725) {onnx_node_name = "MatMul_1045"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %727 = crt.softmax %726 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %728 = "onnx.MatMul"(%727, %724) {onnx_node_name = "MatMul_1047"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %729 = "onnx.Transpose"(%728) {onnx_node_name = "Transpose_1048", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %730 = crt.reshape %729, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %731 = "onnx.MatMul"(%730, %62) {onnx_node_name = "MatMul_1054"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %732 = crt.add %731, %93 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %733 = "onnx.Transpose"(%732) {onnx_node_name = "Transpose_1056", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %734 = crt.add %702, %733 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %735 = crt.constant : () -> tensor<1x197x768xf32>
    %736 = crt.add %734, %735 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %737 = crt.reducemean %736 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %738 = crt.sub %736, %737 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %739 = "onnx.Pow"(%738, %63) {onnx_node_name = "Pow_1061"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %740 = crt.reducemean %739 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %741 = crt.add %740, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %742 = "onnx.Sqrt"(%741) {onnx_node_name = "Sqrt_1065"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %743 = crt.div %738, %742 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %744 = crt.mul %743, %98 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %745 = crt.add %744, %97 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %746 = "onnx.MatMul"(%745, %64) {onnx_node_name = "MatMul_1069"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %747 = crt.add %746, %94 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %748 = crt.div %747, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %749 = "onnx.Erf"(%748) {onnx_node_name = "Erf_1073"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %750 = crt.add %749, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %751 = crt.mul %747, %750 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %752 = crt.mul %751, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %753 = "onnx.MatMul"(%752, %65) {onnx_node_name = "MatMul_1079"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %754 = crt.add %734, %753 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %755 = crt.constant : () -> tensor<1x197x768xf32>
    %756 = crt.add %754, %755 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %757 = crt.reducemean %756 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %758 = crt.sub %756, %757 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %759 = "onnx.Pow"(%758, %66) {onnx_node_name = "Pow_1085"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %760 = crt.reducemean %759 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %761 = crt.add %760, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %762 = "onnx.Sqrt"(%761) {onnx_node_name = "Sqrt_1089"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %763 = crt.div %758, %762 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %764 = crt.mul %763, %103 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %765 = crt.add %764, %102 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %766 = "onnx.Transpose"(%765) {onnx_node_name = "Transpose_1093", perm = [1, 0, 2]} : (tensor<8x197x768xf32>) -> tensor<197x8x768xf32>
    %767 = "onnx.MatMul"(%766, %67) {onnx_node_name = "MatMul_1107"} : (tensor<197x8x768xf32>, tensor<768x2304xf32>) -> tensor<197x8x2304xf32>
    %768 = crt.add %767, %99 : (tensor<197x8x2304xf32>, tensor<2304xf32>) -> tensor<197x8x2304xf32>
    %769 = crt.constant : () -> tensor<3xi64>
    %770:3 = "onnx.Split"(%768, %769) {axis = 2 : si64} : (tensor<197x8x2304xf32>, tensor<3xi64>) -> (tensor<197x8x768xf32>, tensor<197x8x768xf32>, tensor<197x8x768xf32>)
    %771 = crt.mul %770#0, %166 : (tensor<197x8x768xf32>, tensor<f32>) -> tensor<197x8x768xf32>
    %772 = crt.reshape %771, %174 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %773 = "onnx.Transpose"(%772) {onnx_node_name = "Transpose_1119", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %774 = crt.reshape %770#1, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %775 = crt.reshape %770#2, %175 : (tensor<197x8x768xf32>, tensor<3xi64>) -> tensor<197x96x64xf32>
    %776 = "onnx.Transpose"(%775) {onnx_node_name = "Transpose_1132", perm = [1, 0, 2]} : (tensor<197x96x64xf32>) -> tensor<96x197x64xf32>
    %777 = "onnx.Transpose"(%774) {onnx_node_name = "Transpose_1133", perm = [1, 2, 0]} : (tensor<197x96x64xf32>) -> tensor<96x64x197xf32>
    %778 = "onnx.MatMul"(%773, %777) {onnx_node_name = "MatMul_1134"} : (tensor<96x197x64xf32>, tensor<96x64x197xf32>) -> tensor<96x197x197xf32>
    %779 = crt.softmax %778 : (tensor<96x197x197xf32>) -> tensor<96x197x197xf32>
    %780 = "onnx.MatMul"(%779, %776) {onnx_node_name = "MatMul_1136"} : (tensor<96x197x197xf32>, tensor<96x197x64xf32>) -> tensor<96x197x64xf32>
    %781 = "onnx.Transpose"(%780) {onnx_node_name = "Transpose_1137", perm = [1, 0, 2]} : (tensor<96x197x64xf32>) -> tensor<197x96x64xf32>
    %782 = crt.reshape %781, %176 : (tensor<197x96x64xf32>, tensor<3xi64>) -> tensor<197x8x768xf32>
    %783 = "onnx.MatMul"(%782, %68) {onnx_node_name = "MatMul_1143"} : (tensor<197x8x768xf32>, tensor<768x768xf32>) -> tensor<197x8x768xf32>
    %784 = crt.add %783, %100 : (tensor<197x8x768xf32>, tensor<768xf32>) -> tensor<197x8x768xf32>
    %785 = "onnx.Transpose"(%784) {onnx_node_name = "Transpose_1145", perm = [1, 0, 2]} : (tensor<197x8x768xf32>) -> tensor<8x197x768xf32>
    %786 = crt.add %754, %785 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %787 = crt.constant : () -> tensor<1x197x768xf32>
    %788 = crt.add %786, %787 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %789 = crt.reducemean %788 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %790 = crt.sub %788, %789 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %791 = "onnx.Pow"(%790, %69) {onnx_node_name = "Pow_1150"} : (tensor<8x197x768xf32>, tensor<f32>) -> tensor<8x197x768xf32>
    %792 = crt.reducemean %791 : (tensor<8x197x768xf32>) -> tensor<8x197x1xf32>
    %793 = crt.add %792, %165 : (tensor<8x197x1xf32>, tensor<f32>) -> tensor<8x197x1xf32>
    %794 = "onnx.Sqrt"(%793) {onnx_node_name = "Sqrt_1154"} : (tensor<8x197x1xf32>) -> tensor<8x197x1xf32>
    %795 = crt.div %790, %794 : (tensor<8x197x768xf32>, tensor<8x197x1xf32>) -> tensor<8x197x768xf32>
    %796 = crt.mul %795, %105 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %797 = crt.add %796, %104 : (tensor<8x197x768xf32>, tensor<768xf32>) -> tensor<8x197x768xf32>
    %798 = "onnx.MatMul"(%797, %70) {onnx_node_name = "MatMul_1158"} : (tensor<8x197x768xf32>, tensor<768x3072xf32>) -> tensor<8x197x3072xf32>
    %799 = crt.add %798, %101 : (tensor<8x197x3072xf32>, tensor<3072xf32>) -> tensor<8x197x3072xf32>
    %800 = crt.div %799, %167 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %801 = "onnx.Erf"(%800) {onnx_node_name = "Erf_1162"} : (tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %802 = crt.add %801, %168 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %803 = crt.mul %799, %802 : (tensor<8x197x3072xf32>, tensor<8x197x3072xf32>) -> tensor<8x197x3072xf32>
    %804 = crt.mul %803, %169 : (tensor<8x197x3072xf32>, tensor<f32>) -> tensor<8x197x3072xf32>
    %805 = "onnx.MatMul"(%804, %71) {onnx_node_name = "MatMul_1168"} : (tensor<8x197x3072xf32>, tensor<3072x768xf32>) -> tensor<8x197x768xf32>
    %806 = crt.add %786, %805 : (tensor<8x197x768xf32>, tensor<8x197x768xf32>) -> tensor<8x197x768xf32>
    %807 = crt.constant : () -> tensor<1x197x768xf32>
    %808 = crt.add %806, %807 : (tensor<8x197x768xf32>, tensor<1x197x768xf32>) -> tensor<8x197x768xf32>
    %809 = crt.reshape %808, %177 : (tensor<8x197x768xf32>, tensor<4xi64>) -> tensor<1x8x197x768xf32>
    %810 = crt.reducemean %809 : (tensor<1x8x197x768xf32>) -> tensor<1x197x768xf32>
    %811 = crt.reducemean %810 : (tensor<1x197x768xf32>) -> tensor<1x197x1xf32>
    %812 = crt.sub %810, %811 : (tensor<1x197x768xf32>, tensor<1x197x1xf32>) -> tensor<1x197x768xf32>
    %813 = "onnx.Pow"(%812, %72) {onnx_node_name = "Pow_1185"} : (tensor<1x197x768xf32>, tensor<f32>) -> tensor<1x197x768xf32>
    %814 = crt.reducemean %813 : (tensor<1x197x768xf32>) -> tensor<1x197x1xf32>
    %815 = crt.add %814, %165 : (tensor<1x197x1xf32>, tensor<f32>) -> tensor<1x197x1xf32>
    %816 = "onnx.Sqrt"(%815) {onnx_node_name = "Sqrt_1189"} : (tensor<1x197x1xf32>) -> tensor<1x197x1xf32>
    %817 = crt.div %812, %816 : (tensor<1x197x768xf32>, tensor<1x197x1xf32>) -> tensor<1x197x768xf32>
    %818 = crt.mul %817, %74 : (tensor<1x197x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
    %819 = crt.add %818, %73 : (tensor<1x197x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
    %820 = "onnx.Gather"(%819, %164) {axis = 1 : si64, onnx_node_name = "Gather_1194"} : (tensor<1x197x768xf32>, tensor<i64>) -> tensor<1x768xf32>
    %821 = crt.gemm %820, %163, %162 : (tensor<1x768xf32>, tensor<400x768xf32>, tensor<400xf32>) -> tensor<1x400xf32>
    return %821 : tensor<1x400xf32>
  }
  "onnx.EntryPoint"() {func = @main_graph} : () -> ()
}

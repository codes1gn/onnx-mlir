import numpy as np
import torch
import time
import argparse
from statistics import mean, stdev
from datetime import datetime

GEN_FILE_HEADER = """
/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\\
|*                                                                            *|
|* Op Definitions                                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

#ifdef GET_OP_COST
#undef GET_OP_COST

"""

GEN_FILE_TAIL = """

#endif  // GET_OP_COST
"""
# "stride": [1, 1], "padding": "same"
def _Conv(arg, arg1, **kwargs):
    return torch.nn.functional.conv2d(arg, arg1, **kwargs)
_Conv.__name__ = "Conv" 

def _maxpool(arg):
    return torch.nn.functional.max_pool2d(arg, [2, 2], [2, 2])
_maxpool.__name__ = "maxpool" 

def _maxpool3(arg):
    return torch.nn.functional.max_pool2d(arg, [3, 3], [2, 2])
_maxpool3.__name__ = "maxpool" 

def _avgpool(arg):
    return torch.nn.functional.avg_pool2d(arg, [3, 3], [1, 1], [1, 1])
_avgpool.__name__ = "avgpool" 

def _avgpool2(arg):
    return torch.nn.functional.avg_pool2d(arg, [3, 3], [2, 2], [1, 1])
_avgpool2.__name__ = "avgpool" 

def _reducemean(arg):
    return torch.nn.functional.avg_pool2d(arg, [7, 7])
_reducemean.__name__ = "reducemean" 

def _unsqueeze(arg, arg1):
    return torch.unsqueeze(arg, 1)
_unsqueeze.__name__ = "unsqueeze"

def _transpose12(arg):
    return torch.transpose(arg, 1, 2)
_transpose12.__name__ = "transpose"

def _Transpose12(arg):
    return torch.transpose(arg, 1, 2)
_Transpose12.__name__ = "Transpose"

def _pow(arg):
    return torch.pow(arg, 1.5)
_pow.__name__ = "pow"
def _Pow(arg, arg1):
    return torch.pow(arg, arg1)
_Pow.__name__ = "Pow"

def _Erf(arg):
    return torch.erf(arg)
_Erf.__name__ = "Erf"

def _Sqrt(arg):
    return torch.sqrt(arg)
_Sqrt.__name__ = "Sqrt"

def _Sigmoid(arg):
    return torch.sigmoid(arg)
_Sigmoid.__name__ = "Sigmoid"

def _cast(arg):
    return torch.int(arg)
_cast.__name__ = "cast"


TENARY_OPS_TO_MEASURE = [

    (_Conv, [1, 128, 7, 7], [32, 128, 3, 3], [32], {"stride": [1, 1], "padding": "same"}),
    (_Conv, [1, 128, 14, 14], [32, 128, 3, 3], [32], {"stride": [1, 1], "padding": "same"}),
    (_Conv, [1, 128, 28, 28], [32, 128, 3, 3], [32], {"stride": [1, 1], "padding": "same"}),
    (_Conv, [1, 128, 56, 56], [32, 128, 3, 3], [32], {"stride": [1, 1], "padding": "same"}),

    (torch.nn.functional.linear, [1, 196], [128, 196], [128], {}),
    (torch.nn.functional.linear, [1, 128], [10, 128], [10], {}),
    (torch.nn.functional.linear, [1, 512], [1000, 512], [1000], {}),
    (torch.nn.functional.linear, [1, 1024], [1000, 1024], [1000], {}),
    (torch.nn.functional.linear, [1, 1280], [1000, 1280], [1000], {}),
    (torch.nn.functional.linear, [1, 2048], [1000, 2048], [1000], {}),
    (torch.nn.functional.linear, [1, 4096], [1000, 4096], [1000], {}),
    (torch.nn.functional.linear, [1, 4096], [4096, 4096], [4096], {}),
    (torch.nn.functional.linear, [1, 25088], [4096, 25088], [4096], {}),
    (torch.nn.functional.linear, [1, 768], [400, 768], [400], {}),
    (torch.nn.functional.conv2d, [1, 3, 224, 224], [64, 3, 7, 7], [64], {"stride": [2, 2], "padding": [3, 3]}),
    (torch.nn.functional.conv2d, [1, 3, 224, 224], [768, 3, 16, 16], [768], {"stride": [16, 16], "padding": [0, 0]}),
    (torch.nn.functional.conv2d, [1, 3, 224, 224], [32, 3, 3, 3], [32], {"stride": [2, 2], "padding": [1, 1]}),
    (torch.nn.functional.conv2d, [1, 3, 224, 224], [64, 3, 3, 3], [64], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 64, 224, 224], [64, 64, 3, 3], [64], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 64, 112, 112], [128, 64, 3, 3], [128], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 128, 112, 112], [128, 128, 3, 3], [128], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 32, 112, 112], [32, 1, 3, 3], [32], {"stride": [1, 1], "padding": "same", "groups": 32}),
    (torch.nn.functional.conv2d, [1, 96, 112, 112], [96, 1, 3, 3], [96], {"stride": [2, 2], "padding": [1, 1], "groups": 96}),
    (torch.nn.functional.conv2d, [1, 144, 56, 56], [144, 1, 3, 3], [144], {"stride": [1, 1], "padding": "same", "groups": 144}),
    (torch.nn.functional.conv2d, [1, 144, 56, 56], [144, 1, 3, 3], [144], {"stride": [2, 2], "padding": [1, 1], "groups": 144}),
    (torch.nn.functional.conv2d, [1, 192, 28, 28], [192, 1, 3, 3], [192], {"stride": [1, 1], "padding": "same", "groups": 192}),
    (torch.nn.functional.conv2d, [1, 192, 28, 28], [192, 1, 3, 3], [192], {"stride": [2, 2], "padding": [1, 1], "groups": 192}),
    (torch.nn.functional.conv2d, [1, 384, 14, 14], [384, 1, 3, 3], [384], {"stride": [1, 1], "padding": "same", "groups": 384}),
    (torch.nn.functional.conv2d, [1, 384, 14, 14], [384, 1, 3, 3], [384], {"stride": [2, 2], "padding": [1, 1], "groups": 384}),
    (torch.nn.functional.conv2d, [1, 576, 14, 14], [576, 1, 3, 3], [576], {"stride": [1, 1], "padding": "same", "groups": 576}),
    (torch.nn.functional.conv2d, [1, 576, 14, 14], [576, 1, 3, 3], [576], {"stride": [2, 2], "padding": [1, 1], "groups": 576}),
    (torch.nn.functional.conv2d, [1, 960, 7, 7], [960, 1, 3, 3], [960], {"stride": [1, 1], "padding": "same", "groups": 960}),
    (torch.nn.functional.conv2d, [1, 960, 7, 7], [960, 1, 3, 3], [960], {"stride": [2, 2], "padding": [1, 1], "groups": 960}),

    (torch.nn.functional.conv2d, [1, 64, 56, 56], [64, 64, 3, 3], [64],{"stride": [1, 1], "padding": [1, 1]}),
    (torch.nn.functional.conv2d, [1, 64, 56, 56], [128, 64, 1, 1], [128], {"stride": [2, 2], "padding": [0, 0]}),
    (torch.nn.functional.conv2d, [1, 64, 56, 56], [128, 64, 3, 3], [128], {"stride": [2, 2], "padding": [1, 1]}),
    (torch.nn.functional.conv2d, [1, 128, 56, 56], [128, 128, 3, 3], [128], {"stride": [2, 2], "padding": [1, 1]}),
    (torch.nn.functional.conv2d, [1, 128, 28, 28], [128, 128, 3, 3], [128], {"stride": [1, 1], "padding": [1, 1]}),
    (torch.nn.functional.conv2d, [1, 128, 28, 28], [256, 128, 1, 1], [256], {"stride": [2, 2], "padding": [0, 0]}),
    (torch.nn.functional.conv2d, [1, 128, 28, 28], [256, 128, 3, 3], [256], {"stride": [2, 2], "padding": [1, 1]}),
    (torch.nn.functional.conv2d, [1, 256, 14, 14], [256, 256, 3, 3], [256], {"stride": [1, 1], "padding": [1, 1]}),
    (torch.nn.functional.conv2d, [1, 256, 28, 28], [256, 256, 3, 3], [256], {"stride": [2, 2], "padding": [1, 1]}),
    (torch.nn.functional.conv2d, [1, 128, 56, 56], [256, 128, 3, 3], [256], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 256, 56, 56], [256, 256, 3, 3], [256], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 256, 28, 28], [512, 256, 3, 3], [512], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 512, 14, 14], [512, 512, 3, 3], [512], {"stride": [2, 2], "padding": [1, 1]}),
    (torch.nn.functional.conv2d, [1, 512, 14, 14], [512, 512, 3, 3], [512], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 512, 28, 28], [512, 512, 3, 3], [512], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 256, 14, 14], [512, 256, 1, 1], [512], {"stride": [2, 2], "padding": [0, 0]}),
    (torch.nn.functional.conv2d, [1, 256, 56, 56], [512, 256, 1, 1], [512], {"stride": [2, 2], "padding": [0, 0]}),
    (torch.nn.functional.conv2d, [1, 512, 28, 28], [1024, 512, 1, 1], [1024], {"stride": [2, 2], "padding": [0, 0]}),
    (torch.nn.functional.conv2d, [1, 1024, 14, 14], [2048, 1024, 1, 1], [2048], {"stride": [2, 2], "padding": [0, 0]}),
    (torch.nn.functional.conv2d, [1, 256, 14, 14], [512, 256, 3, 3], [512], {"stride": [2, 2], "padding": [1, 1]}),
    (torch.nn.functional.conv2d, [1, 512, 7, 7], [512, 512, 3, 3], [512], {"stride": [1, 1], "padding": [1, 1]}),

    (torch.nn.functional.conv2d, [1, 3, 299, 299], [32, 3, 3, 3], [32], {"stride": [2, 2], "padding": [0, 0]}),
    (torch.nn.functional.conv2d, [1, 32, 149, 149], [32, 32, 3, 3], [32], {"stride": [1, 1], "padding": [0, 0]}),
    (torch.nn.functional.conv2d, [1, 32, 147, 147], [64, 32, 3, 3], [64], {"stride": [1, 1], "padding": [1, 1]}),
    (torch.nn.functional.conv2d, [1, 80, 73, 73], [192, 80, 3, 3], [192], {"stride": [1, 1], "padding": [0, 0]}),

    (torch.nn.functional.conv2d, [1, 48, 35, 35], [64, 48, 5, 5], [64], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 64, 35, 35], [96, 64, 3, 3], [96], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 96, 35, 35], [96, 96, 3, 3], [96], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 96, 35, 35], [96, 96, 3, 3], [96], {"stride": [2, 2], "padding": [0, 0]}),
    (torch.nn.functional.conv2d, [1, 288, 35, 35], [384, 288, 3, 3], [384], {"stride": [2, 2], "padding": [0, 0]}),

    (torch.nn.functional.conv2d, [1, 192, 17, 17], [320, 192, 3, 3], [320], {"stride": [2, 2], "padding": [0, 0]}),
    (torch.nn.functional.conv2d, [1, 192, 17, 17], [192, 192, 3, 3], [192], {"stride": [2, 2], "padding": [0, 0]}),

    (torch.nn.functional.conv2d, [1, 128, 17, 17], [128, 128, 1, 7], [128], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 128, 17, 17], [128, 128, 7, 1], [128], {"stride": [1, 1], "padding": "same"}),

    (torch.nn.functional.conv2d, [1, 160, 17, 17], [160, 160, 1, 7], [160], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 160, 17, 17], [160, 160, 7, 1], [160], {"stride": [1, 1], "padding": "same"}),

    (torch.nn.functional.conv2d, [1, 160, 17, 17], [192, 160, 1, 7], [192], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 160, 17, 17], [192, 160, 7, 1], [192], {"stride": [1, 1], "padding": "same"}),

    (torch.nn.functional.conv2d, [1, 128, 17, 17], [192, 128, 1, 7], [192], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 128, 17, 17], [192, 128, 7, 1], [192], {"stride": [1, 1], "padding": "same"}),

    (torch.nn.functional.conv2d, [1, 192, 17, 17], [192, 192, 1, 7], [192], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 192, 17, 17], [192, 192, 7, 1], [192], {"stride": [1, 1], "padding": "same"}),

    (torch.nn.functional.conv2d, [1, 448, 8, 8], [384, 448, 3, 3], [384], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 384, 8, 8], [384, 384, 3, 1], [384], {"stride": [1, 1], "padding": "same"}),
    (torch.nn.functional.conv2d, [1, 384, 8, 8], [384, 384, 1, 3], [384], {"stride": [1, 1], "padding": "same"}),
]

VARIANT_OPS_TO_MEASURE = [
    (torch.concat, [[1, 1, 299, 299], [1, 1, 299, 299], [1, 1, 299, 299]], {"dim": 1}),
    (torch.concat, [[1, 64, 35, 35], [1, 64, 35, 35], [1, 96, 35, 35], [1, 32, 35, 35]], {"dim": 1}),
    (torch.concat, [[1, 64, 35, 35], [1, 64, 35, 35], [1, 96, 35, 35], [1, 64, 35, 35]], {"dim": 1}),
    (torch.concat, [[1, 384, 17, 17], [1, 96, 17, 17], [1, 288, 17, 17]], {"dim": 1}),
    (torch.concat, [[1, 192, 17, 17], [1, 192, 17, 17], [1, 192, 17, 17], [1, 192, 17, 17]], {"dim": 1}),
    (torch.concat, [[1, 320, 8, 8], [1, 192, 8, 8], [1, 768, 8, 8]], {"dim": 1}),
    (torch.concat, [[1, 320, 8, 8], [1, 384, 8, 8], [1, 384, 8, 8], [1, 384, 8, 8], [1, 384, 8, 8], [1, 192, 8, 8]], {"dim": 1}),
    (torch.concat, [[1, 320, 8, 8], [1, 384, 8, 8], [1, 384, 8, 8], [1, 384, 8, 8], [1, 384, 8, 8], [1, 192, 8, 8]], {"dim": 1}),

    (torch.concat, [[2, 1, 299, 299], [2, 1, 299, 299], [2, 1, 299, 299]], {"dim": 1}),
    (torch.concat, [[2, 64, 35, 35], [2, 64, 35, 35], [2, 96, 35, 35], [2, 32, 35, 35]], {"dim": 1}),
    (torch.concat, [[2, 64, 35, 35], [2, 64, 35, 35], [2, 96, 35, 35], [2, 64, 35, 35]], {"dim": 1}),
    (torch.concat, [[2, 384, 17, 17], [2, 96, 17, 17], [2, 288, 17, 17]], {"dim": 1}),
    (torch.concat, [[2, 192, 17, 17], [2, 192, 17, 17], [2, 192, 17, 17], [2, 192, 17, 17]], {"dim": 1}),
    (torch.concat, [[2, 320, 8, 8], [2, 192, 8, 8], [2, 768, 8, 8]], {"dim": 1}),
    (torch.concat, [[2, 320, 8, 8], [2, 384, 8, 8], [2, 384, 8, 8], [2, 384, 8, 8], [2, 384, 8, 8], [2, 192, 8, 8]], {"dim": 1}),
    (torch.concat, [[2, 320, 8, 8], [2, 384, 8, 8], [2, 384, 8, 8], [2, 384, 8, 8], [2, 384, 8, 8], [2, 192, 8, 8]], {"dim": 1}),

    (torch.concat, [[4, 1, 299, 299], [4, 1, 299, 299], [4, 1, 299, 299]], {"dim": 1}),
    (torch.concat, [[4, 64, 35, 35], [4, 64, 35, 35], [4, 96, 35, 35], [4, 32, 35, 35]], {"dim": 1}),
    (torch.concat, [[4, 64, 35, 35], [4, 64, 35, 35], [4, 96, 35, 35], [4, 64, 35, 35]], {"dim": 1}),
    (torch.concat, [[4, 384, 17, 17], [4, 96, 17, 17], [4, 288, 17, 17]], {"dim": 1}),
    (torch.concat, [[4, 192, 17, 17], [4, 192, 17, 17], [4, 192, 17, 17], [4, 192, 17, 17]], {"dim": 1}),
    (torch.concat, [[4, 320, 8, 8], [4, 192, 8, 8], [4, 768, 8, 8]], {"dim": 1}),
    (torch.concat, [[4, 320, 8, 8], [4, 384, 8, 8], [4, 384, 8, 8], [4, 384, 8, 8], [4, 384, 8, 8], [4, 192, 8, 8]], {"dim": 1}),
    (torch.concat, [[4, 320, 8, 8], [4, 384, 8, 8], [4, 384, 8, 8], [4, 384, 8, 8], [4, 384, 8, 8], [4, 192, 8, 8]], {"dim": 1}),

    (torch.concat, [[8, 1, 299, 299], [8, 1, 299, 299], [8, 1, 299, 299]], {"dim": 1}),
    (torch.concat, [[8, 64, 35, 35], [8, 64, 35, 35], [8, 96, 35, 35], [8, 32, 35, 35]], {"dim": 1}),
    (torch.concat, [[8, 64, 35, 35], [8, 64, 35, 35], [8, 96, 35, 35], [8, 64, 35, 35]], {"dim": 1}),
    (torch.concat, [[8, 384, 17, 17], [8, 96, 17, 17], [8, 288, 17, 17]], {"dim": 1}),
    (torch.concat, [[8, 192, 17, 17], [8, 192, 17, 17], [8, 192, 17, 17], [8, 192, 17, 17]], {"dim": 1}),
    (torch.concat, [[8, 320, 8, 8], [8, 192, 8, 8], [8, 768, 8, 8]], {"dim": 1}),
    (torch.concat, [[8, 320, 8, 8], [8, 384, 8, 8], [8, 384, 8, 8], [8, 384, 8, 8], [8, 384, 8, 8], [8, 192, 8, 8]], {"dim": 1}),
    (torch.concat, [[8, 320, 8, 8], [8, 384, 8, 8], [8, 384, 8, 8], [8, 384, 8, 8], [8, 384, 8, 8], [8, 192, 8, 8]], {"dim": 1}),

    (torch.concat, [[16, 1, 299, 299], [16, 1, 299, 299], [16, 1, 299, 299]], {"dim": 1}),
    (torch.concat, [[16, 64, 35, 35], [16, 64, 35, 35], [16, 96, 35, 35], [16, 32, 35, 35]], {"dim": 1}),
    (torch.concat, [[16, 64, 35, 35], [16, 64, 35, 35], [16, 96, 35, 35], [16, 64, 35, 35]], {"dim": 1}),
    (torch.concat, [[16, 384, 17, 17], [16, 96, 17, 17], [16, 288, 17, 17]], {"dim": 1}),
    (torch.concat, [[16, 192, 17, 17], [16, 192, 17, 17], [16, 192, 17, 17], [16, 192, 17, 17]], {"dim": 1}),
    (torch.concat, [[16, 320, 8, 8], [16, 192, 8, 8], [16, 768, 8, 8]], {"dim": 1}),
    (torch.concat, [[16, 320, 8, 8], [16, 384, 8, 8], [16, 384, 8, 8], [16, 384, 8, 8], [16, 384, 8, 8], [16, 192, 8, 8]], {"dim": 1}),
    (torch.concat, [[16, 320, 8, 8], [16, 384, 8, 8], [16, 384, 8, 8], [16, 384, 8, 8], [16, 384, 8, 8], [16, 192, 8, 8]], {"dim": 1}),

    (torch.concat, [[24, 1, 299, 299], [24, 1, 299, 299], [24, 1, 299, 299]], {"dim": 1}),
    (torch.concat, [[24, 64, 35, 35], [24, 64, 35, 35], [24, 96, 35, 35], [24, 32, 35, 35]], {"dim": 1}),
    (torch.concat, [[24, 64, 35, 35], [24, 64, 35, 35], [24, 96, 35, 35], [24, 64, 35, 35]], {"dim": 1}),
    (torch.concat, [[24, 384, 17, 17], [24, 96, 17, 17], [24, 288, 17, 17]], {"dim": 1}),
    (torch.concat, [[24, 192, 17, 17], [24, 192, 17, 17], [24, 192, 17, 17], [24, 192, 17, 17]], {"dim": 1}),
    (torch.concat, [[24, 320, 8, 8], [24, 192, 8, 8], [24, 768, 8, 8]], {"dim": 1}),
    (torch.concat, [[24, 320, 8, 8], [24, 384, 8, 8], [24, 384, 8, 8], [24, 384, 8, 8], [24, 384, 8, 8], [24, 192, 8, 8]], {"dim": 1}),
    (torch.concat, [[24, 320, 8, 8], [24, 384, 8, 8], [24, 384, 8, 8], [24, 384, 8, 8], [24, 384, 8, 8], [24, 192, 8, 8]], {"dim": 1}),

    (torch.concat, [[32, 1, 299, 299], [32, 1, 299, 299], [32, 1, 299, 299]], {"dim": 1}),
    (torch.concat, [[32, 64, 35, 35], [32, 64, 35, 35], [32, 96, 35, 35], [32, 32, 35, 35]], {"dim": 1}),
    (torch.concat, [[32, 64, 35, 35], [32, 64, 35, 35], [32, 96, 35, 35], [32, 64, 35, 35]], {"dim": 1}),
    (torch.concat, [[32, 384, 17, 17], [32, 96, 17, 17], [32, 288, 17, 17]], {"dim": 1}),
    (torch.concat, [[32, 192, 17, 17], [32, 192, 17, 17], [32, 192, 17, 17], [32, 192, 17, 17]], {"dim": 1}),
    (torch.concat, [[32, 320, 8, 8], [32, 192, 8, 8], [32, 768, 8, 8]], {"dim": 1}),
    (torch.concat, [[32, 320, 8, 8], [32, 384, 8, 8], [32, 384, 8, 8], [32, 384, 8, 8], [32, 384, 8, 8], [32, 192, 8, 8]], {"dim": 1}),
    (torch.concat, [[32, 320, 8, 8], [32, 384, 8, 8], [32, 384, 8, 8], [32, 384, 8, 8], [32, 384, 8, 8], [32, 192, 8, 8]], {"dim": 1}),

    (torch.concat, [[40, 1, 299, 299], [40, 1, 299, 299], [40, 1, 299, 299]], {"dim": 1}),
    (torch.concat, [[40, 64, 35, 35], [40, 64, 35, 35], [40, 96, 35, 35], [40, 32, 35, 35]], {"dim": 1}),
    (torch.concat, [[40, 64, 35, 35], [40, 64, 35, 35], [40, 96, 35, 35], [40, 64, 35, 35]], {"dim": 1}),
    (torch.concat, [[40, 384, 17, 17], [40, 96, 17, 17], [40, 288, 17, 17]], {"dim": 1}),
    (torch.concat, [[40, 192, 17, 17], [40, 192, 17, 17], [40, 192, 17, 17], [40, 192, 17, 17]], {"dim": 1}),
    (torch.concat, [[40, 320, 8, 8], [40, 192, 8, 8], [40, 768, 8, 8]], {"dim": 1}),
    (torch.concat, [[40, 320, 8, 8], [40, 384, 8, 8], [40, 384, 8, 8], [40, 384, 8, 8], [40, 384, 8, 8], [40, 192, 8, 8]], {"dim": 1}),
    (torch.concat, [[40, 320, 8, 8], [40, 384, 8, 8], [40, 384, 8, 8], [40, 384, 8, 8], [40, 384, 8, 8], [40, 192, 8, 8]], {"dim": 1}),

    (torch.concat, [[48, 1, 299, 299], [48, 1, 299, 299], [48, 1, 299, 299]], {"dim": 1}),
    (torch.concat, [[48, 64, 35, 35], [48, 64, 35, 35], [48, 96, 35, 35], [48, 32, 35, 35]], {"dim": 1}),
    (torch.concat, [[48, 64, 35, 35], [48, 64, 35, 35], [48, 96, 35, 35], [48, 64, 35, 35]], {"dim": 1}),
    (torch.concat, [[48, 384, 17, 17], [48, 96, 17, 17], [48, 288, 17, 17]], {"dim": 1}),
    (torch.concat, [[48, 192, 17, 17], [48, 192, 17, 17], [48, 192, 17, 17], [48, 192, 17, 17]], {"dim": 1}),
    (torch.concat, [[48, 320, 8, 8], [48, 192, 8, 8], [48, 768, 8, 8]], {"dim": 1}),
    (torch.concat, [[48, 320, 8, 8], [48, 384, 8, 8], [48, 384, 8, 8], [48, 384, 8, 8], [48, 384, 8, 8], [48, 192, 8, 8]], {"dim": 1}),
    (torch.concat, [[48, 320, 8, 8], [48, 384, 8, 8], [48, 384, 8, 8], [48, 384, 8, 8], [48, 384, 8, 8], [48, 192, 8, 8]], {"dim": 1}),

    (torch.concat, [[56, 1, 299, 299], [56, 1, 299, 299], [56, 1, 299, 299]], {"dim": 1}),
    (torch.concat, [[56, 64, 35, 35], [56, 64, 35, 35], [56, 96, 35, 35], [56, 32, 35, 35]], {"dim": 1}),
    (torch.concat, [[56, 64, 35, 35], [56, 64, 35, 35], [56, 96, 35, 35], [56, 64, 35, 35]], {"dim": 1}),
    (torch.concat, [[56, 384, 17, 17], [56, 96, 17, 17], [56, 288, 17, 17]], {"dim": 1}),
    (torch.concat, [[56, 192, 17, 17], [56, 192, 17, 17], [56, 192, 17, 17], [56, 192, 17, 17]], {"dim": 1}),
    (torch.concat, [[56, 320, 8, 8], [56, 192, 8, 8], [56, 768, 8, 8]], {"dim": 1}),
    (torch.concat, [[56, 320, 8, 8], [56, 384, 8, 8], [56, 384, 8, 8], [56, 384, 8, 8], [56, 384, 8, 8], [56, 192, 8, 8]], {"dim": 1}),
    (torch.concat, [[56, 320, 8, 8], [56, 384, 8, 8], [56, 384, 8, 8], [56, 384, 8, 8], [56, 384, 8, 8], [56, 192, 8, 8]], {"dim": 1}),

    (torch.concat, [[64, 1, 299, 299], [64, 1, 299, 299], [64, 1, 299, 299]], {"dim": 1}),
    (torch.concat, [[64, 64, 35, 35], [64, 64, 35, 35], [64, 96, 35, 35], [64, 32, 35, 35]], {"dim": 1}),
    (torch.concat, [[64, 64, 35, 35], [64, 64, 35, 35], [64, 96, 35, 35], [64, 64, 35, 35]], {"dim": 1}),
    (torch.concat, [[64, 384, 17, 17], [64, 96, 17, 17], [64, 288, 17, 17]], {"dim": 1}),
    (torch.concat, [[64, 192, 17, 17], [64, 192, 17, 17], [64, 192, 17, 17], [64, 192, 17, 17]], {"dim": 1}),
    (torch.concat, [[64, 320, 8, 8], [64, 192, 8, 8], [64, 768, 8, 8]], {"dim": 1}),
    (torch.concat, [[64, 320, 8, 8], [64, 384, 8, 8], [64, 384, 8, 8], [64, 384, 8, 8], [64, 384, 8, 8], [64, 192, 8, 8]], {"dim": 1}),
    (torch.concat, [[64, 320, 8, 8], [64, 384, 8, 8], [64, 384, 8, 8], [64, 384, 8, 8], [64, 384, 8, 8], [64, 192, 8, 8]], {"dim": 1}),

    (torch.concat, [[1, 64, 56, 56]], {"dim": 1}),
    (torch.concat, [[1, 64, 56, 56], [1, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[1, 64, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[1, 64, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[1, 64, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[1, 64, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[1, 64, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56], [1, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 128, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28], [1, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 256, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14], [1, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[1, 512, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7], [1, 32, 7, 7]], {"dim": 1}),

    (torch.concat, [[2, 64, 56, 56]], {"dim": 1}),
    (torch.concat, [[2, 64, 56, 56], [2, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[2, 64, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[2, 64, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[2, 64, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[2, 64, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[2, 64, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56], [2, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 128, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28], [2, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 256, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14], [2, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[2, 512, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7], [2, 32, 7, 7]], {"dim": 1}),

    (torch.concat, [[4, 64, 56, 56]], {"dim": 1}),
    (torch.concat, [[4, 64, 56, 56], [4, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[4, 64, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[4, 64, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[4, 64, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[4, 64, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[4, 64, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56], [4, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 128, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28], [4, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 256, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14], [4, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[4, 512, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7], [4, 32, 7, 7]], {"dim": 1}),

    (torch.concat, [[8, 64, 56, 56]], {"dim": 1}),
    (torch.concat, [[8, 64, 56, 56], [8, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[8, 64, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[8, 64, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[8, 64, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[8, 64, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[8, 64, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56], [8, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 128, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28], [8, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 256, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14], [8, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[8, 512, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7], [8, 32, 7, 7]], {"dim": 1}),

    (torch.concat, [[16, 64, 56, 56]], {"dim": 1}),
    (torch.concat, [[16, 64, 56, 56], [16, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[16, 64, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[16, 64, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[16, 64, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[16, 64, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[16, 64, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56], [16, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 128, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28], [16, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 256, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14], [16, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[16, 512, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7], [16, 32, 7, 7]], {"dim": 1}),

    (torch.concat, [[24, 64, 56, 56]], {"dim": 1}),
    (torch.concat, [[24, 64, 56, 56], [24, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[24, 64, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[24, 64, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[24, 64, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[24, 64, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[24, 64, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56], [24, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 128, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28], [24, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 256, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14], [24, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[24, 512, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7], [24, 32, 7, 7]], {"dim": 1}),

    (torch.concat, [[32, 64, 56, 56]], {"dim": 1}),
    (torch.concat, [[32, 64, 56, 56], [32, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[32, 64, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[32, 64, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[32, 64, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[32, 64, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[32, 64, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56], [32, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 128, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 256, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14], [32, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[32, 512, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7], [32, 32, 7, 7]], {"dim": 1}),

    (torch.concat, [[40, 64, 56, 56]], {"dim": 1}),
    (torch.concat, [[40, 64, 56, 56], [40, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[40, 64, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[40, 64, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[40, 64, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[40, 64, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[40, 64, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56], [40, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 128, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28], [40, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 256, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14], [40, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[40, 512, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7], [40, 32, 7, 7]], {"dim": 1}),

    (torch.concat, [[48, 64, 56, 56]], {"dim": 1}),
    (torch.concat, [[48, 64, 56, 56], [48, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[48, 64, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[48, 64, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[48, 64, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[48, 64, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[48, 64, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56], [48, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 128, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28], [48, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 256, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14], [48, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[48, 512, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7], [48, 32, 7, 7]], {"dim": 1}),

    (torch.concat, [[56, 64, 56, 56]], {"dim": 1}),
    (torch.concat, [[56, 64, 56, 56], [56, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[56, 64, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[56, 64, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[56, 64, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[56, 64, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[56, 64, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56], [56, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 128, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28], [56, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 256, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14], [56, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[56, 512, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7], [56, 32, 7, 7]], {"dim": 1}),

    (torch.concat, [[64, 64, 56, 56]], {"dim": 1}),
    (torch.concat, [[64, 64, 56, 56], [64, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[64, 64, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[64, 64, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[64, 64, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[64, 64, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[64, 64, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56], [64, 32, 56, 56]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 128, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28], [64, 32, 28, 28]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 256, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14], [64, 32, 14, 14]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),
    (torch.concat, [[64, 512, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7], [64, 32, 7, 7]], {"dim": 1}),

        ]

BINARY_OPS_TO_MEASURE = [
    (torch.add, [1, 512, 7, 7], [1, 512, 7, 7], {}),
    (torch.add, [1, 64, 56, 56], [1, 64, 56, 56], {}),
    (torch.add, [1, 128, 28, 28], [1, 128, 28, 28], {}),
    (torch.add, [1, 256, 14, 14], [1, 256, 14, 14], {}),
    (torch.add, [1, 512, 7, 7], [1, 512, 7, 7], {}),
    (torch.add, [1, 192, 64], [1, 192, 1], {}),
    (torch.add, [1, 448, 64], [1, 448, 1], {}),
    (torch.add, [1, 384, 64], [1, 384, 1], {}),
    (torch.add, [1, 320, 64], [1, 320, 1], {}),
    (torch.add, [1, 192, 64], [1, 192, 1], {}),
    (torch.add, [1, 160, 64], [1, 160, 1], {}),
    (torch.add, [1, 128, 64], [1, 128, 1], {}),
    (torch.add, [1, 64, 64], [1, 64, 1], {}),
    (torch.add, [1, 32, 64], [1, 32, 1], {}),
    (torch.add, [1, 80, 64], [1, 80, 1], {}),
    (torch.add, [1, 48, 64], [1, 48, 1], {}),
    (torch.add, [1, 1, 299, 299], [1, 1, 299, 299], {}),
    (torch.add, [1, 1, 299, 299], [], {}),
    (torch.mul, [1, 1, 299, 299], [1, 1, 299, 299], {}),
    (torch.mul, [1, 1, 299, 299], [], {}),
    (_Pow, [1, 197, 768], [], {}),
    (torch.gather, [1, 3, 299, 299], [1, 1, 299, 299], {"dim":1}),
    (_unsqueeze, [1, 299, 299], [1], {}),
]

UNARY_OPS_TO_MEASURE = [
    (torch.nn.functional.softmax, [1, 10], {"dim":1}),
    (torch.nn.functional.softmax, [1, 20], {"dim":1}),
    (torch.nn.functional.softmax, [1, 1000], {"dim":1}),
    (torch.nn.functional.softmax, [1, 1001], {"dim":1}),
    (torch.nn.functional.softmax, [1, 16, 384, 384], {"dim":1}),
    (torch.nn.functional.softmax, [1, 384, 384], {"dim":1}),
    (torch.nn.functional.softmax, [1, 1, 1], {"dim":1}),
    (torch.nn.functional.softmax, [1, 197, 197], {"dim":1}),
    (torch.exp, [16, 17], {}),
    (torch.exp, [17, 16], {}),
    (torch.relu, [1, 128], {}),
    (torch.sqrt, [1, 384, 1], {}),
    (torch.erf, [1, 384, 4096], {}),
    (torch.relu, [1, 64, 112, 112], {}),
    (torch.relu, [1, 64, 56, 56], {}),
    (torch.relu, [1, 128, 56, 56], {}),
    (torch.relu, [1, 256, 56, 56], {}),
    (torch.relu, [1, 128, 28, 28], {}),
    (torch.relu, [1, 256, 28, 28], {}),
    (torch.relu, [1, 512, 28, 28], {}),
    (torch.relu, [1, 256, 14, 14], {}),
    (torch.relu, [1, 512, 14, 14], {}),
    (torch.relu, [1, 1024, 14, 14], {}),
    (torch.relu, [1, 512, 7, 7], {}),
    (torch.relu, [1, 1024, 7, 7], {}),
    (torch.relu, [1, 2048, 7, 7], {}),
    (torch.relu, [1, 192, 8, 8], {}),
    (torch.relu, [1, 320, 8, 8], {}),
    (torch.relu, [1, 384, 8, 8], {}),
    (torch.relu, [1, 448, 8, 8], {}),
    (torch.relu, [1, 384, 17, 17], {}),
    (torch.relu, [1, 192, 17, 17], {}),
    (torch.relu, [1, 160, 17, 17], {}),
    (torch.relu, [1, 128, 17, 17], {}),
    (torch.relu, [1, 96, 17, 17], {}),
    (torch.relu, [1, 96, 35, 35], {}),
    (torch.relu, [1, 64, 35, 35], {}),
    (torch.relu, [1, 48, 35, 35], {}),
    (torch.relu, [1, 32, 35, 35], {}),
    (torch.relu, [1, 192, 71, 71], {}),
    (torch.relu, [1, 80, 73, 73], {}),
    (torch.relu, [1, 64, 147, 147], {}),
    (torch.relu, [1, 32, 147, 147], {}),
    (torch.relu, [1, 32, 149, 149], {}),
    (torch.relu, [1, 96, 56, 56], {}),
    (torch.relu, [1, 160, 56, 56], {}),
    (torch.relu, [1, 192, 56, 56], {}),
    (torch.relu, [1, 224, 56, 56], {}),
    (torch.relu, [1, 160, 28, 28], {}),
    (torch.relu, [1, 192, 28, 28], {}),
    (torch.relu, [1, 224, 28, 28], {}),
    (torch.relu, [1, 288, 28, 28], {}),
    (torch.relu, [1, 320, 28, 28], {}),
    (torch.relu, [1, 352, 28, 28], {}),
    (torch.relu, [1, 384, 28, 28], {}),
    (torch.relu, [1, 416, 28, 28], {}),
    (torch.relu, [1, 448, 28, 28], {}),
    (torch.relu, [1, 480, 28, 28], {}),
    (torch.relu, [1, 128, 14, 14], {}),
    (torch.relu, [1, 288, 14, 14], {}),
    (torch.relu, [1, 320, 14, 14], {}),
    (torch.relu, [1, 352, 14, 14], {}),
    (torch.relu, [1, 384, 14, 14], {}),
    (torch.relu, [1, 416, 14, 14], {}),
    (torch.relu, [1, 448, 14, 14], {}),
    (torch.relu, [1, 480, 14, 14], {}),
    (torch.relu, [1, 512, 14, 14], {}),
    (torch.relu, [1, 544, 14, 14], {}),
    (torch.relu, [1, 576, 14, 14], {}),
    (torch.relu, [1, 608, 14, 14], {}),
    (torch.relu, [1, 640, 14, 14], {}),
    (torch.relu, [1, 672, 14, 14], {}),
    (torch.relu, [1, 704, 14, 14], {}),
    (torch.relu, [1, 736, 14, 14], {}),
    (torch.relu, [1, 768, 14, 14], {}),
    (torch.relu, [1, 800, 14, 14], {}),
    (torch.relu, [1, 832, 14, 14], {}),
    (torch.relu, [1, 864, 14, 14], {}),
    (torch.relu, [1, 896, 14, 14], {}),
    (torch.relu, [1, 928, 14, 14], {}),
    (torch.relu, [1, 960, 14, 14], {}),
    (torch.relu, [1, 992, 14, 14], {}),
    (torch.relu, [1, 1024, 14, 14], {}),
    (torch.relu, [1, 128, 7, 7], {}),
    (torch.relu, [1, 288, 7, 7], {}),
    (torch.relu, [1, 320, 7, 7], {}),
    (torch.relu, [1, 352, 7, 7], {}),
    (torch.relu, [1, 384, 7, 7], {}),
    (torch.relu, [1, 416, 7, 7], {}),
    (torch.relu, [1, 448, 7, 7], {}),
    (torch.relu, [1, 480, 7, 7], {}),
    (torch.relu, [1, 512, 7, 7], {}),
    (torch.relu, [1, 544, 7, 7], {}),
    (torch.relu, [1, 576, 7, 7], {}),
    (torch.relu, [1, 608, 7, 7], {}),
    (torch.relu, [1, 640, 7, 7], {}),
    (torch.relu, [1, 672, 7, 7], {}),
    (torch.relu, [1, 704, 7, 7], {}),
    (torch.relu, [1, 736, 7, 7], {}),
    (torch.relu, [1, 768, 7, 7], {}),
    (torch.relu, [1, 800, 7, 7], {}),
    (torch.relu, [1, 832, 7, 7], {}),
    (torch.relu, [1, 864, 7, 7], {}),
    (torch.relu, [1, 896, 7, 7], {}),
    (torch.relu, [1, 928, 7, 7], {}),
    (torch.relu, [1, 960, 7, 7], {}),
    (torch.relu, [1, 992, 7, 7], {}),
    (torch.relu, [1, 1024, 7, 7], {}),
    (torch.relu, [1, 64, 224, 224], {}),
    (torch.relu, [1, 128, 112, 112], {}),
    (torch.relu, [1, 1024], {}),
    (torch.relu, [1, 4096], {}),

    (_transpose12, [1, 384, 16, 64], {}),
    (_transpose12, [1, 16, 384, 64], {}),
    (_transpose12, [1, 384, 8, 64], {}),
    (_transpose12, [1, 8, 384, 64], {}),
    (_transpose12, [1, 384, 64], {}),
    (_transpose12, [1, 64, 384], {}),

    (_maxpool, [1, 1, 28, 28], {}),
    (_maxpool, [1, 64, 112, 112], {}),
    (_maxpool, [1, 128, 112, 112], {}),
    (_maxpool, [1, 256, 56, 56], {}),
    (_avgpool2, [1, 128, 56, 56], {}),
    (_avgpool2, [1, 256, 28, 28], {}),
    (_avgpool2, [1, 512, 14, 14], {}),
    (_maxpool, [1, 512, 28, 28], {}),
    (_maxpool, [1, 512, 14, 14], {}),
    (_maxpool, [1, 64, 224, 224], {}),
    (_avgpool, [1, 2048, 8, 8], {}),
    (_maxpool, [1, 2048, 8, 8], {}),
    (_avgpool, [1, 1280, 8, 8], {}),
    (_maxpool, [1, 1280, 8, 8], {}),
    (_avgpool, [1, 64, 147, 147], {}),
    (_maxpool, [1, 64, 147, 147], {}),
    (_avgpool, [1, 192, 71, 71], {}),
    (_maxpool, [1, 192, 71, 71], {}),
    (_avgpool, [1, 192, 35, 35], {}),
    (_maxpool, [1, 192, 35, 35], {}),
    (_avgpool, [1, 256, 35, 35], {}),
    (_maxpool, [1, 256, 35, 35], {}),
    (_avgpool, [1, 288, 35, 35], {}),
    (_maxpool, [1, 288, 35, 35], {}),
    (_avgpool, [1, 768, 17, 17], {}),
    (_maxpool, [1, 768, 17, 17], {}),
    (_reducemean, [1, 512, 7, 7], {}),
    (_reducemean, [1, 2048, 7, 7], {}),
    (_reducemean, [1, 1024, 7, 7], {}),
    (_reducemean, [1, 1280, 7, 7], {}),
    (_reducemean, [1, 2048, 8, 8], {}),
    (_reducemean, [1, 384, 1024], {}),
    (torch.flatten, [1, 512, 1, 1], {"start_dim": 1}),
    (torch.flatten, [1, 512, 7, 7], {"start_dim": 1}),
    (torch.flatten, [1, 2048, 1, 1], {"start_dim": 1}),
    (torch.flatten, [1, 1024, 1, 1], {"start_dim": 1}),
    # (_cast, [1, 1, 1, 384], {}),

    (_pow, [1, 384, 1024], {}),
    (_pow, [1, 384, 512], {}),

    (_Sqrt, [1, 197, 1], {}),
    (_Erf, [1, 197, 3072], {}),
    (_Sigmoid, [1, 384, 2048], {}),
]

# BATCH_SIZE_CANDIDATES = [1, 2, 4, 8] + [16*k for k in range(256)]
# BATCH_SIZE_CANDIDATES = [1, 2, 4, 8, 16, 32] + [64*(k+1) for k in range(16)]
# BATCH_SIZE_CANDIDATES = [80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256]
BATCH_SIZE_CANDIDATES = [1, 2, 4, 8, 16, 24, 32, 40, 48, 56, 64]


def black_box_unary(fn, arg, arg_dict, ntimes=3):
    timetraces = []
    for i in range(ntimes):
        start = time.time()
        _ = fn(arg, **arg_dict)
        end = time.time()
        duration = end - start
        timetraces.append(duration*1000*1000)
    return timetraces

def black_box_binary(fn, lhs, rhs, arg_dict, ntimes=3):
    timetraces = []
    for i in range(ntimes):
        start = time.time()
        if fn.__name__ == "gather":
            _ = fn(lhs, 1, rhs)
        else:
            _ = fn(lhs, rhs, **arg_dict)
        end = time.time()
        duration = end - start
        timetraces.append(duration*1000*1000)
    return timetraces

# 12 : sec ; 9 : ms ; 6 : us ; 3 : ns ; 0 : ps
def profile_stats(timetraces):
    # gen statistics, use mean currently, and std
    # maybe need more in future to analysis uncertainty of performances
    return (mean(timetraces), stdev(timetraces))

def tensor_gen(shape):
    matrix = torch.rand(list(shape)).float();
    return(matrix)

def gen_query_key_unary(operation, arg_shape, arg_dict):
    op_str = operation.__name__
    arg_shape_str = ""
    out_shape_str = ""

    # infer out shape
    arg = tensor_gen(arg_shape)
    out_placeholder = operation(arg, **arg_dict)
    out_shape = out_placeholder.shape

    for dim in arg_shape:
        arg_shape_str += "x{}".format(dim)

    for dim in out_shape:
        out_shape_str += "x{}".format(dim)

    perf_key = op_str + "-" + arg_shape_str[1:] + "-" + out_shape_str[1:]
    # special process to use proper name
    # perf_key = perf_key.replace("linear", "gemm")
    return perf_key

def gen_query_key_binary(operation, lhs_shape, rhs_shape, arg_dict):
    op_str = operation.__name__
    lhs_shape_str = ""
    rhs_shape_str = ""
    out_shape_str = ""

    if operation.__name__ == "gather":
        _rhs = torch.randint(0, 3, rhs_shape)

    _rhs_shape = rhs_shape.copy()
    if operation.__name__ == "linear" and len(rhs_shape) == 3:
        rhs_shape = [rhs_shape[0]*rhs_shape[2], rhs_shape[1]]

    # infer out shape
    lhs = tensor_gen(lhs_shape)
    rhs = tensor_gen(rhs_shape)
    if operation.__name__ == "gather":
        out_placeholder = operation(lhs, 1, _rhs)
    else:
        out_placeholder = operation(lhs, rhs, **arg_dict)


    out_shape = out_placeholder.shape

    for dim in lhs_shape:
        lhs_shape_str += "x{}".format(dim)

    if operation.__name__ == "linear" and len(_rhs_shape) == 3:
        rhs_shape = _rhs_shape
        out_shape = [rhs_shape[0], lhs_shape[0], rhs_shape[2]]

    if operation.__name__ == "gather":
        rhs_shape_str += "x"
    else:
        for dim in rhs_shape:
            rhs_shape_str += "x{}".format(dim)

    if operation.__name__ == "gather":
        for dim in out_shape:
            if dim is not 1:
                out_shape_str += "x{}".format(dim)
    else:
        for dim in out_shape:
            out_shape_str += "x{}".format(dim)

    perf_key = op_str + "-" + lhs_shape_str[1:] + "-" + rhs_shape_str[1:] + "-" + out_shape_str[1:]
    # special process to use proper name
    perf_key = perf_key.replace("linear", "matmul")
    return perf_key

def gen_query_key_variant(operation, arg_shapes, arg_dict):
    op_str = operation.__name__
    arg_shape_str = ""
    out_shape_str = ""

    # infer out shape
    arglist = []
    for arg_shape in arg_shapes:
        arglist.append(tensor_gen(arg_shape))
    out_placeholder = operation(arglist, **arg_dict)
    out_shape = out_placeholder.shape

    for arg_shape in arg_shapes:
        _arg_shape_str = ""
        for dim in arg_shape:
            _arg_shape_str += "x{}".format(dim)
        arg_shape_str += "-{}".format(_arg_shape_str[1:])

    for dim in out_shape:
        out_shape_str += "x{}".format(dim)

    perf_key = op_str + arg_shape_str + "-" + out_shape_str[1:]
    # special process to use proper name
    # print(perf_key)
    return perf_key

def gen_query_key_tenary(operation, lhs_shape, rhs_shape, bias_shape, arg_dict):
    op_str = operation.__name__
    lhs_shape_str = ""
    rhs_shape_str = ""
    bias_shape_str = ""
    out_shape_str = ""

    # arg_dict = {"stride": [2, 2], "padding": [3, 3]}
    # print(arg_dict)

    # infer out shape
    lhs = tensor_gen(lhs_shape)
    rhs = tensor_gen(rhs_shape)
    out_placeholder = operation(lhs, rhs, **arg_dict)
    # print("out {}".format(out_placeholder.shape))
    out_shape = out_placeholder.shape

    for dim in lhs_shape:
        lhs_shape_str += "x{}".format(dim)

    for dim in rhs_shape:
        rhs_shape_str += "x{}".format(dim)

    for dim in bias_shape:
        bias_shape_str += "x{}".format(dim)

    for dim in out_shape:
        out_shape_str += "x{}".format(dim)

    perf_key = op_str + "-" + lhs_shape_str[1:] + "-" + rhs_shape_str[1:] + "-" + bias_shape_str[1:] + "-" + out_shape_str[1:]
    # special process to use proper name
    perf_key = perf_key.replace("linear", "gemm")
    perf_key = perf_key.replace("conv2d", "convadd")
    # print(perf_key)
    return perf_key

def gen_perf_query_entry_unary(operation, arg_shape, arg_dict):
    arg = tensor_gen(arg_shape)

    # support dispatch and config
    timetraces = black_box_unary(operation, arg, arg_dict)
    mean, std = profile_stats(timetraces)
    return (mean, std)

def gen_perf_query_entry_binary(operation, lhs_shape, rhs_shape, arg_dict):
    if operation.__name__ == "linear" and len(rhs_shape) == 3:
        rhs_shape = [rhs_shape[0]*rhs_shape[2], rhs_shape[1]]

    lhs = tensor_gen(lhs_shape)
    rhs = tensor_gen(rhs_shape)

    if operation.__name__ == "gather":
        rhs = torch.randint(0, 3, lhs_shape)

    # support dispatch and config
    timetraces = black_box_binary(operation, lhs, rhs, arg_dict)
    mean, std = profile_stats(timetraces)
    return (mean, std)

def gen_perf_query_entry_variant(operation, arg_shapes, arg_dict):
    arglist = []
    for arg_shape in arg_shapes:
        arglist.append(tensor_gen(arg_shape))

    # support dispatch and config
    timetraces = black_box_unary(operation, arglist, arg_dict)
    mean, std = profile_stats(timetraces)
    return (mean, std)

# unit = ms
def gen_value_insert_action(query_key, mean, stdev):
    return "this->atomic_cost.insert(std::make_pair(StringRef(\"" + query_key + "\"), " + "{}".format(mean) + "));\nthis->atomic_uncertainty.insert(std::make_pair(StringRef(\"" + query_key + "\"), " + "{}".format(stdev) + "));\n"

def gen_value_insert_action_real(query_key, mean, stdev):
    return "this->real_atomic_cost.insert(std::make_pair(StringRef(\"" + query_key + "\"), " + "{}".format(mean) + "));\nthis->real_atomic_uncertainty.insert(std::make_pair(StringRef(\"" + query_key + "\"), " + "{}".format(stdev) + "));\n"

    # gen_inc_file("CrtOpsCPUCostsU35.cpp.inc", 1.0, 0.35)
    # gen_inc_file("CrtOpsGPUTypeACostsU35.cpp.inc", 3.1, 0.35)
    # gen_inc_file("CrtOpsGPUTypeBCostsU35.cpp.inc", 4.7, 0.35)
    # gen_inc_file("CrtOpsGPUTypeCCostsU35.cpp.inc", 1.7, 0.35)
    # gen_inc_file("CrtOpsGPUTypeDCostsU35.cpp.inc", 2.3, 0.35)
    # #
    # # # Actualuncertainty
    # gen_inc_file_real("RealCrtOpsCPUCosts.cpp.inc", 1.0)
    # gen_inc_file_real("RealCrtOpsGPUTypeACosts.cpp.inc", 3.1)
    # gen_inc_file_real("RealCrtOpsGPUTypeBCosts.cpp.inc", 4.7)
    # gen_inc_file_real("RealCrtOpsGPUTypeCCosts.cpp.inc", 1.7)
    # gen_inc_file_real("RealCrtOpsGPUTypeDCosts.cpp.inc", 2.3)
def gen_cost_model(filename, compute_power):
    print("{} processing {}".format(datetime.now(), filename))
    gen_file_str_real = GEN_FILE_HEADER
    gen_file_str_u0 = GEN_FILE_HEADER
    gen_file_str_u5 = GEN_FILE_HEADER
    gen_file_str_u10 = GEN_FILE_HEADER
    gen_file_str_u15 = GEN_FILE_HEADER
    gen_file_str_u20 = GEN_FILE_HEADER
    print("{} handle custom op".format(datetime.now()))
    gen_file_str_real += custom_op_gen(True, compute_power, 0.00)
    gen_file_str_u0 += custom_op_gen(False, compute_power, 0.00)
    gen_file_str_u5 += custom_op_gen(False, compute_power, 0.05)
    gen_file_str_u10 += custom_op_gen(False, compute_power, 0.1)
    gen_file_str_u15 += custom_op_gen(False, compute_power, 0.15)
    gen_file_str_u20 += custom_op_gen(False, compute_power, 0.2)
    print("{} handle unary op".format(datetime.now()))
    for (operation, arg_shape, arg_dict) in UNARY_OPS_TO_MEASURE:
        # print("{}".format(operation))
        original_bs = arg_shape[0]
        for batch_size in BATCH_SIZE_CANDIDATES:
            arg_shape[0] = original_bs * batch_size

            query_key = gen_query_key_unary(operation, arg_shape, arg_dict)
            # print(query_key)
            _mean, _stdev = gen_perf_query_entry_unary(operation, arg_shape, arg_dict)

            # consider heterogenous
            # hardcode 10% ratio of uncertainty
            _dice = np.random.randn()
            _mean_real = _mean / compute_power
            _mean_u0 = _mean / compute_power
            _mean_u5 = (_mean / compute_power) * (1.0 + 0.05 * _dice)
            _mean_u10 = (_mean / compute_power) * (1.0 + 0.10 * _dice)
            _mean_u15 = (_mean / compute_power) * (1.0 + 0.15 * _dice)
            _mean_u20 = (_mean / compute_power) * (1.0 + 0.20 * _dice)

            gen_cppinc_item_real = gen_value_insert_action_real(query_key, _mean_real, _stdev);
            gen_cppinc_item_u0 = gen_value_insert_action(query_key, _mean_u0, _stdev);
            gen_cppinc_item_u5 = gen_value_insert_action(query_key, _mean_u5, _stdev);
            gen_cppinc_item_u10 = gen_value_insert_action(query_key, _mean_u10, _stdev);
            gen_cppinc_item_u15 = gen_value_insert_action(query_key, _mean_u15, _stdev);
            gen_cppinc_item_u20 = gen_value_insert_action(query_key, _mean_u20, _stdev);
            # print(gen_cppinc_item)

            gen_file_str_real += gen_cppinc_item_real
            gen_file_str_u0  += gen_cppinc_item_u0 
            gen_file_str_u5  += gen_cppinc_item_u5 
            gen_file_str_u10 += gen_cppinc_item_u10
            gen_file_str_u15 += gen_cppinc_item_u15
            gen_file_str_u20 += gen_cppinc_item_u20
        # reset shape
        arg_shape[0] = original_bs
    print("{} handle binary op".format(datetime.now()))
    for (operation, lhs_shape, rhs_shape, arg_dict) in BINARY_OPS_TO_MEASURE:
        # print("{}".format(operation))
        original_bs = lhs_shape[0]
        if operation.__name__ == "add" or operation.__name__ == "gather":
            if len(rhs_shape) > 0:
                original_bs_rhs = rhs_shape[0]
        for batch_size in BATCH_SIZE_CANDIDATES:
            lhs_shape[0] = original_bs * batch_size
            if operation.__name__ == "add" or operation.__name__ == "gather":
                if len(rhs_shape) > 0:
                    rhs_shape[0] = original_bs_rhs * batch_size

                    query_key = gen_query_key_binary(operation, lhs_shape, [1, *rhs_shape[1:]], arg_dict)
                    # print(query_key)
                    _mean, _stdev = gen_perf_query_entry_binary(operation, lhs_shape, [1, *rhs_shape[1:]], arg_dict)

                    _dice = np.random.randn()
                    _mean_real = _mean / compute_power
                    _mean_u0 = _mean / compute_power
                    _mean_u5 = (_mean / compute_power) * (1.0 + 0.05 * _dice)
                    _mean_u10 = (_mean / compute_power) * (1.0 + 0.10 * _dice)
                    _mean_u15 = (_mean / compute_power) * (1.0 + 0.15 * _dice)
                    _mean_u20 = (_mean / compute_power) * (1.0 + 0.20 * _dice)

                    gen_cppinc_item_real = gen_value_insert_action_real(query_key, _mean_real, _stdev);
                    gen_cppinc_item_u0 = gen_value_insert_action(query_key, _mean_u0, _stdev);
                    gen_cppinc_item_u5 = gen_value_insert_action(query_key, _mean_u5, _stdev);
                    gen_cppinc_item_u10 = gen_value_insert_action(query_key, _mean_u10, _stdev);
                    gen_cppinc_item_u15 = gen_value_insert_action(query_key, _mean_u15, _stdev);
                    gen_cppinc_item_u20 = gen_value_insert_action(query_key, _mean_u20, _stdev);
                    # print(gen_cppinc_item)

                    gen_file_str_real += gen_cppinc_item_real
                    gen_file_str_u0  += gen_cppinc_item_u0 
                    gen_file_str_u5  += gen_cppinc_item_u5 
                    gen_file_str_u10 += gen_cppinc_item_u10
                    gen_file_str_u15 += gen_cppinc_item_u15
                    gen_file_str_u20 += gen_cppinc_item_u20

            query_key = gen_query_key_binary(operation, lhs_shape, rhs_shape, arg_dict)
            # print(query_key)
            _mean, _stdev = gen_perf_query_entry_binary(operation, lhs_shape, rhs_shape, arg_dict)

            _dice = np.random.randn()
            _mean_real = _mean / compute_power
            _mean_u0 = _mean / compute_power
            _mean_u5 = (_mean / compute_power) * (1.0 + 0.05 * _dice)
            _mean_u10 = (_mean / compute_power) * (1.0 + 0.10 * _dice)
            _mean_u15 = (_mean / compute_power) * (1.0 + 0.15 * _dice)
            _mean_u20 = (_mean / compute_power) * (1.0 + 0.20 * _dice)

            gen_cppinc_item_real = gen_value_insert_action_real(query_key, _mean_real, _stdev);
            gen_cppinc_item_u0 = gen_value_insert_action(query_key, _mean_u0, _stdev);
            gen_cppinc_item_u5 = gen_value_insert_action(query_key, _mean_u5, _stdev);
            gen_cppinc_item_u10 = gen_value_insert_action(query_key, _mean_u10, _stdev);
            gen_cppinc_item_u15 = gen_value_insert_action(query_key, _mean_u15, _stdev);
            gen_cppinc_item_u20 = gen_value_insert_action(query_key, _mean_u20, _stdev);
            # print(gen_cppinc_item)

            gen_file_str_real += gen_cppinc_item_real
            gen_file_str_u0  += gen_cppinc_item_u0 
            gen_file_str_u5  += gen_cppinc_item_u5 
            gen_file_str_u10 += gen_cppinc_item_u10
            gen_file_str_u15 += gen_cppinc_item_u15
            gen_file_str_u20 += gen_cppinc_item_u20

        lhs_shape[0] = original_bs
        if operation.__name__ == "add" or operation.__name__ == "gather":
            if len(rhs_shape) > 0: 
                rhs_shape[0] = original_bs_rhs

    print("{} handle tenary op".format(datetime.now()))
    for (operation, lhs_shape, rhs_shape, bias_shape, arg_dict) in TENARY_OPS_TO_MEASURE:
        # print("op {}".format(operation))
        # print("lhs {}".format(lhs_shape))
        # print("rhs {}".format(rhs_shape))
        original_bs = lhs_shape[0]
        for batch_size in BATCH_SIZE_CANDIDATES:
            # special handle conv just to 256
            if operation.__name__ == "conv2d" and batch_size > 256:
                continue
            lhs_shape[0] = original_bs * batch_size

            query_key = gen_query_key_tenary(operation, lhs_shape, rhs_shape, bias_shape, arg_dict)
            _mean, _stdev = gen_perf_query_entry_binary(operation, lhs_shape, rhs_shape, arg_dict)

            _dice = np.random.randn()
            _mean_real = _mean / compute_power
            _mean_u0 = _mean / compute_power
            _mean_u5 = (_mean / compute_power) * (1 + 0.05 * _dice)
            _mean_u10 = (_mean / compute_power) * (1 + 0.10 * _dice)
            _mean_u15 = (_mean / compute_power) * (1 + 0.15 * _dice)
            _mean_u20 = (_mean / compute_power) * (1 + 0.20 * _dice)

            gen_cppinc_item_real = gen_value_insert_action_real(query_key, _mean_real, _stdev);
            gen_cppinc_item_u0 = gen_value_insert_action(query_key, _mean_u0, _stdev);
            gen_cppinc_item_u5 = gen_value_insert_action(query_key, _mean_u5, _stdev);
            gen_cppinc_item_u10 = gen_value_insert_action(query_key, _mean_u10, _stdev);
            gen_cppinc_item_u15 = gen_value_insert_action(query_key, _mean_u15, _stdev);
            gen_cppinc_item_u20 = gen_value_insert_action(query_key, _mean_u20, _stdev);
            # print(gen_cppinc_item)

            gen_file_str_real += gen_cppinc_item_real
            gen_file_str_u0  += gen_cppinc_item_u0 
            gen_file_str_u5  += gen_cppinc_item_u5 
            gen_file_str_u10 += gen_cppinc_item_u10
            gen_file_str_u15 += gen_cppinc_item_u15
            gen_file_str_u20 += gen_cppinc_item_u20

        lhs_shape[0] = original_bs

    print("{} handle variant op".format(datetime.now()))
    for (operation, arg_shapes, arg_dict) in VARIANT_OPS_TO_MEASURE:
        query_key = gen_query_key_variant(operation, arg_shapes, arg_dict)
        _mean, _stdev = gen_perf_query_entry_variant(operation, arg_shapes, arg_dict)

        _dice = np.random.randn()
        _mean_real = _mean / compute_power
        _mean_u0 = _mean / compute_power
        _mean_u5 = (_mean / compute_power) * (1 + 0.05 * _dice)
        _mean_u10 = (_mean / compute_power) * (1 + 0.10 * _dice)
        _mean_u15 = (_mean / compute_power) * (1 + 0.15 * _dice)
        _mean_u20 = (_mean / compute_power) * (1 + 0.20 * _dice)

        gen_cppinc_item_real = gen_value_insert_action_real(query_key, _mean_real, _stdev);
        gen_cppinc_item_u0 = gen_value_insert_action(query_key, _mean_u0, _stdev);
        gen_cppinc_item_u5 = gen_value_insert_action(query_key, _mean_u5, _stdev);
        gen_cppinc_item_u10 = gen_value_insert_action(query_key, _mean_u10, _stdev);
        gen_cppinc_item_u15 = gen_value_insert_action(query_key, _mean_u15, _stdev);
        gen_cppinc_item_u20 = gen_value_insert_action(query_key, _mean_u20, _stdev);
        # print(gen_cppinc_item)

        gen_file_str_real += gen_cppinc_item_real
        gen_file_str_u0  += gen_cppinc_item_u0 
        gen_file_str_u5  += gen_cppinc_item_u5 
        gen_file_str_u10 += gen_cppinc_item_u10
        gen_file_str_u15 += gen_cppinc_item_u15
        gen_file_str_u20 += gen_cppinc_item_u20


    gen_file_str_real += GEN_FILE_TAIL
    gen_file_str_u0   += GEN_FILE_TAIL
    gen_file_str_u5   += GEN_FILE_TAIL
    gen_file_str_u10  += GEN_FILE_TAIL
    gen_file_str_u15  += GEN_FILE_TAIL
    gen_file_str_u20  += GEN_FILE_TAIL

    writer_real = open("Real{}.cpp.inc".format(filename), "w")
    writer_real.write(gen_file_str_real)
    writer_real.close()

    writer_u0 = open("{}U0.cpp.inc".format(filename), "w")
    writer_u0.write(gen_file_str_real)
    writer_u0.close()

    writer_u5 = open("{}U5.cpp.inc".format(filename), "w")
    writer_u5.write(gen_file_str_real)
    writer_u5.close()

    writer_u10 = open("{}U10.cpp.inc".format(filename), "w")
    writer_u10.write(gen_file_str_real)
    writer_u10.close()

    writer_u15 = open("{}U15.cpp.inc".format(filename), "w")
    writer_u15.write(gen_file_str_real)
    writer_u15.close()

    writer_u20 = open("{}U20.cpp.inc".format(filename), "w")
    writer_u20.write(gen_file_str_real)
    writer_u20.close()

def gen_inc_file_real(filename, compute_power):
    print("{} processing {}".format(datetime.now(), filename))
    gen_file_str = GEN_FILE_HEADER
    print("{} handle custom op".format(datetime.now()))
    gen_file_str += custom_op_gen(True, 1.0, 0.0)
    print("{} handle unary op".format(datetime.now()))
    for (operation, arg_shape, arg_dict) in UNARY_OPS_TO_MEASURE:
        # print("{}".format(operation))
        original_bs = arg_shape[0]
        for batch_size in BATCH_SIZE_CANDIDATES:
            arg_shape[0] = original_bs * batch_size

            query_key = gen_query_key_unary(operation, arg_shape, arg_dict)
            # print(query_key)
            _mean, _stdev = gen_perf_query_entry_unary(operation, arg_shape, arg_dict)

            # consider heterogenous
            # hardcode 10% ratio of uncertainty
            _mean = _mean / compute_power

            gen_cppinc_item = gen_value_insert_action_real(query_key, _mean, _stdev);
            # print(gen_cppinc_item)

            gen_file_str += gen_cppinc_item
        # reset shape
        arg_shape[0] = original_bs
    print("{} handle binary op".format(datetime.now()))
    for (operation, lhs_shape, rhs_shape, arg_dict) in BINARY_OPS_TO_MEASURE:
        # print("{}".format(operation))
        original_bs = lhs_shape[0]
        if operation.__name__ == "add" or operation.__name__ == "gather":
            if len(rhs_shape) > 0:
                original_bs_rhs = rhs_shape[0]
        for batch_size in BATCH_SIZE_CANDIDATES:
            lhs_shape[0] = original_bs * batch_size
            if operation.__name__ == "add" or operation.__name__ == "gather":
                if len(rhs_shape) > 0:
                    rhs_shape[0] = original_bs_rhs * batch_size

                    query_key = gen_query_key_binary(operation, lhs_shape, [1, *rhs_shape[1:]], arg_dict)
                    # print(query_key)
                    _mean, _stdev = gen_perf_query_entry_binary(operation, lhs_shape, [1, *rhs_shape[1:]], arg_dict)

                    # consider heterogenous
                    # hardcode 10% ratio of uncertainty
                    _mean = _mean / compute_power

                    gen_cppinc_item = gen_value_insert_action_real(query_key, _mean, _stdev);
                    # print(gen_cppinc_item)

            gen_file_str += gen_cppinc_item

            query_key = gen_query_key_binary(operation, lhs_shape, rhs_shape, arg_dict)
            # print(query_key)
            _mean, _stdev = gen_perf_query_entry_binary(operation, lhs_shape, rhs_shape, arg_dict)

            # consider heterogenous
            # hardcode 10% ratio of uncertainty
            _mean = _mean / compute_power

            gen_cppinc_item = gen_value_insert_action_real(query_key, _mean, _stdev);
            # print(gen_cppinc_item)

            gen_file_str += gen_cppinc_item
        lhs_shape[0] = original_bs
        if operation.__name__ == "add" or operation.__name__ == "gather":
            if len(rhs_shape) > 0: 
                rhs_shape[0] = original_bs_rhs

    print("{} handle tenary op".format(datetime.now()))
    for (operation, lhs_shape, rhs_shape, bias_shape, arg_dict) in TENARY_OPS_TO_MEASURE:
        # print("op {}".format(operation))
        # print("lhs {}".format(lhs_shape))
        # print("rhs {}".format(rhs_shape))
        original_bs = lhs_shape[0]
        for batch_size in BATCH_SIZE_CANDIDATES:
            # special handle conv just to 256
            if operation.__name__ == "conv2d" and batch_size > 256:
                continue
            lhs_shape[0] = original_bs * batch_size

            query_key = gen_query_key_tenary(operation, lhs_shape, rhs_shape, bias_shape, arg_dict)
            _mean, _stdev = gen_perf_query_entry_binary(operation, lhs_shape, rhs_shape, arg_dict)

            # consider heterogenous
            # hardcode 10% ratio of uncertainty
            _mean = _mean / compute_power

            gen_cppinc_item = gen_value_insert_action_real(query_key, _mean, _stdev);
            # print(gen_cppinc_item)

            gen_file_str += gen_cppinc_item
        lhs_shape[0] = original_bs

    print("{} handle variant op".format(datetime.now()))
    for (operation, arg_shapes, arg_dict) in VARIANT_OPS_TO_MEASURE:
        query_key = gen_query_key_variant(operation, arg_shapes, arg_dict)
        _mean, _stdev = gen_perf_query_entry_variant(operation, arg_shapes, arg_dict)

        # consider heterogenous
        # hardcode 10% ratio of uncertainty
        _mean = _mean / compute_power

        gen_cppinc_item = gen_value_insert_action_real(query_key, _mean, _stdev);
        # print(gen_cppinc_item)

        gen_file_str += gen_cppinc_item

    gen_file_str += GEN_FILE_TAIL

    writer = open(filename, "w")
    writer.write(gen_file_str)
    writer.close()

def gen_inc_file(filename, compute_power, uncertainty_std):
    print("{} processing {}".format(datetime.now(), filename))
    gen_file_str = GEN_FILE_HEADER
    print("{} handle custom op".format(datetime.now()))
    gen_file_str += custom_op_gen(False, 1.0, 0.0)
    print("{} handle unary op".format(datetime.now()))
    for (operation, arg_shape, arg_dict) in UNARY_OPS_TO_MEASURE:
        # print("{}".format(operation))
        original_bs = arg_shape[0]
        for batch_size in BATCH_SIZE_CANDIDATES:
            arg_shape[0] = original_bs * batch_size

            query_key = gen_query_key_unary(operation, arg_shape, arg_dict)
            # print(query_key)
            _mean, _stdev = gen_perf_query_entry_unary(operation, arg_shape, arg_dict)

            # consider heterogenous
            # hardcode 10% ratio of uncertainty
            _mean = (_mean / compute_power) * (1 + uncertainty_std * np.random.randn())

            gen_cppinc_item = gen_value_insert_action(query_key, _mean, _stdev);
            # print(gen_cppinc_item)

            gen_file_str += gen_cppinc_item
        # reset shape
        arg_shape[0] = original_bs
    print("{} handle binary op".format(datetime.now()))
    for (operation, lhs_shape, rhs_shape, arg_dict) in BINARY_OPS_TO_MEASURE:
        # print("{}".format(operation))
        original_bs = lhs_shape[0]
        if operation.__name__ == "add" or operation.__name__ == "gather":
            if len(rhs_shape) > 0:
                original_bs_rhs = rhs_shape[0]
        for batch_size in BATCH_SIZE_CANDIDATES:
            lhs_shape[0] = original_bs * batch_size
            if operation.__name__ == "add" or operation.__name__ == "gather":
                if len(rhs_shape) > 0:
                    rhs_shape[0] = original_bs_rhs * batch_size
                    query_key = gen_query_key_binary(operation, lhs_shape, [1, *rhs_shape[1:]], arg_dict)
                    # print(query_key)
                    _mean, _stdev = gen_perf_query_entry_binary(operation, lhs_shape, [1, *rhs_shape[1:]], arg_dict)

                    # consider heterogenous
                    # hardcode 10% ratio of uncertainty
                    _mean = (_mean / compute_power) * (1 + uncertainty_std * np.random.randn())

                    gen_cppinc_item = gen_value_insert_action(query_key, _mean, _stdev);
                    # print(gen_cppinc_item)

            gen_file_str += gen_cppinc_item

            query_key = gen_query_key_binary(operation, lhs_shape, rhs_shape, arg_dict)
            # print(query_key)
            _mean, _stdev = gen_perf_query_entry_binary(operation, lhs_shape, rhs_shape, arg_dict)

            # consider heterogenous
            # hardcode 10% ratio of uncertainty
            _mean = (_mean / compute_power) * (1 + uncertainty_std * np.random.randn())

            gen_cppinc_item = gen_value_insert_action(query_key, _mean, _stdev);
            # print(gen_cppinc_item)

            gen_file_str += gen_cppinc_item
        lhs_shape[0] = original_bs
        if operation.__name__ == "add" or operation.__name__ == "gather":
            if len(rhs_shape) > 0:
                rhs_shape[0] = original_bs_rhs

    print("{} handle tenary op".format(datetime.now()))
    for (operation, lhs_shape, rhs_shape, bias_shape, arg_dict) in TENARY_OPS_TO_MEASURE:
        # print("op {}".format(operation))
        # print("lhs {}".format(lhs_shape))
        # print("rhs {}".format(rhs_shape))
        original_bs = lhs_shape[0]
        for batch_size in BATCH_SIZE_CANDIDATES:
            # special handle conv just to 256
            if operation.__name__ == "conv2d" and batch_size > 256:
                continue
            lhs_shape[0] = original_bs * batch_size

            query_key = gen_query_key_tenary(operation, lhs_shape, rhs_shape, bias_shape, arg_dict)
            _mean, _stdev = gen_perf_query_entry_binary(operation, lhs_shape, rhs_shape, arg_dict)

            # consider heterogenous
            # hardcode 10% ratio of uncertainty
            _mean = (_mean / compute_power) * (1 + uncertainty_std * np.random.randn())

            gen_cppinc_item = gen_value_insert_action(query_key, _mean, _stdev);
            # print(gen_cppinc_item)

            gen_file_str += gen_cppinc_item
        lhs_shape[0] = original_bs

    print("{} handle variant op".format(datetime.now()))
    for (operation, arg_shapes, arg_dict) in VARIANT_OPS_TO_MEASURE:
        query_key = gen_query_key_variant(operation, arg_shapes, arg_dict)
        _mean, _stdev = gen_perf_query_entry_variant(operation, arg_shapes, arg_dict)

        # consider heterogenous
        # hardcode 10% ratio of uncertainty
        _mean = (_mean / compute_power) * (1 + uncertainty_std * np.random.randn())

        gen_cppinc_item = gen_value_insert_action(query_key, _mean, _stdev);
        # print(gen_cppinc_item)

        gen_file_str += gen_cppinc_item

    gen_file_str += GEN_FILE_TAIL

    writer = open(filename, "w")
    writer.write(gen_file_str)
    writer.close()
    
def custom_op_gen(is_real, compute_power, uncertainty_std):
    ret_str = ""

    # for idx in [1, 2, 4, 8, 16, 24, 32, 40, 48, 56, 64]:
    # for idx in [1, 2, 4, 8]:
    # BATCH_SIZE_CANDIDATES = [80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256]
    # for idx in [80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256]:
    for idx in BATCH_SIZE_CANDIDATES:
        # for inception v3
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-80x64-{}x64x5329-{}x80x5329".format(idx, idx), torch.matmul, [80, 64], [idx, 64, 64], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-32x192-{}x192x1225-{}x32x1225".format(idx, idx), torch.matmul, [32, 192], [idx, 192, 1225], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-48x192-{}x192x1225-{}x48x1225".format(idx, idx), torch.matmul, [48, 192], [idx, 192, 1225], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-64x192-{}x192x1225-{}x64x1225".format(idx, idx), torch.matmul, [64, 192], [idx, 192, 1225], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-48x256-{}x256x1225-{}x48x1225".format(idx, idx), torch.matmul, [48, 256], [idx, 256, 1225], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-64x256-{}x256x1225-{}x64x1225".format(idx, idx), torch.matmul, [64, 256], [idx, 256, 1225], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-48x288-{}x288x1225-{}x48x1225".format(idx, idx), torch.matmul, [48, 288], [idx, 288, 1225], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-64x288-{}x288x1225-{}x64x1225".format(idx, idx), torch.matmul, [64, 288], [idx, 288, 1225], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x768-{}x768x289-{}x128x289".format(idx, idx), torch.matmul, [128, 768], [idx, 768, 289], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-160x768-{}x768x289-{}x160x289".format(idx, idx), torch.matmul, [160, 768], [idx, 768, 289], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-192x768-{}x768x289-{}x192x289".format(idx, idx), torch.matmul, [192, 768], [idx, 768, 289], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-320x1280-{}x1280x64-{}x320x64".format(idx, idx), torch.matmul, [320, 1280], [idx, 1280, 64], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-384x1280-{}x1280x64-{}x384x64".format(idx, idx), torch.matmul, [384, 1280], [idx, 1280, 64], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-448x1280-{}x1280x64-{}x448x64".format(idx, idx), torch.matmul, [448, 1280], [idx, 1280, 64], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-192x1280-{}x1280x64-{}x192x64".format(idx, idx), torch.matmul, [192, 1280], [idx, 1280, 64], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-320x2048-{}x2048x64-{}x320x64".format(idx, idx), torch.matmul, [320, 2048], [idx, 2048, 64], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-384x2048-{}x2048x64-{}x384x64".format(idx, idx), torch.matmul, [384, 2048], [idx, 2048, 64], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-448x2048-{}x2048x64-{}x448x64".format(idx, idx), torch.matmul, [448, 2048], [idx, 2048, 64], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-192x2048-{}x2048x64-{}x192x64".format(idx, idx), torch.matmul, [192, 2048], [idx, 2048, 64], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x64-{}x64x3136-{}x128x3136".format(idx, idx), torch.matmul, [128, 64], [idx, 64, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x96-{}x96x3136-{}x128x3136".format(idx, idx), torch.matmul, [128, 96], [idx, 96, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x128-{}x128x3136-{}x128x3136".format(idx, idx), torch.matmul, [128, 128], [idx, 128, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x160-{}x160x3136-{}x128x3136".format(idx, idx), torch.matmul, [128, 160], [idx, 160, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x192-{}x192x3136-{}x128x3136".format(idx, idx), torch.matmul, [128, 192], [idx, 192, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x224-{}x224x3136-{}x128x3136".format(idx, idx), torch.matmul, [128, 224], [idx, 224, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x256-{}x256x3136-{}x128x3136".format(idx, idx), torch.matmul, [128, 256], [idx, 256, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x128-{}x128x784-{}x128x784".format(idx, idx), torch.matmul, [128, 128], [idx, 128, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x160-{}x160x784-{}x128x784".format(idx, idx), torch.matmul, [128, 160], [idx, 160, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x192-{}x192x784-{}x128x784".format(idx, idx), torch.matmul, [128, 192], [idx, 192, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x224-{}x224x784-{}x128x784".format(idx, idx), torch.matmul, [128, 224], [idx, 224, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x256-{}x256x784-{}x128x784".format(idx, idx), torch.matmul, [128, 256], [idx, 256, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x288-{}x288x784-{}x128x784".format(idx, idx), torch.matmul, [128, 288], [idx, 288, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x320-{}x320x784-{}x128x784".format(idx, idx), torch.matmul, [128, 320], [idx, 320, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x352-{}x352x784-{}x128x784".format(idx, idx), torch.matmul, [128, 352], [idx, 352, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x384-{}x384x784-{}x128x784".format(idx, idx), torch.matmul, [128, 384], [idx, 384, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x416-{}x416x784-{}x128x784".format(idx, idx), torch.matmul, [128, 416], [idx, 416, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x448-{}x448x784-{}x128x784".format(idx, idx), torch.matmul, [128, 448], [idx, 448, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x480-{}x480x784-{}x128x784".format(idx, idx), torch.matmul, [128, 480], [idx, 480, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x512-{}x512x784-{}x128x784".format(idx, idx), torch.matmul, [128, 512], [idx, 512, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x256-{}x256x196-{}x128x196".format(idx, idx), torch.matmul, [128, 256], [idx, 256, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x288-{}x288x196-{}x128x196".format(idx, idx), torch.matmul, [128, 288], [idx, 288, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x320-{}x320x196-{}x128x196".format(idx, idx), torch.matmul, [128, 320], [idx, 320, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x352-{}x352x196-{}x128x196".format(idx, idx), torch.matmul, [128, 352], [idx, 352, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x384-{}x384x196-{}x128x196".format(idx, idx), torch.matmul, [128, 384], [idx, 384, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x416-{}x416x196-{}x128x196".format(idx, idx), torch.matmul, [128, 416], [idx, 416, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x448-{}x448x196-{}x128x196".format(idx, idx), torch.matmul, [128, 448], [idx, 448, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x480-{}x480x196-{}x128x196".format(idx, idx), torch.matmul, [128, 480], [idx, 480, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x512-{}x512x196-{}x128x196".format(idx, idx), torch.matmul, [128, 512], [idx, 512, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x544-{}x544x196-{}x128x196".format(idx, idx), torch.matmul, [128, 544], [idx, 544, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x576-{}x576x196-{}x128x196".format(idx, idx), torch.matmul, [128, 576], [idx, 576, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x608-{}x608x196-{}x128x196".format(idx, idx), torch.matmul, [128, 608], [idx, 608, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x640-{}x640x196-{}x128x196".format(idx, idx), torch.matmul, [128, 640], [idx, 640, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x672-{}x672x196-{}x128x196".format(idx, idx), torch.matmul, [128, 672], [idx, 672, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x704-{}x704x196-{}x128x196".format(idx, idx), torch.matmul, [128, 704], [idx, 704, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x736-{}x736x196-{}x128x196".format(idx, idx), torch.matmul, [128, 736], [idx, 736, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x768-{}x768x196-{}x128x196".format(idx, idx), torch.matmul, [128, 768], [idx, 768, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x800-{}x800x196-{}x128x196".format(idx, idx), torch.matmul, [128, 800], [idx, 800, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x832-{}x832x196-{}x128x196".format(idx, idx), torch.matmul, [128, 832], [idx, 832, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x864-{}x864x196-{}x128x196".format(idx, idx), torch.matmul, [128, 864], [idx, 864, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x896-{}x896x196-{}x128x196".format(idx, idx), torch.matmul, [128, 896], [idx, 896, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x928-{}x928x196-{}x128x196".format(idx, idx), torch.matmul, [128, 928], [idx, 928, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x960-{}x960x196-{}x128x196".format(idx, idx), torch.matmul, [128, 960], [idx, 960, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x992-{}x992x196-{}x128x196".format(idx, idx), torch.matmul, [128, 992], [idx, 992, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x1024-{}x1024x196-{}x128x196".format(idx, idx), torch.matmul, [128, 1024], [idx, 1024, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x512-{}x512x49-{}x128x49".format(idx, idx), torch.matmul, [128, 512], [idx, 512, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x544-{}x544x49-{}x128x49".format(idx, idx), torch.matmul, [128, 544], [idx, 544, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x576-{}x576x49-{}x128x49".format(idx, idx), torch.matmul, [128, 576], [idx, 576, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x608-{}x608x49-{}x128x49".format(idx, idx), torch.matmul, [128, 608], [idx, 608, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x640-{}x640x49-{}x128x49".format(idx, idx), torch.matmul, [128, 640], [idx, 640, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x672-{}x672x49-{}x128x49".format(idx, idx), torch.matmul, [128, 672], [idx, 672, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x704-{}x704x49-{}x128x49".format(idx, idx), torch.matmul, [128, 704], [idx, 704, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x736-{}x736x49-{}x128x49".format(idx, idx), torch.matmul, [128, 736], [idx, 736, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x768-{}x768x49-{}x128x49".format(idx, idx), torch.matmul, [128, 768], [idx, 768, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x800-{}x800x49-{}x128x49".format(idx, idx), torch.matmul, [128, 800], [idx, 800, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x832-{}x832x49-{}x128x49".format(idx, idx), torch.matmul, [128, 832], [idx, 832, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x864-{}x864x49-{}x128x49".format(idx, idx), torch.matmul, [128, 864], [idx, 864, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x896-{}x896x49-{}x128x49".format(idx, idx), torch.matmul, [128, 896], [idx, 896, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x928-{}x928x49-{}x128x49".format(idx, idx), torch.matmul, [128, 928], [idx, 928, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x960-{}x960x49-{}x128x49".format(idx, idx), torch.matmul, [128, 960], [idx, 960, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x992-{}x992x49-{}x128x49".format(idx, idx), torch.matmul, [128, 992], [idx, 992, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-128x1024-{}x1024x49-{}x128x49".format(idx, idx), torch.matmul, [128, 1024], [idx, 1024, 49], is_real)
        
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x384x512-512x512-{}x384x512".format(idx, idx), torch.matmul, [idx, 384, 512], [512, 512], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x384x512-512x2048-{}x384x2048".format(idx, idx), torch.matmul, [idx, 384, 512], [512, 2048], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x384x2048-2048x512-{}x384x512".format(idx, idx), torch.matmul, [idx, 384, 2048], [2048, 512], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x384x384-{}x384x64-{}x384x64".format(idx, idx, idx), torch.matmul, [idx, 384, 384], [idx, 384, 64], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x384x64-{}x64x384-{}x384x384".format(idx, idx, idx), torch.matmul, [idx, 384, 64], [idx, 64, 384], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-256x512-{}x512x784-{}x256x784".format(idx, idx), torch.matmul, [256, 512], [idx, 512, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-512x1024-{}x1024x196-{}x512x196".format(idx, idx), torch.matmul, [512, 1024], [idx, 1024, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x1x1-{}x384x64-4x-1x64".format(idx, idx, idx), torch.matmul, [idx, 1, 384], [idx, 384, 64], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-16x32-{}x32x12544-{}x16x12544".format(idx, idx), torch.matmul, [16, 32], [idx, 32, 12544], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-96x16-{}x16x12544-{}x96x12544".format(idx, idx), torch.matmul, [96, 16], [idx, 16, 12544], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-24x96-{}x96x3136-{}x24x3136".format(idx, idx), torch.matmul, [24, 96], [idx, 96, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-24x144-{}x144x3136-{}x24x3136".format(idx, idx), torch.matmul, [24, 144], [idx, 144, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-144x24-{}x24x3136-{}x144x3136".format(idx, idx), torch.matmul, [144, 24], [idx, 24, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-32x144-{}x144x784-{}x32x784".format(idx, idx), torch.matmul, [32, 144], [idx, 144, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-144x32-{}x32x784-{}x144x784".format(idx, idx), torch.matmul, [144, 32], [idx, 32, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-32x192-{}x192x784-{}x32x784".format(idx, idx), torch.matmul, [32, 192], [idx, 192, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-192x32-{}x32x784-{}x192x784".format(idx, idx), torch.matmul, [192, 32], [idx, 32, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-64x192-{}x192x196-{}x64x196".format(idx, idx), torch.matmul, [64, 192], [idx, 192, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-384x64-{}x64x196-{}x384x196".format(idx, idx), torch.matmul, [384, 64], [idx, 64, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-64x384-{}x384x196-{}x64x196".format(idx, idx), torch.matmul, [64, 384], [idx, 384, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-96x384-{}x384x196-{}x96x196".format(idx, idx), torch.matmul, [96, 384], [idx, 384, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-576x96-{}x96x196-{}x576x196".format(idx, idx), torch.matmul, [576, 96], [idx, 96, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-96x576-{}x576x196-{}x96x196".format(idx, idx), torch.matmul, [96, 576], [idx, 576, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-160x576-{}x576x49-{}x160x49".format(idx, idx), torch.matmul, [160, 576], [idx, 576, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-960x160-{}x160x49-{}x960x49".format(idx, idx), torch.matmul, [960, 160], [idx, 160, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-160x960-{}x960x49-{}x160x49".format(idx, idx), torch.matmul, [160, 960], [idx, 960, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-320x960-{}x960x49-{}x320x49".format(idx, idx), torch.matmul, [320, 960], [idx, 960, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-1280x320-{}x320x49-{}x1280x49".format(idx, idx), torch.matmul, [1280, 320], [idx, 320, 49], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-{}x8x768-768x2304-{}x8x2304".format(idx, idx), torch.matmul, [idx, 8, 768], [768, 2304], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-{}x8x768-768x768-{}x8x768".format(idx, idx), torch.matmul, [idx, 8, 768], [768, 768], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-{}x197x64-{}x64x197-{}x197x197".format(idx, idx, idx), torch.matmul, [idx, 197, 64], [idx, 64, 197], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-{}x197x197-{}x197x197-{}x197x197".format(idx, idx, idx), torch.matmul, [idx, 197, 197], [idx, 197, 197], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-{}x197x197-{}x197x64-{}x197x64".format(idx, idx, idx), torch.matmul, [idx, 197, 197], [idx, 197, 64], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-{}x197x768-768x3072-{}x197x3072".format(idx, idx), torch.matmul, [idx, 197, 768], [768, 3072], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-{}x197x3072-3072x768-{}x197x768".format(idx, idx), torch.matmul, [idx, 197, 3072], [3072, 768], is_real)


        # bert-large
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x384x1024-1024x2-{}x384x2".format(idx, idx), torch.matmul, [idx, 384, 1024], [1024, 2], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x384x1024-1024x1024-{}x384x1024".format(idx, idx), torch.matmul, [idx, 384, 1024], [1024, 1024], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x384x1024-1024x4096-{}x384x4096".format(idx, idx), torch.matmul, [idx, 384, 1024], [1024, 1024], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x384x4096-4096x1024-{}x384x1024".format(idx, idx), torch.matmul, [idx, 384, 4096], [4096, 1024], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x16x384x64-{}x16x64x384-{}x16x384x384".format(idx, idx, idx), torch.matmul, [idx, 16, 384, 64], [idx, 16, 64, 384], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "matmul-{}x16x384x384-{}x16x384x64-{}x16x384x64".format(idx, idx, idx), torch.matmul, [idx, 16, 384, 384], [idx, 16, 384, 64], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x1024-{}x384x1024-{}x384x1024".format(idx, idx, idx), torch.add, [idx, 384, 1024], [idx, 384, 1024], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x1024-1024-{}x384x1024".format(idx, idx), torch.add, [idx, 384, 1024], [1024], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x1--{}x384x1".format(idx, idx), torch.add, [idx, 384, 1], [1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x2-2-{}x384x2".format(idx, idx), torch.add, [idx, 384, 2], [2], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x16x384x384-{}x1x1x384-{}x16x384x384".format(idx, idx, idx), torch.add, [idx, 16, 384, 384], [idx, 1, 1, 384], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "div-{}x16x384x384--{}x16x384x384".format(idx, idx, idx), torch.div, [idx, 16, 384, 384], [1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x4096--{}x384x4096".format(idx, idx, idx), torch.add, [idx, 384, 4096], [1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x4096-4096-{}x384x4096".format(idx, idx, idx), torch.add, [idx, 384, 4096], [4096], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "sub-{}x384x1024-{}x384x1-{}x384x1024".format(idx, idx, idx), torch.sub, [idx, 384, 1024], [idx, 384, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "div-{}x384x1024-{}x384x1-{}x384x1024".format(idx, idx, idx), torch.div, [idx, 384, 1024], [idx, 384, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "div-{}x384x4096--{}x384x4096".format(idx, idx, idx), torch.div, [idx, 384, 4096], [1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x384x4096-{}x384x4096-{}x384x4096".format(idx, idx, idx), torch.mul, [idx, 384, 4096], [idx, 384, 4096], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x384x4096--{}x384x4096".format(idx, idx, idx), torch.mul, [idx, 384, 4096], [1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x384x1024-1024-{}x384x1024".format(idx, idx), torch.mul, [idx, 384, 1024], [1024], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "reducemean-{}x384x1024-{}x384x1".format(idx, idx), torch.mean, [idx, 384, 1024], 2, is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "reducemean-{}x197x768-{}x197x1".format(idx, idx), torch.mean, [idx, 197, 768], 2, is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "reducemean-{}x8x197x768-{}x197x768".format(idx, idx), torch.mean, [idx, 8, 197, 768], 1, is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "reducemean-{}x384x512-{}x384x1".format(idx, idx), torch.mean, [idx, 384, 512], 2, is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x512-{}x384x512-{}x384x512".format(idx, idx, idx), torch.add, [idx, 384, 512], [idx, 384, 512], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "sub-{}x384x512-{}x384x1-{}x384x512".format(idx, idx, idx), torch.sub, [idx, 384, 512], [idx, 384, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "div-{}x384x512-{}x384x1-{}x384x512".format(idx, idx, idx), torch.div, [idx, 384, 512], [idx, 384, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x512-{}x512-{}x384x512".format(idx, idx, idx), torch.add, [idx, 384, 512], [idx, 1, 512], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x512-512-{}x384x512".format(idx, idx), torch.add, [idx, 384, 512], [512], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x384x512-{}x512-{}x384x512".format(idx, idx, idx), torch.mul, [idx, 384, 512], [idx, 1, 512], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x384x512-512-{}x384x512".format(idx, idx), torch.mul, [idx, 384, 512], [512], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x384x512--{}x384x512".format(idx, idx), torch.mul, [idx, 384, 512], [1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x384x512-{}x384x1-{}x384x512".format(idx, idx, idx), torch.mul, [idx, 384, 512], [idx, 384, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x2048-{}x384x2048-{}x384x2048".format(idx, idx, idx), torch.add, [idx, 384, 2048], [idx, 384, 2048], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x2048-2048-{}x384x2048".format(idx, idx), torch.add, [idx, 384, 2048], [2048], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x384x2048-{}x384x2048-{}x384x2048".format(idx, idx, idx), torch.mul, [idx, 384, 2048], [idx, 384, 2048], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x384x2048-2048-{}x384x2048".format(idx, idx), torch.mul, [idx, 384, 2048], [2048], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x8x384x384-{}x1x1x384-{}x8x384x384".format(idx, idx, idx), torch.add, [idx, 8, 384, 384], [idx, 1, 1, 384], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x8x384x-1-{}x1x1x384-{}x8x384x384".format(idx, idx, idx), torch.add, [idx, 8, 384, 384], [idx, 1, 1, 384], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "sub--{}x1x1x384-{}x1x1x384".format(idx, idx), torch.sub, [1], [idx, 1, 1, 384], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul--{}x1x1x384-{}x1x1x384".format(idx, idx), torch.mul, [1], [idx, 1, 1, 384], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul--{}x1x1x384--{}x1x1x384".format(idx, idx), torch.mul, [1], [idx, 1, 1, 384], is_real)


        # for resnet 50
        # ret_str += custom_op_gen_impcompute_power, uncertainty_std, l("matmul-64x64-{}x64x3136-{}x64x3136".format(idx, idx), torch.matmul, [64, 64], [idx, 64, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-64x64-{}x64x3136-{}x64x3136".format(idx, idx), torch.matmul, [64, 64], [idx, 64, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-256x64-{}x64x3136-{}x256x3136".format(idx, idx), torch.matmul, [256, 64], [idx, 64, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-64x256-{}x256x3136-{}x64x3136".format(idx, idx), torch.matmul, [64, 256], [idx, 256, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-128x256-{}x256x3136-{}x128x3136".format(idx, idx), torch.matmul, [128, 256], [idx, 256, 3136], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-512x128-{}x128x784-{}x512x784".format(idx, idx), torch.matmul, [512, 128], [idx, 128, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-128x512-{}x512x784-{}x128x784".format(idx, idx), torch.matmul, [128, 512], [idx, 512, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-256x512-{}x512x784-{}x256x784".format(idx, idx), torch.matmul, [256, 512], [idx, 512, 784], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-1024x256-{}x256x196-{}x1024x196".format(idx, idx), torch.matmul, [1024, 256], [idx, 256, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-256x1024-{}x1024x196-{}x256x196".format(idx, idx), torch.matmul, [256, 1024], [idx, 1024, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-512x1024-{}x1024x196-{}x512x196".format(idx, idx), torch.matmul, [512, 1024], [idx, 1024, 196], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-512x2048-{}x2048x49-{}x512x49".format(idx, idx), torch.matmul, [512, 2048], [idx, 2048, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "MatMul-2048x512-{}x512x49-{}x2048x49".format(idx, idx), torch.matmul, [2048, 512], [idx, 512, 49], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x24x3136-1x24x1-{}x24x3136".format(idx, idx), torch.add, [idx, 24, 3136], [1, 24, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x64x3136-1x64x1-{}x64x3136".format(idx, idx), torch.add, [idx, 64, 3136], [1, 64, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x16x12544-1x16x1-{}x16x12544".format(idx, idx), torch.add, [idx, 16, 12544], [1, 16, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x96x12544-1x96x1-{}x96x12544".format(idx, idx), torch.add, [idx, 96, 12544], [1, 96, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x128x3136-1x128x1-{}x128x3136".format(idx, idx), torch.add, [idx, 128, 3136], [1, 128, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x144x3136-1x144x1-{}x144x3136".format(idx, idx), torch.add, [idx, 144, 3136], [1, 144, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x256x3136-1x256x1-{}x256x3136".format(idx, idx), torch.add, [idx, 256, 3136], [1, 256, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x128x784-1x128x1-{}x128x784".format(idx, idx), torch.add, [idx, 128, 784], [1, 128, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x256x784-1x256x1-{}x256x784".format(idx, idx), torch.add, [idx, 256, 784], [1, 256, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x512x784-1x512x1-{}x512x784".format(idx, idx), torch.add, [idx, 512, 784], [1, 512, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x256x196-1x256x1-{}x256x196".format(idx, idx), torch.add, [idx, 256, 196], [1, 256, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x512x196-1x512x1-{}x512x196".format(idx, idx), torch.add, [idx, 512, 196], [1, 512, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x1024x196-1x1024x1-{}x1024x196".format(idx, idx), torch.add, [idx, 1024, 196], [1, 1024, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x128x49-1x128x1-{}x128x49".format(idx, idx), torch.add, [idx, 128, 49], [1, 128, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x128x196-1x128x1-{}x128x196".format(idx, idx), torch.add, [idx, 128, 196], [1, 128, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x512x49-1x512x1-{}x512x49".format(idx, idx), torch.add, [idx, 512, 49], [1, 512, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x1024x49-1x1024x1-{}x1024x49".format(idx, idx), torch.add, [idx, 1024, 49], [1, 1024, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x2048x49-1x2048x1-{}x2048x49".format(idx, idx), torch.add, [idx, 2048, 49], [1, 2048, 1], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x256x56x56-{}x256x56x56-{}x256x56x56".format(idx, idx, idx), torch.add, [idx, 256, 56, 56], [idx, 256, 56, 56], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x24x56x56-{}x24x56x56-{}x24x56x56".format(idx, idx, idx), torch.add, [idx, 24, 56, 56], [idx, 24, 56, 56], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x512x28x28-512x1x1-{}x512x28x28".format(idx, idx), torch.add, [idx, 512, 28, 28], [512, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x512x7x7-512x1x1-{}x512x7x7".format(idx, idx), torch.add, [idx, 512, 7, 7], [512, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x544x7x7-544x1x1-{}x544x7x7".format(idx, idx), torch.add, [idx, 544, 7, 7], [544, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x576x7x7-576x1x1-{}x576x7x7".format(idx, idx), torch.add, [idx, 576, 7, 7], [576, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x608x7x7-608x1x1-{}x608x7x7".format(idx, idx), torch.add, [idx, 608, 7, 7], [608, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x640x7x7-640x1x1-{}x640x7x7".format(idx, idx), torch.add, [idx, 640, 7, 7], [640, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x672x7x7-672x1x1-{}x672x7x7".format(idx, idx), torch.add, [idx, 672, 7, 7], [672, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x704x7x7-704x1x1-{}x704x7x7".format(idx, idx), torch.add, [idx, 704, 7, 7], [704, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x736x7x7-736x1x1-{}x736x7x7".format(idx, idx), torch.add, [idx, 736, 7, 7], [736, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x768x7x7-768x1x1-{}x768x7x7".format(idx, idx), torch.add, [idx, 768, 7, 7], [768, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x800x7x7-800x1x1-{}x800x7x7".format(idx, idx), torch.add, [idx, 800, 7, 7], [800, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x832x7x7-832x1x1-{}x832x7x7".format(idx, idx), torch.add, [idx, 832, 7, 7], [832, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x864x7x7-864x1x1-{}x864x7x7".format(idx, idx), torch.add, [idx, 864, 7, 7], [864, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x896x7x7-896x1x1-{}x896x7x7".format(idx, idx), torch.add, [idx, 896, 7, 7], [896, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x928x7x7-928x1x1-{}x928x7x7".format(idx, idx), torch.add, [idx, 928, 7, 7], [928, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x960x7x7-960x1x1-{}x960x7x7".format(idx, idx), torch.add, [idx, 960, 7, 7], [960, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x992x7x7-992x1x1-{}x992x7x7".format(idx, idx), torch.add, [idx, 992, 7, 7], [992, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x1024x7x7-1024x1x1-{}x1024x7x7".format(idx, idx), torch.add, [idx, 1024, 7, 7], [1024, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x32x28x28-{}x32x28x28-{}x32x28x28".format(idx, idx, idx), torch.add, [idx, 32, 28, 28], [idx, 32, 28, 28], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x1024x7x7-{}x1024x7x7-{}x1024x7x7".format(idx, idx, idx), torch.add, [idx, 1024, 7, 7], [idx, 1024, 7, 7], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x64x14x14-{}x64x14x14-{}x64x14x14".format(idx, idx, idx), torch.add, [idx, 64, 14, 14], [idx, 64, 14, 14], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x96x14x14-{}x96x14x14-{}x96x14x14".format(idx, idx, idx), torch.add, [idx, 96, 14, 14], [idx, 96, 14, 14], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x1024x7x7-{}x1024x1x1-{}x1024x7x7".format(idx, idx, idx), torch.add, [idx, 1024, 7, 7], [idx, 1024, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x864x7x7-{}x864x7x7-{}x864x7x7".format(idx, idx, idx), torch.add, [idx, 864, 7, 7], [idx, 864, 7, 7], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x224x14x14-224x1x1-{}x224x14x14".format(idx, idx), torch.add, [idx, 224, 14, 14], [224, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x256x14x14-256x1x1-{}x256x14x14".format(idx, idx), torch.add, [idx, 256, 14, 14], [256, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x288x14x14-288x1x1-{}x288x14x14".format(idx, idx), torch.add, [idx, 288, 14, 14], [288, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x320x14x14-320x1x1-{}x320x14x14".format(idx, idx), torch.add, [idx, 320, 14, 14], [320, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x352x14x14-352x1x1-{}x352x14x14".format(idx, idx), torch.add, [idx, 352, 14, 14], [352, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x14x14-384x1x1-{}x384x14x14".format(idx, idx), torch.add, [idx, 384, 14, 14], [384, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x416x14x14-416x1x1-{}x416x14x14".format(idx, idx), torch.add, [idx, 416, 14, 14], [416, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x448x14x14-448x1x1-{}x448x14x14".format(idx, idx), torch.add, [idx, 448, 14, 14], [448, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x480x14x14-480x1x1-{}x480x14x14".format(idx, idx), torch.add, [idx, 480, 14, 14], [480, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x512x14x14-512x1x1-{}x512x14x14".format(idx, idx), torch.add, [idx, 512, 14, 14], [512, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x544x14x14-544x1x1-{}x544x14x14".format(idx, idx), torch.add, [idx, 544, 14, 14], [544, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x576x14x14-576x1x1-{}x576x14x14".format(idx, idx), torch.add, [idx, 576, 14, 14], [576, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x608x14x14-608x1x1-{}x608x14x14".format(idx, idx), torch.add, [idx, 608, 14, 14], [608, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x640x14x14-640x1x1-{}x640x14x14".format(idx, idx), torch.add, [idx, 640, 14, 14], [640, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x672x14x14-672x1x1-{}x672x14x14".format(idx, idx), torch.add, [idx, 672, 14, 14], [672, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x704x14x14-704x1x1-{}x704x14x14".format(idx, idx), torch.add, [idx, 704, 14, 14], [704, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x736x14x14-736x1x1-{}x736x14x14".format(idx, idx), torch.add, [idx, 736, 14, 14], [736, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x768x14x14-768x1x1-{}x768x14x14".format(idx, idx), torch.add, [idx, 768, 14, 14], [768, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x800x14x14-800x1x1-{}x800x14x14".format(idx, idx), torch.add, [idx, 800, 14, 14], [800, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x832x14x14-832x1x1-{}x832x14x14".format(idx, idx), torch.add, [idx, 832, 14, 14], [832, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x864x14x14-864x1x1-{}x864x14x14".format(idx, idx), torch.add, [idx, 864, 14, 14], [864, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x896x14x14-896x1x1-{}x896x14x14".format(idx, idx), torch.add, [idx, 896, 14, 14], [896, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x928x14x14-928x1x1-{}x928x14x14".format(idx, idx), torch.add, [idx, 928, 14, 14], [928, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x960x14x14-960x1x1-{}x960x14x14".format(idx, idx), torch.add, [idx, 960, 14, 14], [960, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x992x14x14-992x1x1-{}x992x14x14".format(idx, idx), torch.add, [idx, 992, 14, 14], [992, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x1024x14x14-1024x1x1-{}x1024x14x14".format(idx, idx), torch.add, [idx, 1024, 14, 14], [1024, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x2048x7x7-{}x2048x7x7-{}x2048x7x7".format(idx, idx, idx), torch.add, [idx, 2048, 7, 7], [idx, 2048, 7, 7], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x160x7x7-{}x160x7x7-{}x160x7x7".format(idx, idx, idx), torch.add, [idx, 160, 7, 7], [idx, 160, 7, 7], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x128x28x28-128x1x1-{}x128x28x28".format(idx, idx, idx), torch.add, [idx, 128, 28, 28], [128, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x160x28x28-160x1x1-{}x160x28x28".format(idx, idx, idx), torch.add, [idx, 160, 28, 28], [160, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x192x28x28-192x1x1-{}x192x28x28".format(idx, idx, idx), torch.add, [idx, 192, 28, 28], [192, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x224x28x28-224x1x1-{}x224x28x28".format(idx, idx, idx), torch.add, [idx, 224, 28, 28], [224, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x256x28x28-256x1x1-{}x256x28x28".format(idx, idx, idx), torch.add, [idx, 256, 28, 28], [256, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x288x28x28-288x1x1-{}x288x28x28".format(idx, idx, idx), torch.add, [idx, 288, 28, 28], [288, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x320x28x28-320x1x1-{}x320x28x28".format(idx, idx, idx), torch.add, [idx, 320, 28, 28], [320, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x352x28x28-352x1x1-{}x352x28x28".format(idx, idx, idx), torch.add, [idx, 352, 28, 28], [352, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x28x28-384x1x1-{}x384x28x28".format(idx, idx, idx), torch.add, [idx, 384, 28, 28], [384, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x416x28x28-416x1x1-{}x416x28x28".format(idx, idx, idx), torch.add, [idx, 416, 28, 28], [416, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x448x28x28-448x1x1-{}x448x28x28".format(idx, idx, idx), torch.add, [idx, 448, 28, 28], [448, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x480x28x28-480x1x1-{}x480x28x28".format(idx, idx, idx), torch.add, [idx, 480, 28, 28], [480, 1, 1], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x64x56x56-64x1x1-{}x64x56x56".format(idx, idx), torch.add, [idx, 64, 56, 56], [64, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x96x56x56-96x1x1-{}x96x56x56".format(idx, idx), torch.add, [idx, 96, 56, 56], [96, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x128x56x56-128x1x1-{}x128x56x56".format(idx, idx), torch.add, [idx, 128, 56, 56], [128, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x160x56x56-160x1x1-{}x160x56x56".format(idx, idx), torch.add, [idx, 160, 56, 56], [160, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x192x56x56-192x1x1-{}x192x56x56".format(idx, idx), torch.add, [idx, 192, 56, 56], [192, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x224x56x56-224x1x1-{}x224x56x56".format(idx, idx), torch.add, [idx, 224, 56, 56], [224, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x256x56x56-256x1x1-{}x256x56x56".format(idx, idx), torch.add, [idx, 256, 56, 56], [256, 1, 1], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x256x56x56-{}x256x56x56-{}x256x56x56".format(idx, idx, idx), torch.mul, [idx, 256, 56, 56], [idx, 256, 56, 56], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x24x56x56-{}x24x56x56-{}x24x56x56".format(idx, idx, idx), torch.mul, [idx, 24, 56, 56], [idx, 24, 56, 56], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x512x28x28-512x1x1-{}x512x28x28".format(idx, idx), torch.mul, [idx, 512, 28, 28], [512, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x512x7x7-512x1x1-{}x512x7x7".format(idx, idx), torch.mul, [idx, 512, 7, 7], [512, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x544x7x7-544x1x1-{}x544x7x7".format(idx, idx), torch.mul, [idx, 544, 7, 7], [544, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x576x7x7-576x1x1-{}x576x7x7".format(idx, idx), torch.mul, [idx, 576, 7, 7], [576, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x608x7x7-608x1x1-{}x608x7x7".format(idx, idx), torch.mul, [idx, 608, 7, 7], [608, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x640x7x7-640x1x1-{}x640x7x7".format(idx, idx), torch.mul, [idx, 640, 7, 7], [640, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x672x7x7-672x1x1-{}x672x7x7".format(idx, idx), torch.mul, [idx, 672, 7, 7], [672, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x704x7x7-704x1x1-{}x704x7x7".format(idx, idx), torch.mul, [idx, 704, 7, 7], [704, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x736x7x7-736x1x1-{}x736x7x7".format(idx, idx), torch.mul, [idx, 736, 7, 7], [736, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x768x7x7-768x1x1-{}x768x7x7".format(idx, idx), torch.mul, [idx, 768, 7, 7], [768, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x800x7x7-800x1x1-{}x800x7x7".format(idx, idx), torch.mul, [idx, 800, 7, 7], [800, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x832x7x7-832x1x1-{}x832x7x7".format(idx, idx), torch.mul, [idx, 832, 7, 7], [832, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x864x7x7-864x1x1-{}x864x7x7".format(idx, idx), torch.mul, [idx, 864, 7, 7], [864, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x896x7x7-896x1x1-{}x896x7x7".format(idx, idx), torch.mul, [idx, 896, 7, 7], [896, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x928x7x7-928x1x1-{}x928x7x7".format(idx, idx), torch.mul, [idx, 928, 7, 7], [928, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x960x7x7-960x1x1-{}x960x7x7".format(idx, idx), torch.mul, [idx, 960, 7, 7], [960, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x992x7x7-992x1x1-{}x992x7x7".format(idx, idx), torch.mul, [idx, 992, 7, 7], [992, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x1024x7x7-1024x1x1-{}x1024x7x7".format(idx, idx), torch.mul, [idx, 1024, 7, 7], [1024, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x32x28x28-{}x32x28x28-{}x32x28x28".format(idx, idx, idx), torch.mul, [idx, 32, 28, 28], [idx, 32, 28, 28], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x1024x7x7-{}x1024x7x7-{}x1024x7x7".format(idx, idx, idx), torch.mul, [idx, 1024, 7, 7], [idx, 1024, 7, 7], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x64x14x14-{}x64x14x14-{}x64x14x14".format(idx, idx, idx), torch.mul, [idx, 64, 14, 14], [idx, 64, 14, 14], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x96x14x14-{}x96x14x14-{}x96x14x14".format(idx, idx, idx), torch.mul, [idx, 96, 14, 14], [idx, 96, 14, 14], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x1024x7x7-{}x1024x1x1-{}x1024x7x7".format(idx, idx, idx), torch.mul, [idx, 1024, 7, 7], [idx, 1024, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x864x7x7-{}x864x7x7-{}x864x7x7".format(idx, idx, idx), torch.mul, [idx, 864, 7, 7], [idx, 864, 7, 7], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x224x14x14-224x1x1-{}x224x14x14".format(idx, idx), torch.mul, [idx, 224, 14, 14], [224, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x256x14x14-256x1x1-{}x256x14x14".format(idx, idx), torch.mul, [idx, 256, 14, 14], [256, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x288x14x14-288x1x1-{}x288x14x14".format(idx, idx), torch.mul, [idx, 288, 14, 14], [288, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x320x14x14-320x1x1-{}x320x14x14".format(idx, idx), torch.mul, [idx, 320, 14, 14], [320, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x352x14x14-352x1x1-{}x352x14x14".format(idx, idx), torch.mul, [idx, 352, 14, 14], [352, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x384x14x14-384x1x1-{}x384x14x14".format(idx, idx), torch.mul, [idx, 384, 14, 14], [384, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x416x14x14-416x1x1-{}x416x14x14".format(idx, idx), torch.mul, [idx, 416, 14, 14], [416, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x448x14x14-448x1x1-{}x448x14x14".format(idx, idx), torch.mul, [idx, 448, 14, 14], [448, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x480x14x14-480x1x1-{}x480x14x14".format(idx, idx), torch.mul, [idx, 480, 14, 14], [480, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x512x14x14-512x1x1-{}x512x14x14".format(idx, idx), torch.mul, [idx, 512, 14, 14], [512, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x544x14x14-544x1x1-{}x544x14x14".format(idx, idx), torch.mul, [idx, 544, 14, 14], [544, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x576x14x14-576x1x1-{}x576x14x14".format(idx, idx), torch.mul, [idx, 576, 14, 14], [576, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x608x14x14-608x1x1-{}x608x14x14".format(idx, idx), torch.mul, [idx, 608, 14, 14], [608, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x640x14x14-640x1x1-{}x640x14x14".format(idx, idx), torch.mul, [idx, 640, 14, 14], [640, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x672x14x14-672x1x1-{}x672x14x14".format(idx, idx), torch.mul, [idx, 672, 14, 14], [672, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x704x14x14-704x1x1-{}x704x14x14".format(idx, idx), torch.mul, [idx, 704, 14, 14], [704, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x736x14x14-736x1x1-{}x736x14x14".format(idx, idx), torch.mul, [idx, 736, 14, 14], [736, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x768x14x14-768x1x1-{}x768x14x14".format(idx, idx), torch.mul, [idx, 768, 14, 14], [768, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x800x14x14-800x1x1-{}x800x14x14".format(idx, idx), torch.mul, [idx, 800, 14, 14], [800, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x832x14x14-832x1x1-{}x832x14x14".format(idx, idx), torch.mul, [idx, 832, 14, 14], [832, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x864x14x14-864x1x1-{}x864x14x14".format(idx, idx), torch.mul, [idx, 864, 14, 14], [864, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x896x14x14-896x1x1-{}x896x14x14".format(idx, idx), torch.mul, [idx, 896, 14, 14], [896, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x928x14x14-928x1x1-{}x928x14x14".format(idx, idx), torch.mul, [idx, 928, 14, 14], [928, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x960x14x14-960x1x1-{}x960x14x14".format(idx, idx), torch.mul, [idx, 960, 14, 14], [960, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x992x14x14-992x1x1-{}x992x14x14".format(idx, idx), torch.mul, [idx, 992, 14, 14], [992, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x1024x14x14-1024x1x1-{}x1024x14x14".format(idx, idx), torch.mul, [idx, 1024, 14, 14], [1024, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x2048x7x7-{}x2048x7x7-{}x2048x7x7".format(idx, idx, idx), torch.mul, [idx, 2048, 7, 7], [idx, 2048, 7, 7], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x160x7x7-{}x160x7x7-{}x160x7x7".format(idx, idx, idx), torch.mul, [idx, 160, 7, 7], [idx, 160, 7, 7], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x128x28x28-128x1x1-{}x128x28x28".format(idx, idx, idx), torch.mul, [idx, 128, 28, 28], [128, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x160x28x28-160x1x1-{}x160x28x28".format(idx, idx, idx), torch.mul, [idx, 160, 28, 28], [160, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x192x28x28-192x1x1-{}x192x28x28".format(idx, idx, idx), torch.mul, [idx, 192, 28, 28], [192, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x224x28x28-224x1x1-{}x224x28x28".format(idx, idx, idx), torch.mul, [idx, 224, 28, 28], [224, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x256x28x28-256x1x1-{}x256x28x28".format(idx, idx, idx), torch.mul, [idx, 256, 28, 28], [256, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x288x28x28-288x1x1-{}x288x28x28".format(idx, idx, idx), torch.mul, [idx, 288, 28, 28], [288, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x320x28x28-320x1x1-{}x320x28x28".format(idx, idx, idx), torch.mul, [idx, 320, 28, 28], [320, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x352x28x28-352x1x1-{}x352x28x28".format(idx, idx, idx), torch.mul, [idx, 352, 28, 28], [352, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x384x28x28-384x1x1-{}x384x28x28".format(idx, idx, idx), torch.mul, [idx, 384, 28, 28], [384, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x416x28x28-416x1x1-{}x416x28x28".format(idx, idx, idx), torch.mul, [idx, 416, 28, 28], [416, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x448x28x28-448x1x1-{}x448x28x28".format(idx, idx, idx), torch.mul, [idx, 448, 28, 28], [448, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x480x28x28-480x1x1-{}x480x28x28".format(idx, idx, idx), torch.mul, [idx, 480, 28, 28], [480, 1, 1], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x64x56x56-64x1x1-{}x64x56x56".format(idx, idx), torch.mul, [idx, 64, 56, 56], [64, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x96x56x56-96x1x1-{}x96x56x56".format(idx, idx), torch.mul, [idx, 96, 56, 56], [96, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x128x56x56-128x1x1-{}x128x56x56".format(idx, idx), torch.mul, [idx, 128, 56, 56], [128, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x160x56x56-160x1x1-{}x160x56x56".format(idx, idx), torch.mul, [idx, 160, 56, 56], [160, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x192x56x56-192x1x1-{}x192x56x56".format(idx, idx), torch.mul, [idx, 192, 56, 56], [192, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x224x56x56-224x1x1-{}x224x56x56".format(idx, idx), torch.mul, [idx, 224, 56, 56], [224, 1, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x256x56x56-256x1x1-{}x256x56x56".format(idx, idx), torch.mul, [idx, 256, 56, 56], [256, 1, 1], is_real)

        # inception
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x80x5329-1x80x1-{}x80x5329".format(idx, idx), torch.add, [idx, 80, 5329], [1, 80, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x64x1225-1x64x1-{}x64x1225".format(idx, idx), torch.add, [idx, 64, 1225], [1, 64, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x48x1225-1x48x1-{}x48x1225".format(idx, idx), torch.add, [idx, 48, 1225], [1, 48, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x32x1225-1x32x1-{}x32x1225".format(idx, idx), torch.add, [idx, 32, 1225], [1, 32, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x128x289-1x128x1-{}x128x289".format(idx, idx), torch.add, [idx, 128, 289], [1, 128, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x160x289-1x160x1-{}x160x289".format(idx, idx), torch.add, [idx, 160, 289], [1, 160, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x192x289-1x192x1-{}x192x289".format(idx, idx), torch.add, [idx, 192, 289], [1, 192, 1], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "gather-{}x3x299x299--{}x299x299".format(idx, idx), torch.gather, [idx, 3, 299, 299], [idx, 1, 299, 299], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "gather-65001x512-1x384-{}x384x512".format(idx, idx), torch.gather, [65001, 512], [384, 512], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "gather-30522x1024-1x384-{}x384x1024".format(idx, idx), torch.gather, [30522, 1024], [384, 512], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "gather-512x1024-1x384-{}x384x1024".format(idx, idx), torch.gather, [512, 1024], [384, 512], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x197x768-768-{}x197x768".format(idx, idx), torch.add, [idx, 197, 768], [768], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x197x768-768-{}x197x768".format(idx, idx), torch.mul, [idx, 197, 768], [768], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x197x768-1x197x768-{}x197x768".format(idx, idx), torch.add, [idx, 197, 768], [1, 197, 768], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x197x768-{}x197x768-{}x197x768".format(idx, idx, idx), torch.add, [idx, 197, 768], [idx, 197, 768], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "sub-{}x197x768-{}x197x1-{}x197x768".format(idx, idx, idx), torch.sub, [idx, 197, 768], [idx, 197, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "div-{}x197x768-{}x197x1-{}x197x768".format(idx, idx, idx), torch.div, [idx, 197, 768], [idx, 197, 1], is_real)
        
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x197x1--{}x197x1".format(idx, idx), torch.add, [idx, 197, 1], [1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x197x3072--{}x197x3072".format(idx, idx), torch.add, [idx, 197, 3072], [1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x197x3072--{}x197x3072".format(idx, idx), torch.mul, [idx, 197, 3072], [1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "div-{}x197x3072--{}x197x3072".format(idx, idx), torch.div, [idx, 197, 3072], [1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x197x3072-3072-{}x197x3072".format(idx, idx), torch.add, [idx, 197, 3072], [3072], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x197x3072-3072-{}x197x3072".format(idx, idx), torch.mul, [idx, 197, 3072], [3072], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x197x3072-{}x197x3072-{}x197x3072".format(idx, idx, idx), torch.mul, [idx, 197, 3072], [idx, 197, 3072], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x8x768-768-{}x8x768".format(idx, idx), torch.add, [idx, 8, 768], [768], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "mul-{}x8x768--{}x8x768".format(idx, idx), torch.mul, [idx, 8, 768], [1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x8x2304-2304-{}x8x2304".format(idx, idx), torch.add, [idx, 8, 2304], [2304], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x1280x49-1x1280x1-{}x1280x49".format(idx, idx), torch.add, [idx, 1280, 49], [1, 1280, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x960x49-1x960x1-{}x960x49".format(idx, idx), torch.add, [idx, 960, 49], [1, 960, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x320x49-1x320x1-{}x320x49".format(idx, idx), torch.add, [idx, 320, 49], [1, 320, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x160x49-1x160x1-{}x160x49".format(idx, idx), torch.add, [idx, 160, 49], [1, 160, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x160x7x7-1x160x7x7-{}x160x7x7".format(idx, idx), torch.add, [idx, 160, 7, 7], [1, 160, 7, 7], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x96x14x14-1x96x14x14-{}x96x14x14".format(idx, idx), torch.add, [idx, 96, 14, 14], [1, 96, 14, 14], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x384x196-1x384x1-{}x384x196".format(idx, idx), torch.add, [idx, 384, 196], [1, 384, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x576x196-1x576x1-{}x576x196".format(idx, idx), torch.add, [idx, 576, 196], [1, 576, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x96x196-1x96x1-{}x96x196".format(idx, idx), torch.add, [idx, 96, 196], [1, 96, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x64x14x14-1x64x14x14-{}x64x14x14".format(idx, idx), torch.add, [idx, 96, 14, 14], [1, 96, 14, 14], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x64x196-1x64x1-{}x64x196".format(idx, idx), torch.add, [idx, 96, 196], [1, 96, 1], is_real)

        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x32x784-1x32x1-{}x32x784".format(idx, idx), torch.add, [idx, 32, 784], [1, 32, 1], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "add-{}x192x784-1x192x1-{}x192x784".format(idx, idx), torch.add, [idx, 192, 784], [1, 192, 1], is_real)


        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "Transpose-{}x96x64-{}x64x197".format(idx, idx), torch.transpose, [idx, 197, 64], [1, 2], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "Transpose-{}x96x64-{}x197x64".format(idx, idx), torch.transpose, [idx, 197, 64], [1, 2], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "Transpose-{}x197x64-{}x96x64".format(idx, idx), torch.transpose, [idx, 197, 64], [1, 2], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "Transpose-{}x8x768-{}x197x768".format(idx, idx), torch.transpose, [idx, 1576, 768], [1, 2], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "Transpose-{}x197x768-{}x8x768".format(idx, idx), torch.transpose, [idx, 1576, 768], [1, 2], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "Transpose-{}x768x196-{}x196x768".format(idx, idx), torch.transpose, [idx, 768, 196], [1, 2], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "transpose-{}x384x16x64-{}x16x64x384".format(idx, idx), torch.transpose, [idx, 384, 1024], [1, 2], is_real)
        ret_str += custom_op_gen_impl(compute_power, uncertainty_std, "Transpose-1x3x8x224x224-{}x8x3x224x224".format(idx, idx), torch.transpose, [idx, 3, 8, 224, 224], [1, 2], is_real)


        # hardcode for special ops in costmodel
        ret_str += hard_code_gen_impl("cast-{}x1x1x384-{}x1x1x384".format(idx, idx), 12.0, is_real)
        ret_str += hard_code_gen_impl("dim-{}x384x1024-{}".format(idx, idx), 1.0, is_real)
        ret_str += hard_code_gen_impl("dim-{}x384x16x64-{}".format(idx, idx), 1.0, is_real)
        ret_str += hard_code_gen_impl("dim-{}x384-{}".format(idx, idx), 1.0, is_real)
        ret_str += hard_code_gen_impl("concat-{}-1-{}".format(idx, idx), 10.0, is_real)
        ret_str += hard_code_gen_impl("concat-{}-1-1-{}".format(idx, idx), 12.0, is_real)
        ret_str += hard_code_gen_impl("concat-{}-1-1-1-{}".format(idx, idx), 14.0, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x32x112x112---{}x32x112x112".format(idx, idx), 108.0*idx, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x96x112x112---{}x96x112x112".format(idx, idx), 308.0*idx, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x96x56x56---{}x96x56x56".format(idx, idx), 80.0*idx, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x144x56x56---{}x144x56x56".format(idx, idx), 118.0*idx, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x144x28x28---{}x144x28x28".format(idx, idx), 48.0*idx, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x192x28x28---{}x192x28x28".format(idx, idx), 68.0*idx, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x192x14x14---{}x192x14x14".format(idx, idx), 28.0*idx, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x384x14x14---{}x384x14x14".format(idx, idx), 44.0*idx, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x576x14x14---{}x576x14x14".format(idx, idx), 66.0*idx, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x576x7x7---{}x576x7x7".format(idx, idx), 25.0*idx, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x960x7x7---{}x960x7x7".format(idx, idx), 37.0*idx, is_real)
        ret_str += hard_code_gen_impl("Clip-{}x1280x7x7---{}x1280x7x7".format(idx, idx), 49.0*idx, is_real)

        ret_str += hard_code_gen_impl("AveragePool-{}x512x7x7-{}x512x7x7".format(idx, idx), 21.0*idx, is_real)
        ret_str += hard_code_gen_impl("Split-{}x8x2304-3-{}x8x768-{}x8x768-{}x8x768".format(idx, idx, idx, idx), idx*31.1, is_real)
        ret_str += hard_code_gen_impl("gather-2x1024-1x384-{}x384x1024".format(idx), idx*207.8, is_real)


    return ret_str
def hard_code_gen_impl(query_key, _time, is_real=False):
    if not is_real:
        return "this->atomic_cost.insert(std::make_pair(StringRef(\"" + query_key + "\"), " + "{}".format(_time) + "));\n"
    else:
        return "this->real_atomic_cost.insert(std::make_pair(StringRef(\"" + query_key + "\"), " + "{}".format(_time) + "));\n"
def custom_op_gen_impl(compute_power, uncertainty_std, query_key, fn, lhs_shape, rhs_shape, is_real=False):
    # print(query_key)
    timetraces = []
    lhs = tensor_gen(lhs_shape)
    if fn.__name__ == "mean":
        rhs = rhs_shape
    else:
        rhs = tensor_gen(rhs_shape)
        if fn.__name__ == "gather":
            rhs = torch.randint(0, 3, rhs_shape)

    for i in range(7):
        start = time.time()
        if fn.__name__ == "gather":
            _ = fn(lhs, 1, rhs)
        elif fn.__name__ == "transpose":
            _ = fn(lhs, *rhs_shape)
        else:
            _ = fn(lhs, rhs)
        end = time.time()
        duration = end - start
        timetraces.append(duration*1000*1000)
    _dice = np.random.randn()
    _mean = (mean(timetraces) / compute_power) * (1.0 + uncertainty_std * _dice)

    if not is_real:
        return "this->atomic_cost.insert(std::make_pair(StringRef(\"" + query_key + "\"), " + "{}".format(_mean) + "));\n"
    else:
        return "this->real_atomic_cost.insert(std::make_pair(StringRef(\"" + query_key + "\"), " + "{}".format(_mean) + "));\n"



if __name__ == '__main__':
    
    # gen_inc_file("CrtOpsCPUCostsU5.cpp.inc", 1.0, 0.05)
    # gen_inc_file("CrtOpsGPUTypeACostsU5.cpp.inc", 3.1, 0.05)
    # gen_inc_file("CrtOpsGPUTypeBCostsU5.cpp.inc", 4.7, 0.05)
    # gen_inc_file("CrtOpsGPUTypeCCostsU5.cpp.inc", 1.7, 0.05)
    # gen_inc_file("CrtOpsGPUTypeDCostsU5.cpp.inc", 2.3, 0.05)
    #
    # gen_inc_file("CrtOpsCPUCostsU15.cpp.inc", 1.0, 0.15)
    # gen_inc_file("CrtOpsGPUTypeACostsU15.cpp.inc", 3.1, 0.15)
    # gen_inc_file("CrtOpsGPUTypeBCostsU15.cpp.inc", 4.7, 0.15)
    # gen_inc_file("CrtOpsGPUTypeCCostsU15.cpp.inc", 1.7, 0.15)
    # gen_inc_file("CrtOpsGPUTypeDCostsU15.cpp.inc", 2.3, 0.15)
    #
    # gen_inc_file("CrtOpsCPUCostsU25.cpp.inc", 1.0, 0.25)
    # gen_inc_file("CrtOpsGPUTypeACostsU25.cpp.inc", 3.1, 0.25)
    # gen_inc_file("CrtOpsGPUTypeBCostsU25.cpp.inc", 4.7, 0.25)
    # gen_inc_file("CrtOpsGPUTypeCCostsU25.cpp.inc", 1.7, 0.25)
    # gen_inc_file("CrtOpsGPUTypeDCostsU25.cpp.inc", 2.3, 0.25)
    #
    # gen_inc_file("CrtOpsCPUCostsU35.cpp.inc", 1.0, 0.35)
    # gen_inc_file("CrtOpsGPUTypeACostsU35.cpp.inc", 3.1, 0.35)
    # gen_inc_file("CrtOpsGPUTypeBCostsU35.cpp.inc", 4.7, 0.35)
    # gen_inc_file("CrtOpsGPUTypeCCostsU35.cpp.inc", 1.7, 0.35)
    # gen_inc_file("CrtOpsGPUTypeDCostsU35.cpp.inc", 2.3, 0.35)
    # #
    # # # Actualuncertainty
    # gen_inc_file_real("RealCrtOpsCPUCosts.cpp.inc", 1.0)
    # gen_inc_file_real("RealCrtOpsGPUTypeACosts.cpp.inc", 3.1)
    # gen_inc_file_real("RealCrtOpsGPUTypeBCosts.cpp.inc", 4.7)
    # gen_inc_file_real("RealCrtOpsGPUTypeCCosts.cpp.inc", 1.7)
    # gen_inc_file_real("RealCrtOpsGPUTypeDCosts.cpp.inc", 2.3)


    gen_cost_model("CrtOpsCPUCosts", 1.0)
    gen_cost_model("CrtOpsGPUTypeACosts", 3.1)
    gen_cost_model("CrtOpsGPUTypeBCosts", 4.7)
    gen_cost_model("CrtOpsGPUTypeCCosts", 1.7)
    gen_cost_model("CrtOpsGPUTypeDCosts", 2.3)
